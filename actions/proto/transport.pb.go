// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transport.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	_ "www.velocidex.com/golang/velociraptor/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A message to encode a filesystem path (maybe for raw access)
// Next field: 15
type PathSpec struct {
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Accessor             string   `protobuf:"bytes,3,opt,name=accessor,proto3" json:"accessor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PathSpec) Reset()         { *m = PathSpec{} }
func (m *PathSpec) String() string { return proto.CompactTextString(m) }
func (*PathSpec) ProtoMessage()    {}
func (*PathSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{0}
}

func (m *PathSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathSpec.Unmarshal(m, b)
}
func (m *PathSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathSpec.Marshal(b, m, deterministic)
}
func (m *PathSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathSpec.Merge(m, src)
}
func (m *PathSpec) XXX_Size() int {
	return xxx_messageInfo_PathSpec.Size(m)
}
func (m *PathSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PathSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PathSpec proto.InternalMessageInfo

func (m *PathSpec) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PathSpec) GetAccessor() string {
	if m != nil {
		return m.Accessor
	}
	return ""
}

// The Velociraptor client sends back the buffer and the filename and
// the server saves the entire file directly in the file storage
// filesystem. This allows easy recovery as well as data expiration
// policies (since the filestore is just a directory on disk with
// regular files and timestamps).
type FileBuffer struct {
	Pathspec *PathSpec `protobuf:"bytes,1,opt,name=pathspec,proto3" json:"pathspec,omitempty"`
	Offset   uint64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Expected size of file.
	Size                 uint64   `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	FlowId               string   `protobuf:"bytes,4,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	Eof                  bool     `protobuf:"varint,5,opt,name=eof,proto3" json:"eof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileBuffer) Reset()         { *m = FileBuffer{} }
func (m *FileBuffer) String() string { return proto.CompactTextString(m) }
func (*FileBuffer) ProtoMessage()    {}
func (*FileBuffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{1}
}

func (m *FileBuffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileBuffer.Unmarshal(m, b)
}
func (m *FileBuffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileBuffer.Marshal(b, m, deterministic)
}
func (m *FileBuffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileBuffer.Merge(m, src)
}
func (m *FileBuffer) XXX_Size() int {
	return xxx_messageInfo_FileBuffer.Size(m)
}
func (m *FileBuffer) XXX_DiscardUnknown() {
	xxx_messageInfo_FileBuffer.DiscardUnknown(m)
}

var xxx_messageInfo_FileBuffer proto.InternalMessageInfo

func (m *FileBuffer) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *FileBuffer) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FileBuffer) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileBuffer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileBuffer) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *FileBuffer) GetEof() bool {
	if m != nil {
		return m.Eof
	}
	return false
}

func init() {
	proto.RegisterType((*PathSpec)(nil), "proto.PathSpec")
	proto.RegisterType((*FileBuffer)(nil), "proto.FileBuffer")
}

func init() { proto.RegisterFile("transport.proto", fileDescriptor_a97e32c760ec1b28) }

var fileDescriptor_a97e32c760ec1b28 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x3f, 0xcf, 0xd3, 0x30,
	0x10, 0xc6, 0x65, 0xde, 0xbc, 0x7d, 0x83, 0x41, 0x2a, 0xf2, 0x42, 0xc4, 0x74, 0x94, 0x81, 0x56,
	0x48, 0x89, 0x04, 0x1b, 0x1b, 0x1d, 0x90, 0x10, 0x03, 0x28, 0x74, 0x47, 0x6e, 0x72, 0x6e, 0x2c,
	0x25, 0xb1, 0x65, 0x5f, 0x1b, 0xca, 0xc6, 0x77, 0x63, 0xe7, 0x03, 0xb0, 0xc1, 0xd7, 0x60, 0x40,
	0xbe, 0xfe, 0x81, 0xc9, 0xe7, 0x47, 0xcf, 0x3d, 0xf7, 0xbb, 0x93, 0x73, 0x0a, 0x7a, 0x8c, 0xde,
	0x05, 0x2a, 0x7d, 0x70, 0xe4, 0xd4, 0x2d, 0x3f, 0x4f, 0x5e, 0x4f, 0xd3, 0x54, 0x1e, 0xb0, 0x77,
	0x8d, 0x6d, 0xf1, 0x4b, 0xd9, 0xb8, 0xa1, 0xda, 0xb9, 0x5e, 0x8f, 0xbb, 0xea, 0x24, 0x06, 0xed,
	0xc9, 0x85, 0x8a, 0xcd, 0x55, 0xc4, 0x41, 0x8f, 0x64, 0x9b, 0x53, 0xc4, 0xe2, 0xa7, 0x90, 0xf9,
	0x47, 0x4d, 0xdd, 0x27, 0x8f, 0x8d, 0xfa, 0x26, 0x64, 0xe6, 0x35, 0x75, 0xc5, 0x3d, 0x10, 0xcb,
	0xfb, 0xeb, 0xe1, 0xd7, 0x9f, 0xdf, 0xdf, 0xc5, 0x4e, 0xe1, 0xa6, 0x43, 0x48, 0x3a, 0x78, 0x1d,
	0x23, 0xb6, 0x40, 0x0e, 0xa8, 0x43, 0x78, 0x6b, 0x7b, 0x8c, 0xc7, 0x48, 0x38, 0x80, 0x6e, 0x1a,
	0x8c, 0xd1, 0x85, 0x12, 0x36, 0x9d, 0x8d, 0x70, 0xd0, 0xfd, 0x1e, 0xc1, 0x46, 0xb0, 0x23, 0x61,
	0xf0, 0x01, 0x09, 0x5b, 0xd8, 0x1e, 0xb9, 0xeb, 0x62, 0x05, 0x3b, 0x82, 0xa5, 0x08, 0x6e, 0x1a,
	0x61, 0xd2, 0xc7, 0xb2, 0xe6, 0xd1, 0xea, 0xbd, 0xcc, 0x2f, 0x8e, 0xe2, 0x86, 0x31, 0x2a, 0xc6,
	0x58, 0xa9, 0xe7, 0x9b, 0xff, 0xbb, 0xf7, 0x67, 0x90, 0x80, 0x14, 0x2c, 0x1e, 0x90, 0xb3, 0x8d,
	0xed, 0xb1, 0xac, 0xaf, 0x01, 0x8b, 0x1f, 0x42, 0xca, 0x44, 0xb9, 0xde, 0x1b, 0x83, 0x41, 0xbd,
	0x90, 0x79, 0x9a, 0x11, 0x3d, 0x36, 0x85, 0x00, 0xb1, 0x7c, 0xf0, 0x72, 0x7e, 0x3a, 0x43, 0x79,
	0x39, 0x41, 0x7d, 0x35, 0xa8, 0x37, 0x72, 0xe6, 0x8c, 0x89, 0x48, 0x7c, 0x8d, 0x6c, 0xbd, 0x62,
	0x8c, 0x67, 0xea, 0xe9, 0x07, 0x56, 0xc1, 0x19, 0x1e, 0xb9, 0xe5, 0xe8, 0xb4, 0xcc, 0x3f, 0x80,
	0x73, 0xa3, 0x52, 0x32, 0x8b, 0xf6, 0x2b, 0x16, 0x77, 0x29, 0xa0, 0xe6, 0x3a, 0x69, 0xad, 0x26,
	0xcd, 0xbb, 0x3d, 0xac, 0xb9, 0x56, 0x8f, 0xe5, 0x9d, 0xe9, 0xdd, 0xf4, 0xd9, 0xb6, 0x45, 0x96,
	0x56, 0xae, 0x67, 0xe9, 0xfb, 0xae, 0x55, 0x8f, 0xe4, 0x0d, 0x3a, 0x53, 0xdc, 0x82, 0x58, 0xe6,
	0x75, 0x2a, 0xb7, 0x33, 0xe6, 0x7d, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0x69, 0xb7, 0x11, 0x0f,
	0x0c, 0x02, 0x00, 0x00,
}
