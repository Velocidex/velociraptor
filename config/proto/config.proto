// This file represents the configuration file schema.
syntax = "proto3";

import "proto/semantic.proto";
import "actions/proto/vql.proto";
import "artifacts/proto/artifact.proto";

package proto;

option go_package = "www.velocidex.com/golang/velociraptor/config/proto";

// Information about Velociraptor. This is a pseudo config item - it
// will never be read from config files, but can be used in VQL
// queries. It will be written to config files as metadata about the
// version that produced the config file.
message Version {
    string name = 1 [(sem_type) = {
            description: "The client's name."
        }];

    string description = 2 [(sem_type) = {
            description: "The client's long description string"
        }];

    string version = 3 [(sem_type) = {
            description: "The client's version string using a semantic versioning scheme."
        }];

    string commit = 4 [(sem_type) = {
            description: "The client's git commit string."
        }];

    string build_time = 5 [(sem_type) = {
            description: "When the client was built."
        }];

    // Populated by reading the writeback file.
    uint64 install_time = 8;

    string ci_build_url = 6;

    string compiler = 7;
}

// A pointer to cuurently executing flows.
message FlowCheckPoint {
    string flow_id = 1;
    string path = 2;
}

// The client's state which are persisted in the writeback file.
message Writeback {
    // When the client was installed (basically the timestamp of the
    // writeback file).
    uint64 install_time = 16;

    string private_key = 7 [(sem_type) = {
            description: "The client's private key in PEM encoding."
        }];

    // This is calculated from the public key above so it is only here
    // for information.
    string client_id = 15;

    uint64 hunt_last_timestamp = 13 [(sem_type) = {
            description: "The last hunt timestamp this client ran."
        }];

    uint64 last_server_serial_number = 14 [(sem_type) = {
            description: "The last certificate serial number we saw from the server. Clients refuse to connect to servers with older serial numbers as part of server key rotation protocol."
        }];

    VQLEventTable event_queries = 1;

    repeated FlowCheckPoint checkpoints = 17;
}

// TODO - refactor from api/orgs.proto
message InitialOrgRecord {
    string org_id = 1;
    string name = 2;

    // If this is empty we use the org id
    string nonce = 3;
}

// Configuration for the windows installer. NOTE: This is not used
// much - it is only used when running `velociraptor service
// install`. We typically use an MSI to deploy (see the docs/wix/
// directory).
message WindowsInstallerConfig {
    string service_name = 1 [(sem_type) = {
            description: "The name of the service to create."
        }];
    string install_path = 2 [(sem_type) = {
            description: "Where should the binary be installed? The install command "
            "copies the binary to this location and installs the service.",
        }];
    string service_description = 3 [(sem_type) = {
            description: "Description for the windows service.",
        }];
}


message DarwinInstallerConfig {
    string service_name = 1 [(sem_type) = {
            description: "The name of the service to create."
        }];
    string install_path = 2 [(sem_type) = {
            description: "Where should the binary be installed? The install command "
            "copies the binary to this location and installs the service.",
        }];
}

message RingBufferConfig {
    string filename = 3 [deprecated = true];

    uint64 memory_size = 1 [(sem_type) = {
       description: "How many bytes to store in the ring buffer in memory."
    }];

    uint64 disk_size = 2 [(sem_type) = {
       description: "How many bytes to store in the ring buffer on disk (0 mean no disk file)."
    }];

    string filename_linux = 4 [(sem_type) = {
       description: "Name of file to store the ring buffer in (if empty we do not use a file)."
    }];

    string filename_windows = 5 [(sem_type) = {
       description: "Name of file to store the ring buffer in (if empty we do not use a file)."
    }];

    string filename_darwin = 6 [(sem_type) = {
       description: "Name of file to store the ring buffer in (if empty we do not use a file)."
    }];

}

message ClientConfig {
    repeated string labels = 6 [(sem_type) = {
            description: "A list of labels the client has. This allows selected groups of clients to be targeted in hunts."
        }];

    repeated string server_urls = 8 [(sem_type) = {
            description: "A list of server URLs the client will try to connect to."
        }];

    // A proxy setting to use.
    string proxy = 32;

    string ca_certificate = 11 [(sem_type) = {
            description: "The CA's certificate encoded in PEM. The client will trust any server signed with this CA."
        }];

    string nonce = 12 [(sem_type) = {
            description: "A shared nonce the client will present. The server will reject clients which do not present this key so it must be embedded in the client's configuration."
        }];

    string writeback_darwin = 20 [(sem_type) = {
            description: "A path where darwin clients will write local state."
        }];

    string writeback_linux = 9 [(sem_type) = {
            description: "A path where linux clients will write local state."
        }];

    string writeback_windows = 10 [(sem_type) = {
            description: "A path where windows clients will write local state."
        }];

    // A path to set the temp directory. If not set we use the system
    // default. The path may be relative to the current directory
    // (usually the location of the executable). If the path does not
    // exist we fall back to the system temp directory.
    string tempdir_linux = 1;
    string tempdir_windows = 2;
    string tempdir_darwin = 3;

    // Number of seconds to wait between polls (default 1
    // second). NOTE: Velociraptor typically holds the connection up
    // for at least max_poll time and then refreshes the
    // connection. The min poll is used to determine how quickly
    // connections should resume.
    uint64 min_poll = 14;
    uint64 max_poll = 15 [(sem_type) = {
            description: "The maximum number of seconds between server polls."
            default: "600",
        }];

    uint64 max_poll_std = 27 [(sem_type) = {
            description: "The standard deviation between polls."
            default: "30",
        }];

    // If this is set, the nanny will exit if we are not able to send
    // messages to the server within this many seconds. NOTE - even a
    // failed connection will reset the counter, the nanny will only
    // fire if the client has failed in some way - e.g. the
    // communicator is stopped for some reason
    uint64 nanny_max_connection_delay = 36;

    WindowsInstallerConfig windows_installer = 16 [(sem_type) = {
            description: "Configuration of the windows installer.",
        }];

    DarwinInstallerConfig darwin_installer = 21 [(sem_type) = {
            description: "Configuration of the windows installer.",
        }];

    bool prevent_execve = 17 [(sem_type) = {
            description: "If this is set, prevent arbitrary code execution on clients."
        }];

    Version version = 18 [(sem_type) = {
            description: "The version information for this client.",
        }];

    uint64 default_max_wait = 19 [(sem_type) = {
            description: "The default max time to wait before we send partial VQL results.",
        }];

    bool use_self_signed_ssl = 24 [(sem_type) = {
            description: "If this is set, the client will expect a self signed certificate from the server."
            "NOTE: The self signed certificate must be signed by the Velociraptor CA which is embedded above."
        }];

    string pinned_server_name = 28 [(sem_type) = {
           description: "Name of the frontend's certificate. If we are using self signed "
           "SSL the client will be pinned to this name (default VelociraptorServer)"
        }];

    uint64 max_upload_size = 25 [(sem_type) = {
             description: "Maximum size in Bytes we will create uploads for (default 5mb)"
        }];

    RingBufferConfig local_buffer = 26 [(sem_type) = {
             description: "Configure the local ring buffer."
        }];

    uint64 max_memory_hard_limit = 29;

    // Maximum number of concurrent queries the client will allow (default 2).
    uint64 concurrency = 31;

    // Maximum timeout for connection retry - the length of time we
    // try a connection before restarting it (default 5 min).
    uint64 connection_timeout = 35;

    CryptoConfig Crypto = 33;

    bool disable_compression = 37;

    // How often clients inform the server about flow progress
    // (default 5 seconds).
    uint64 default_server_flow_stats_update = 39;

    // Clients will send a Server.Internal.ClientInfo message to the
    // server every this many seconds.This helps to keep the server
    // info up to date about each client. This should not be sent too
    // frequently. The default is 1 day (86400 seconds).
    int64 client_info_update_time = 40;

    // Clients may not be able to reach a given host in the
    // internet. For that case, this mapping contains alternatives
    // which may be used instead. It's crucial that the addresses
    // include the port after a colon (see net.Dial).
    //
    // Example (yaml):
    //  Client:
    //    fallback_addresses:
    //      "my-velociraptor-server.com:443": "123.123.123.123:443"
    //
    // This makes that if https://my-velociraptor-server.com is not
    // reachable (for example if DNS is not available due to a network
    // isolation because of an ongoing incident), 123.123.123.123:443
    // will be used as a fallback.
    map<string, string> fallback_addresses = 41 [(sem_type) = {
            description: "This mapping provides fallback addresses for network targets so that a connection may still be established."
        }];

    // If set we disable client checkpoints and so we can not report
    // to the server when the client crashes while collecting an
    // artifact.
    bool disable_checkpoints = 42;

    // Here you can specify a list of event artifacts to automatically
    // collect in addition to the list sent by the server. This is
    // most useful to initialize the client.
    repeated string additional_event_artifacts = 43;
}

message APIConfig {
    // Publicly accessible hostname.
    string hostname = 5;

    string bind_address = 1 [(sem_type) = {
            description: "Address to bind gRPC endpoint. This should usually only be 127.0.0.1, otherwise be sure to properly secure it."
        }];

    uint32 bind_port = 2 [(sem_type) = {
            description: "Port to bind to."
        }];

    string bind_scheme = 3 [(sem_type) = {
            description: "A scheme for the listening socket (e.g. tcp, unix).",
            default: "unix",
        }];

    string pinned_gw_name = 4 [(sem_type) = {
            description: "Gateway certificate will carry this common name. Note that "
            "this name is special because it allows auth bypass for internal gateway "
            "calls. Default (GRPC_GW)"
        }];
}

// Configuration to be consumed by api clients.
message ApiClientConfig {
    string ca_certificate = 1 [(sem_type) = {
            description: "The CA certificate used to verify API connections.",
        }];

    string client_cert = 2 [(sem_type) = {
            description: "A client certificate that belongs to this client. "
               "Generated from the 'velociraptor config api_client' command."
        }];

    string client_private_key = 3 [(sem_type) = {
            description: "Private key to go with the client_cert.",
        }];

    string api_connection_string = 4 [(sem_type) = {
            description: "Location where the api endpoint will be available.",
        }];

    string name = 5 [(sem_type) = {
            description: "The CommonName for this API client.",
        }];

    string pinned_server_name = 6;
}

message GUILink {
    string text = 1;
    string url = 2;
    string icon_url = 3;

    // This can be "sidebar" (default), "context"
    string type = 4;

    // If set we open in new tab
    bool new_tab = 5;

    // Encode value first using this (can be "plain", "base64")
    string encode = 6;
    string parameter = 7;

    // Can be GET (default) or POST
    string method = 8;

    // If set we ignore this entry completely
    bool disabled = 9;
}

message Authenticator {
    string type = 1;

    // OIDC/OAuth2 Authenticator (Google, Github, Azure etc).
    string oidc_issuer = 4 [(sem_type) = {
            description: "URL to OIDC Configuration Document. The configuration should be available in the 'oidc_issuer + /.well-known/openid-configuration' endpoint. ",
        }];
    string oidc_name = 18;

    // Can be an img src for the avatar
    string avatar = 19;
    string oauth_client_id = 5 [(sem_type) = {
            description: "If set we use oauth authentication flow.",
        }];
    string oauth_client_secret = 6 [(sem_type) = {
            description: "If set we use oauth authentication flow.",
        }];

    // Azure requires a tenancy as well.
    string tenant = 7;

    // SAML Authenticator
    string saml_certificate = 12 [(sem_type) = {
            description: "SAML certificate."
        }];
    string saml_private_key = 13 [(sem_type) = {
            description: "SAML private key."
        }];
    string saml_idp_metadata_url = 14 [(sem_type) = {
            description: "SAML identity provider metadata URL."
        }];
    string saml_root_url = 15 [(sem_type) = {
            description: "SAML root URL."
        }];
    string saml_user_attribute = 16 [(sem_type) = {
            description: "SAML attribute containing value for user identification."
        }];

    // MultiAuthenticator delegates to multiple other authenticators.
    repeated Authenticator sub_authenticators = 17;

    string auth_redirect_template = 21 [(sem_type) = {
            description: "URL to redirect to on Unauthorized API call",
        }];

    // Certs authenticator: If a user presents a certificate but does
    // not exist in the system, the user will receive a default
    // role. If this is not set the user will be rejected.
    repeated string default_roles_for_unknown_user = 22;

    // Defaults - no need to change these generally.

    // How long to keep the session alive between auth flows - default
    // 24 hours
    uint64 default_session_expiry_min = 20;
}

message GUIConfig {
    string bind_address = 1 [(sem_type) = {
            description: "Address to bind GUI endpoint. This should usually only be 127.0.0.1, otherwise be sure to properly secure it."
        }];

    uint32 bind_port = 2 [(sem_type) = {
            description: "Port to bind to."
        }];

    // Allows the GUI to start with no encryption - **WARNING** This
    // only makes sense if you have TLS proxy in front. In fact the
    // GUI **will not work** without a TLS proxy because the csrf
    // cookie is set to secure only.
    bool use_plain_http = 20;

    // Serve the GUI from this base path instead of "/"
    string base_path = 21;

    string gw_certificate = 10 [(sem_type) = {
            description: "The GUI exposes a HTTP interface to the gRPC end point."
            "This is the certificate and private key that will be used to "
            "connect to the gRPC endpoint."
        }];

    string gw_private_key = 11 [(sem_type) = {
            description: "The private key of the frontend server encoded in PEM format."
        }];

    repeated string internal_cidr = 3 [(sem_type) = {
            description: "CIDR addresses of internal networks (e.g. 192.168.0.0/16). We use this to show the internal/external icon."
        }];

    repeated string vpn_cidr = 4 [(sem_type) = {
            description: "CIDR addresses of vpn networks (e.g. 192.168.0.0/16). We use this to show the internal/external icon."
        }];

    string public_url = 7 [(sem_type) = {
            description: "The public URL of this server.",
        }];

    repeated ReverseProxyConfig reverse_proxy = 8 [(sem_type) = {
            description: "Routes for reverse proxies.",
        }];

    repeated GUILink links = 9 [(sem_type) = {
            description: "Additional links to present in the GUI."
        }];

    // These users are created with administrator role if they do not
    // already exist in the data store. This is useful for
    // initializing the server with some valid administrators.
    repeated GUIUser initial_users = 17;

    repeated InitialOrgRecord initial_orgs = 22;

    // The authenticator to use - can not be null.
    Authenticator authenticator = 19;

    // The GUI will filter artifact search results by this regular
    // expression. This is useful to restrict the number of choices
    // available in the GUI to a small subset (e.g. only certain
    // packs).
    string artifact_search_filter = 18;

    // SAML info deprecated - will be moved to a saml authenticator.
    string saml_certificate = 12;
    string saml_private_key = 13;
    string saml_idp_metadata_url = 14;
    string saml_root_url = 15;
    string saml_user_attribute = 16;
    // DEPRECATED: Will be moved to a Google authenticator
    string google_oauth_client_id = 5;
    string google_oauth_client_secret = 6;
}

message GUIUser {
    string name = 1;
    string password_hash = 2;
    string password_salt = 3;
}

message CAConfig {
    string private_key = 1 [(sem_type) = {
            description: "The private key of the CA encoded in PEM. This must correspond with the certificate in Client.ca_certificate."
        }];
}

message ReverseProxyConfig {
    string route = 1;
    string url = 2;
    bool require_auth = 3;
}


message DynDNSConfig {
    string hostname = 1 [deprecated=true];

    // Not used any more - we take the hostname from Frontend.Hostname.
    string ddns_username = 2;
    string ddns_password = 3;
    string update_url = 4;
    uint64 frequency = 5;

    // The url we will use to check the ip. Should return a plain IP address
    string checkip_url = 6;

    // DNS server we query for our own hostname/ip mapping (default 8.8.8.8:53)
    string dns_server = 7;
}

message FrontendResourceControl {
    // Connections are limited to this rate - faster client
    // connections will result in 500 errors which will in turn cause
    // the clients to back off. This mechanism allows the server to
    // loadshed client connections. We allow up to 10 seconds
    // sustained QPS above this limit before we start load shedding.
    uint64 connections_per_second = 1;

    // How fast to notify clients of a new hunt creation (This
    // effectively limits client recruitment rate). Default 10
    // notifications per sec.
    uint64 notifications_per_second = 2;

    // How quickly do we enroll clients (default 100/s, -1 to disable enrollments)
    int64 enrollments_per_second = 3;

    // The maximum number of concurrent client connections we can
    // process. Concurrency limits helps to ensure the server is not
    // overloaded serving too many clients at the same time.
    // Concurrency refers to the actual serving time of a client
    // (i.e. time taken to read the response and write to the
    // datastore), not the total number of clients served by
    // server. Default is number of cores * 2.
    uint64 concurrency = 9;

    // Aim for this heap size (default 2Gb). If actual memory usage
    // approaches this maximum, the frontend will begin to limit
    // client connections.
    // DEPRECATED
    uint64 target_heap_size = 10;

    // The maximum time a client will be waiting for a concurrency
    // slot before timing out. A small value will result in many
    // reconnections under load.
    uint64 concurrency_timeout = 24;

    // Increasing this allows the frontend to receive larger POST
    // messages lowering crypto overheads but this comes at the
    // expense of more memory use.
    uint64 max_upload_size = 11 [(sem_type) = {
             description: "Maximum size in Bytes we will accept uploads for"
        }];

    // This setting controls the size of various LRU caches in the
    // frontend (e.g. the session key cache, client info cache). This
    // number should be larger than the number of actual clients or
    // else the system will see high CPU load from cache misses.
    int64 expected_clients = 15 [(sem_type) = {
            description: "Expected number of clients in this deployment (default 10000)",
        }];

    // Bandwidth control: Per client and global rates in bytes/sec
    int64 per_client_upload_rate = 21;
    int64 global_upload_rate = 22;

    // Wait time for collecting events from clients - smaller means
    // less latency to respond to client events but also means more
    // TLS handshake and network overheads due to frequent POST.
    uint64 client_event_max_wait = 23;

    // Minions batch updates to the master so as to minimize RPC as
    // much as possible, this controls how often these batches are
    // flushed to the master (default 10 sec).
    uint64 minion_batch_wait_time_ms = 25;

    // How often to save an index snapshot to storage (default 600
    // sec). Index files are typically 150kb / 1000 clients.
    uint64 index_snapshot_frequency = 26;

    // Number of seconds before expiring client info cache
    // entries. Default (0) means do not expire at all. Expiring
    // client info from cache too frequently can result in a lot more
    // IO. Default size of this cache is the expected_clients above.
    uint64 client_info_lru_ttl = 27;

    // How often to sync client info records (ms)
    uint64 client_info_sync_time = 29;
    uint64 client_info_write_time = 30;

    // The journal files are used to queue messages between event
    // generators and event consumers when the consumer is unable to
    // drain these quickly enough. The setting specifies the maximum
    // size of the file - when it is exceeded, the file will be
    // truncated and events will be lost. Default is 1gb
    int64 max_journal_buffer_size = 28;

    // The maximum time in seconds the client will batch log messages
    // before forwarding them to the server (default 1 second).
    uint64 default_log_batch_time = 31;

    // The maximum time in seconds the client will batch minitoring
    // log messages before forwarding them to the server (default 600
    // second).
    uint64 default_monitoring_log_batch_time = 32;
}


message FrontendConfig {
    string public_path = 8 [deprecated=true];

    // Publicly accessible hostname for this frontend.
    string hostname = 19;

    // Address to bind frontend endpoint. Clients connect to this
    // endpoint to poll for jobs.
    string bind_address = 1;

    // Port to bind to
    uint32 bind_port = 2;

    // Serve the GUI from this base path instead of "/"
    string base_path = 25;

    // This allows the frontends to listen on plain HTTP - It is
    // useful if you have SSL offloading (e.g. ngix). This is not
    // configured by the wizard - you will need to manually configure
    // it. You better know what you are doing here!
    bool use_plain_http = 24;

    // A proxy setting to use - Velociraptor needs to connect to
    // download tools. This setting will force it to go out over this
    // proxy. NOTE- If you dont want to allow outbound connections,
    // just set this to an non existant setting.
    string proxy = 33;

    // These are used to secure the client/server communications -
    // Even when using external TLS certificates! This certificate
    // must be signed by the Velociraptor rooot CA in all cases. If
    // using an external TLS configuration this layer of encryption
    // happens **in addition** to the external TLS certificates.
    string certificate = 3 [(sem_type) = {
            description: "X509 Certificate of frontend server."
        }];

    string private_key = 4 [(sem_type) = {
            description: "The private key of the frontend server encoded in PEM format."
        }];

    // If you want to use your own certificates for TLS as an
    // alternative to Autocert, then you can set those here. These
    // certificates will be used for TLS on both the frontend and
    // GUI. NOTE: We expect these to be proper certificates - i.e. NOT
    // self signed. Velociraptor only supports self signed
    // certificates issued by the Velociraptor CA embedded in the
    // client's config file.

    // Be sure to set Client.use_self_signed_ssl=false when you set this.
    string tls_certificate_filename = 28;
    string tls_private_key_filename = 29;

    string dns_name = 6 [(sem_type) = {
            description: "The DNS name of the frontend."
        }];

    bool do_not_compress_artifacts = 10 [(sem_type) = {
            description: "When set we do not compress artifacts sent to the client. "
            "This is only useful for debugging. Note: Setting this will send the client "
            "artifact fields like name and description which may result in information "
            "disclosure if the client is untrusted."
        }];

    DynDNSConfig dyn_dns = 12 [(sem_type) = {
            description: "If set we start the dyn dns service.",
        }];

    string proxy_header = 13 [(sem_type) = {
            description: "Header defined by the proxy containing the remote address",
        }];

    repeated string default_client_monitoring_artifacts = 14 [(sem_type) ={
            description: "The initial set of client monitoring artifacts."
        }];

    // We have the Server.Monitor.Health enabled always but these are
    // any additional artifacts that should be installed by default.
    repeated string default_server_monitoring_artifacts = 31 [(sem_type) ={
            description: "Additional initial set of server monitoring artifacts."
        }];

    // If set this will cause the frontend to collect these artifacts
    // the first time it is run after install.
    repeated string initial_server_artifacts = 34;

    string run_as_user = 16 [(sem_type) = {
            description: "The user that the frontend should run as. If set we refuse to run as a different user.",
        }];

    int64 GRPC_pool_max_size = 17;
    int64 GRPC_pool_max_wait = 18;

    FrontendResourceControl resources = 27;

    // Used internally to tag this frontend as the master.
    bool is_minion = 30;

    // DEPRECATED ****************************************************

    // Below options are DEPRECATED - moved to resources by migration code.
    uint64 concurrency = 9 [(sem_type) = {
            description: "The number of client messages to process concurrently.",
        }];

    uint64 max_upload_size = 11 [(sem_type) = {
             description: "Maximum size in Bytes we will accept uploads for"
        }];

    // Various performoance related tweaks.
    int64 expected_clients = 15 [(sem_type) = {
            description: "Expected number of clients in this deployment (default 10000)",
        }];

    // Per client rate in bytes/sec
    int64 per_client_upload_rate = 21;
    int64 global_upload_rate = 22;

    // Wait time for collecting events from clients - smaller means
    // less latency to respond to client events but also means more
    // TLS handshake and network overheads due to frequent POST.
    uint64 client_event_max_wait = 23;

    // Load artifacts from this directory at startup
    string artifact_definitions_directory = 32;

    // A regular expression that if matches any log messages from the
    // client's query represent a failure of the collection.
    string collection_error_regex = 35;

    // DEPRECATED - ignored.
    bool do_not_redirect = 26;
}

message DatastoreConfig {
    // The name of the datastore implementation to use.
    // Currently the following implementations are supported:

    // 1. FileBaseDataStore - The standard default - uses files on the
    //    filesystem for both large result sets (File store) and small
    //    files (Data store).

    // 2. MemoryOnlyDataStore or Test - a non persistent in Memory
    //    only data store for both large result sets and data
    //    files. This is used mainly in Tests.

    // 3. Memcache - a memory based cache with file backing. Large
    //    files are written to disk while small files are memory
    //    cached with disk backing.

    // 4. FileBasedWithRPC - Large files are written to disk (File
    //    store) but small files are accessed via RPC to a local
    //    memcache server. This configuration is suitable for the
    //    Minion node on a slow EFS backed filesystem. All data store
    //    access will go through to the master memcache using gRPC.
    string implementation = 1;

    // For FileBaseDataStore
    string location = 2;
    string filestore_directory = 3;

    // Cap directories to this size after reporting error - this
    // should not happen normally but may happen if the deployment has
    // been very active or due to a bug!
    uint64 max_dir_size = 13;

    // How long to expire the memcache (default 10 min)
    uint64 memcache_expiration_sec = 4;

    // How many mutations to queue up ahead of busy writers. By
    // default 0 means writes will be blocked until they are handed
    // off to a writer thread. Set to -1 to disable asynchronous
    // writes.
    int64 memcache_write_mutation_buffer = 5;

    // Number of writing threads - increase for high latency
    // filesystems (default 100).
    int64 memcache_write_mutation_writers = 6;

    // How long to delay writes so they can be combined. This applies
    // for writing result sets - we keep the writes in memory for
    // min_age seconds in order to combine further writes. If another
    // write occurs to the same result sets the TTL is extended and
    // writes are delayed. However, once we read max_age, a write is
    // forced. The aim is to keep combine separate writes as much as
    // possible into larger writes but at the same time keep
    // frequently written files from never flushing to disk.
    int64 memcache_write_mutation_min_age = 14; // Default 1000 msec
    int64 memcache_write_mutation_max_age = 9;  // Default 5000 msec

    // Maximum size of memcache lru (default 10000)
    int64 memcache_datastore_max_size = 10;
    int64 memcache_datastore_max_item_size = 11;
    int64 memcache_datastore_max_dir_size = 12;

    // Experimental - do not set in configs yet!
    string minion_implementation = 7;
    string master_implementation = 8;
}

// Configuration for the mail server.
message MailConfig {
    string from = 1 [(sem_type) = {
            description: "Where the email should be sent from. If not set we use the auth_username.",
        }];

    string server = 2 [(sem_type) = {
            description: "Address of the SMTP server.",
        }];

    uint64 server_port = 3 [(sem_type) = {
            description: "Port of the SMTP server",
        }];

    string auth_username = 4 [(sem_type) = {
            description: "Name to authenticate under.",
        }];

    string auth_password = 5 [(sem_type) = {
            description: "password to authenticate with.",
        }];

    bool skip_verify = 6;
}

message LoggingRetentionConfig {
    // How often to rotate the files in seconds.
    uint64 rotation_time = 3;

    // Maximum age of each file (File will be deleted after this time (1 year).
    uint64 max_age = 4;

    // If this is true this log source is disabled.
    bool disabled = 5;

}

message LoggingConfig {
    string output_directory = 1 [(sem_type) = {
            description: "The location to write log files. "
            "If not set we write no log files.",
        }];

    bool separate_logs_per_component = 2 [(sem_type) = {
            description: "If set, each component will log to a separate file.",
        }];

    uint64 rotation_time = 3 [(sem_type) = {
            description: "How often to rotate the files.",
        }];

    uint64 max_age = 4 [(sem_type) = {
            description: "Maximum age of each file (File will be deleted after this time).",
            default: "31536000", // One year
        }];

    LoggingRetentionConfig debug = 5;
    LoggingRetentionConfig info = 6;
    LoggingRetentionConfig error = 7;

    string remote_syslog_server = 8;
    string remote_syslog_protocol = 9;
    repeated string remote_syslog_components = 10;
}

message MonitoringConfig {
    string bind_address = 1 [(sem_type) = {
            description: "Address to bind monitoring endpoint. This should usually only be 127.0.0.1, otherwise be sure to properly secure it."
        }];

    uint32 bind_port = 2 [(sem_type) = {
            description: "Port to bind monitoring port."
        }];
}

message AutoExecConfig {
    repeated string argv = 1;
    repeated Artifact artifact_definitions = 2;
}

// When a binary starts it initializes some services depending on its
// role. The startup code will update the config object to request the
// right services, depending on the required role. Services are
// actually started by the org manager.

// Do not set these in the configuration file - they are used internally.
message ServerServicesConfig {
   bool hunt_manager = 1;
   bool hunt_dispatcher = 2;
   bool stats_collector = 3;
   bool server_monitoring = 4;
   bool server_artifacts = 5;
   bool dyn_dns = 6;
   bool interrogation = 7;
   bool sanity_checker = 8;
   bool vfs_service = 9;
   bool user_manager = 10;
   bool client_monitoring = 11;
   bool monitoring_service = 12;
   bool api_server = 13;
   bool frontend_server = 14;
   bool gui_server = 15;
   bool index_server = 16;
   bool journal_service = 17;
   bool replication_service = 26;
   bool notification_service = 18;
   bool repository_manager = 19;
   bool test_repository_manager = 25;
   bool inventory_service = 20;
   bool client_info = 21;
   bool label = 22;
   bool launcher = 23;
   bool notebook_service = 24;

    // Client services
   bool http_communicator = 27;
   bool client_event_table = 28;
}

message Defaults {
    int64 hunt_expiry_hours = 1;
    int64 notebook_cell_timeout_min = 2;

    // The default CSV delimiter
    string csv_delimiter = 3;

    uint64 event_max_wait = 4;
    uint64 event_max_wait_jitter = 5;

    // If set we actively notify all clients as soon as event table is
    // changed. This causes a lot of load on large deployments so it
    // is off by default.
    bool event_change_notify_all_clients = 6;

    uint64 max_vfs_directory_size = 7;

    repeated string artifact_definitions_directories = 8;

    // The number of rows to keep in memory during a group by
    // operation. Once this is exceeded we switch to disk mode which
    // is a lot slower. Default 30000
    uint64 max_in_memory_group_by = 9;

    // If these are set we enforce VQL to only have the specified
    // allowed VQL plugins and functions. This is a way to harden the
    // server by removing potentially sensitive functionality to allow
    // only approved VQL plugins to run.
    repeated string allowed_plugins = 10;
    repeated string allowed_functions = 11;
    repeated string allowed_accessors = 12;

    // How long to cache ACL policies (default 60 sec)
    uint64 acl_lru_timeout_sec = 13;

    // Ignore messages from unauthenticated clients for this long -
    // gives them a chance to enrol first (default 10 sec).
    int64 unauthenticated_lru_timeout_sec = 14;

    // The Maximum size of a sparse file that can be expanded. Files
    // larger than this will not be expanded. This protects the server
    // from expanding potentially Tb worth of sparse files when
    // requested.
    uint64 max_sparse_expand_size = 15;

    // Control GUI features
    bool disable_server_events = 26;
    string auth_redirect_template = 27;
    bool disable_quarantine_button = 28;
    string default_theme = 29;

    // Defaults for client communication limits. Decrease those if
    // your clients are behind a proxy that only accepts very small
    // POST messages. If not set we use client defaults.
    uint64 max_rows = 30;
    uint64 max_row_buffer_size = 31;

    // When the server is in lockdown mode the following permissions
    // will be denied (Even for administrators).
    // The default list is:
    // - ARTIFACT_WRITER
    // - SERVER_ARTIFACT_WRITER
    // - EXECVE
    // - SERVER_ADMIN
    // - FILESYSTEM_WRITE
    // - FILESYSTEM_READ
    // - MACHINE_STATE
    repeated string lockdown_denied_permissions = 32;

    // Default expiry of certificant issuances (default 365 days)
    int64 certificate_validity_days = 33;

    // Normally the inventory service attempts to download tools in
    // its own but if this is set, we prevent any external access.
    bool disable_inventory_service_external_access = 34;
}

// Configures crypto preferences
message CryptoConfig {
    // Include these root CA's to verify certificates (in addition to
    // built in CA's). Certs should be concatenated in PEM format.
    string root_certs = 1;

    // Clients may connect to servers which use a self-signed certificate.
    // This list allows to specify a set of certificate thumbprints (SHA256)
    // which are used to validate TLS server certificates.
    //
    // Fingerprints can be generated with the OpenSSL command line utility:
    //   openssl s_client -connect www.google.com:443 < /dev/null | openssl x509 -fingerprint -sha256 -noout
    //
    // Certificate thumbprints may or may not include colon characters. Capitalization
    // of the hex digits is ignored by Velociraptor. A thumbprint of any of the
    // following forms (or combinations thereof) is fine:
    //   E6:E2:8B:35:CE:C5:BA:C4:53:C5:AF:BF:2B:76:34:62:40:5C:D0:60:80:E1:30:1A:A7:A5:A9:DA:0C:8B:11:E1
    //   E6E28B35CEC5BAC453C5AFBF2B763462405CD06080E1301AA7A5A9DA0C8B11E1
    //   e6e28b35cec5bac453c5afbf2b763462405cd06080e1301aa7a5a9da0c8b11e1
    repeated string certificate_thumbprints = 2 [(sem_type) = {
            description: "SHA256 thumbprints of certificates that the client will trust."
        }];

    // Velociraptor supports several ways of verifying TLS certificates. The
    // certificate_verification_mode specifies which of the three modes is applied.
    // Currently, three modes are available:
    //   - PKI (the default): verify TLS certs against public CA lists, the list
    //                        of additional root_certs, and the built-in CA cert
    //   - PKI_OR_THUMBPRINT: the same as PKI with the addition that certificates
    //                        which have a thumbprint that is present in
    //                        certificate_thumbprints will be accepted as well
    //   - THUMBPRINT_ONLY: Velociraptor only accepts certificates which have a
    //                      matching thumbprint in certificate_thumbprints. All
    //                      other certificates will be rejected. This mode is
    //                      also known as certificate pinning.
    string certificate_verification_mode = 3 [(sem_type) = {
            description: "Selects the way in which Velociraptor verifies TLS certificates. Allowed values: PKI (the default), PKI_OR_THUMBPRINT, THUMBPRINT_ONLY"
        }];
}

message MountPoint {
    string accessor = 1;
    string prefix = 2;
    string path_type = 3;
}

message RemappingConfig {
    // Operation: Currently mount, identify
    string type = 1;

    // Human readable description of what this mapping rule should
    // produce.
    string description = 10;

    // For mount options
    MountPoint from = 2;
    MountPoint on = 3;

    // For type=permissions - permissions come from acls/acls.go
    repeated string permissions = 4;

    // For type=impersonation - can be windows, linux, darwin
    string os = 5;
    string hostname = 6;

    // Variables to be added to environment strings.
    repeated VQLEnv env = 7;

    // Disable these plugins and functions (usually for OS specific
    // things that make no sense on an image).
    repeated string disabled_functions = 8;
    repeated string disabled_plugins = 9;
}

message Config {
    string autocert_domain = 21 [deprecated=true];

    Version version = 8 [(sem_type) = {
            description: "Version information."
        }];

    ClientConfig Client = 1 [(sem_type) = {
            description: "Client configuration."
        }];

    APIConfig API = 2 [(sem_type) = {
            description: "Configuration for gRPC API endpoint."
        }];

    GUIConfig GUI = 3;

    CAConfig CA = 4;

    FrontendConfig Frontend = 5;

    // A list of possible frontends to use. When deployed in
    // multi-frontend configuration we select on those and populate
    // the Frontend field above.
    repeated FrontendConfig ExtraFrontends = 31;

    DatastoreConfig Datastore = 6;

    // Deprecated - Should not appear in new configs and will be
    // ignored. It is only here for backwards compatibility.
    Writeback Writeback = 9 [deprecated=true];

    // Deprecated - Mail plugin setting are now provided by args.
    MailConfig Mail = 11;

    LoggingConfig Logging = 23;

    bool verbose = 20 [(sem_type) = {
            description: "Enable verbose logging output.",
        }];


    string autocert_cert_cache = 22 [(sem_type) = {
            description: "Path to store autocert certificates.",
        }];

    MonitoringConfig Monitoring = 25 [(sem_type) = {
            description: "Where to bind prometheus monitoring endpoint.",
        }];

    ApiClientConfig api_config = 26 [(sem_type) = {
            description: "If we loaded the api config we load this into the global config.",
        }];

    AutoExecConfig autoexec = 28 [(sem_type) = {
           description: "If this is specified we launch the binary with the given command "
           "line automatically."
        }];

    string server_type = 30 [(sem_type) = {
            description: "Type of server (linux, windows, darwin)"
        }];

    // If set we obfuscate VQL to the clients using this key.
    string obfuscation_nonce = 32;

    // Various defaults can be changed here (usually not needed).
    Defaults defaults = 33;

    // The Operating System of the analysis target. Only useful in conjunction
    // with the `device' parameter in case the host's operating system differs
    // from the operating system used on the device. DEPRECATED!
    string analysis_target = 34;

    // The list of data sources which Velociraptor should map instead of the
    // host's own file system.
    repeated RemappingConfig remappings = 35;

    // These should **not** be set by the user - they are tags
    // internally that mark each org's config object. They should
    // definitely not be set on the client's config because the client
    // does not know or use its own org id.
    string org_id = 36;
    string org_name = 37;


    // The services that will run at initialization. Note this is not
    // set in the config file by the user but is propagated from the
    // startup code.
    ServerServicesConfig services = 38;

    // The Velociraptor server may be placed into "lockdown"
    // mode. While in lockdown mode certain permissions are denied -
    // even for administrators. This additional protection mode helps
    // to mitigate the case when a Velociraptor administrator's
    // account is compromised. The server can be taken out of lockdown
    // mode by setting lockdown to false and restarting the server.
    bool lockdown = 39;
}
