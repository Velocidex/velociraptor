// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	proto1 "www.velocidex.com/golang/velociraptor/actions/proto"
	proto2 "www.velocidex.com/golang/velociraptor/artifacts/proto"
	_ "www.velocidex.com/golang/velociraptor/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Information about Velociraptor. This is a psuedo config item - it
// will never be read from config files, but can be used in VQL
// queries. It will be written to config files as metadata about the
// version read from.
type Version struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Commit               string   `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	BuildTime            string   `protobuf:"bytes,5,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
}

func (m *Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version.Unmarshal(m, b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version.Marshal(b, m, deterministic)
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return xxx_messageInfo_Version.Size(m)
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Version) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Version) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Version) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Version) GetBuildTime() string {
	if m != nil {
		return m.BuildTime
	}
	return ""
}

// The client's state which are persisted in the writeback file.
type Writeback struct {
	PrivateKey             string                `protobuf:"bytes,7,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	HuntLastTimestamp      uint64                `protobuf:"varint,13,opt,name=hunt_last_timestamp,json=huntLastTimestamp,proto3" json:"hunt_last_timestamp,omitempty"`
	LastServerSerialNumber uint64                `protobuf:"varint,14,opt,name=last_server_serial_number,json=lastServerSerialNumber,proto3" json:"last_server_serial_number,omitempty"`
	EventQueries           *proto1.VQLEventTable `protobuf:"bytes,1,opt,name=event_queries,json=eventQueries,proto3" json:"event_queries,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *Writeback) Reset()         { *m = Writeback{} }
func (m *Writeback) String() string { return proto.CompactTextString(m) }
func (*Writeback) ProtoMessage()    {}
func (*Writeback) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{1}
}

func (m *Writeback) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Writeback.Unmarshal(m, b)
}
func (m *Writeback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Writeback.Marshal(b, m, deterministic)
}
func (m *Writeback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Writeback.Merge(m, src)
}
func (m *Writeback) XXX_Size() int {
	return xxx_messageInfo_Writeback.Size(m)
}
func (m *Writeback) XXX_DiscardUnknown() {
	xxx_messageInfo_Writeback.DiscardUnknown(m)
}

var xxx_messageInfo_Writeback proto.InternalMessageInfo

func (m *Writeback) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *Writeback) GetHuntLastTimestamp() uint64 {
	if m != nil {
		return m.HuntLastTimestamp
	}
	return 0
}

func (m *Writeback) GetLastServerSerialNumber() uint64 {
	if m != nil {
		return m.LastServerSerialNumber
	}
	return 0
}

func (m *Writeback) GetEventQueries() *proto1.VQLEventTable {
	if m != nil {
		return m.EventQueries
	}
	return nil
}

// Configuration for the windows installer.
type WindowsInstallerConfig struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	InstallPath          string   `protobuf:"bytes,2,opt,name=install_path,json=installPath,proto3" json:"install_path,omitempty"`
	ServiceDescription   string   `protobuf:"bytes,3,opt,name=service_description,json=serviceDescription,proto3" json:"service_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WindowsInstallerConfig) Reset()         { *m = WindowsInstallerConfig{} }
func (m *WindowsInstallerConfig) String() string { return proto.CompactTextString(m) }
func (*WindowsInstallerConfig) ProtoMessage()    {}
func (*WindowsInstallerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{2}
}

func (m *WindowsInstallerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WindowsInstallerConfig.Unmarshal(m, b)
}
func (m *WindowsInstallerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WindowsInstallerConfig.Marshal(b, m, deterministic)
}
func (m *WindowsInstallerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowsInstallerConfig.Merge(m, src)
}
func (m *WindowsInstallerConfig) XXX_Size() int {
	return xxx_messageInfo_WindowsInstallerConfig.Size(m)
}
func (m *WindowsInstallerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowsInstallerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WindowsInstallerConfig proto.InternalMessageInfo

func (m *WindowsInstallerConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *WindowsInstallerConfig) GetInstallPath() string {
	if m != nil {
		return m.InstallPath
	}
	return ""
}

func (m *WindowsInstallerConfig) GetServiceDescription() string {
	if m != nil {
		return m.ServiceDescription
	}
	return ""
}

type DarwinInstallerConfig struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	InstallPath          string   `protobuf:"bytes,2,opt,name=install_path,json=installPath,proto3" json:"install_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DarwinInstallerConfig) Reset()         { *m = DarwinInstallerConfig{} }
func (m *DarwinInstallerConfig) String() string { return proto.CompactTextString(m) }
func (*DarwinInstallerConfig) ProtoMessage()    {}
func (*DarwinInstallerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{3}
}

func (m *DarwinInstallerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DarwinInstallerConfig.Unmarshal(m, b)
}
func (m *DarwinInstallerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DarwinInstallerConfig.Marshal(b, m, deterministic)
}
func (m *DarwinInstallerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DarwinInstallerConfig.Merge(m, src)
}
func (m *DarwinInstallerConfig) XXX_Size() int {
	return xxx_messageInfo_DarwinInstallerConfig.Size(m)
}
func (m *DarwinInstallerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DarwinInstallerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DarwinInstallerConfig proto.InternalMessageInfo

func (m *DarwinInstallerConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *DarwinInstallerConfig) GetInstallPath() string {
	if m != nil {
		return m.InstallPath
	}
	return ""
}

type RingBufferConfig struct {
	MemorySize uint64 `protobuf:"varint,1,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	DiskSize   uint64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Deprecated
	Filename             string   `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	FilenameLinux        string   `protobuf:"bytes,4,opt,name=filename_linux,json=filenameLinux,proto3" json:"filename_linux,omitempty"`
	FilenameWindows      string   `protobuf:"bytes,5,opt,name=filename_windows,json=filenameWindows,proto3" json:"filename_windows,omitempty"`
	FilenameDarwin       string   `protobuf:"bytes,6,opt,name=filename_darwin,json=filenameDarwin,proto3" json:"filename_darwin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RingBufferConfig) Reset()         { *m = RingBufferConfig{} }
func (m *RingBufferConfig) String() string { return proto.CompactTextString(m) }
func (*RingBufferConfig) ProtoMessage()    {}
func (*RingBufferConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{4}
}

func (m *RingBufferConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RingBufferConfig.Unmarshal(m, b)
}
func (m *RingBufferConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RingBufferConfig.Marshal(b, m, deterministic)
}
func (m *RingBufferConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RingBufferConfig.Merge(m, src)
}
func (m *RingBufferConfig) XXX_Size() int {
	return xxx_messageInfo_RingBufferConfig.Size(m)
}
func (m *RingBufferConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RingBufferConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RingBufferConfig proto.InternalMessageInfo

func (m *RingBufferConfig) GetMemorySize() uint64 {
	if m != nil {
		return m.MemorySize
	}
	return 0
}

func (m *RingBufferConfig) GetDiskSize() uint64 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *RingBufferConfig) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *RingBufferConfig) GetFilenameLinux() string {
	if m != nil {
		return m.FilenameLinux
	}
	return ""
}

func (m *RingBufferConfig) GetFilenameWindows() string {
	if m != nil {
		return m.FilenameWindows
	}
	return ""
}

func (m *RingBufferConfig) GetFilenameDarwin() string {
	if m != nil {
		return m.FilenameDarwin
	}
	return ""
}

type ClientConfig struct {
	Labels               []string                `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	ServerUrls           []string                `protobuf:"bytes,8,rep,name=server_urls,json=serverUrls,proto3" json:"server_urls,omitempty"`
	CaCertificate        string                  `protobuf:"bytes,11,opt,name=ca_certificate,json=caCertificate,proto3" json:"ca_certificate,omitempty"`
	Nonce                string                  `protobuf:"bytes,12,opt,name=nonce,proto3" json:"nonce,omitempty"`
	WritebackDarwin      string                  `protobuf:"bytes,20,opt,name=writeback_darwin,json=writebackDarwin,proto3" json:"writeback_darwin,omitempty"`
	WritebackLinux       string                  `protobuf:"bytes,9,opt,name=writeback_linux,json=writebackLinux,proto3" json:"writeback_linux,omitempty"`
	WritebackWindows     string                  `protobuf:"bytes,10,opt,name=writeback_windows,json=writebackWindows,proto3" json:"writeback_windows,omitempty"`
	MaxPoll              uint64                  `protobuf:"varint,15,opt,name=max_poll,json=maxPoll,proto3" json:"max_poll,omitempty"`
	MaxPollStd           uint64                  `protobuf:"varint,27,opt,name=max_poll_std,json=maxPollStd,proto3" json:"max_poll_std,omitempty"`
	WindowsInstaller     *WindowsInstallerConfig `protobuf:"bytes,16,opt,name=windows_installer,json=windowsInstaller,proto3" json:"windows_installer,omitempty"`
	DarwinInstaller      *DarwinInstallerConfig  `protobuf:"bytes,21,opt,name=darwin_installer,json=darwinInstaller,proto3" json:"darwin_installer,omitempty"`
	PreventExecve        bool                    `protobuf:"varint,17,opt,name=prevent_execve,json=preventExecve,proto3" json:"prevent_execve,omitempty"`
	Version              *Version                `protobuf:"bytes,18,opt,name=version,proto3" json:"version,omitempty"`
	DefaultMaxWait       uint64                  `protobuf:"varint,19,opt,name=default_max_wait,json=defaultMaxWait,proto3" json:"default_max_wait,omitempty"`
	UseSelfSignedSsl     bool                    `protobuf:"varint,24,opt,name=use_self_signed_ssl,json=useSelfSignedSsl,proto3" json:"use_self_signed_ssl,omitempty"`
	PinnedServerName     string                  `protobuf:"bytes,28,opt,name=pinned_server_name,json=pinnedServerName,proto3" json:"pinned_server_name,omitempty"`
	MaxUploadSize        uint64                  `protobuf:"varint,25,opt,name=max_upload_size,json=maxUploadSize,proto3" json:"max_upload_size,omitempty"`
	LocalBuffer          *RingBufferConfig       `protobuf:"bytes,26,opt,name=local_buffer,json=localBuffer,proto3" json:"local_buffer,omitempty"`
	MaxMemoryHardLimit   uint64                  `protobuf:"varint,29,opt,name=max_memory_hard_limit,json=maxMemoryHardLimit,proto3" json:"max_memory_hard_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ClientConfig) Reset()         { *m = ClientConfig{} }
func (m *ClientConfig) String() string { return proto.CompactTextString(m) }
func (*ClientConfig) ProtoMessage()    {}
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{5}
}

func (m *ClientConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientConfig.Unmarshal(m, b)
}
func (m *ClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientConfig.Marshal(b, m, deterministic)
}
func (m *ClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConfig.Merge(m, src)
}
func (m *ClientConfig) XXX_Size() int {
	return xxx_messageInfo_ClientConfig.Size(m)
}
func (m *ClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConfig proto.InternalMessageInfo

func (m *ClientConfig) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ClientConfig) GetServerUrls() []string {
	if m != nil {
		return m.ServerUrls
	}
	return nil
}

func (m *ClientConfig) GetCaCertificate() string {
	if m != nil {
		return m.CaCertificate
	}
	return ""
}

func (m *ClientConfig) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *ClientConfig) GetWritebackDarwin() string {
	if m != nil {
		return m.WritebackDarwin
	}
	return ""
}

func (m *ClientConfig) GetWritebackLinux() string {
	if m != nil {
		return m.WritebackLinux
	}
	return ""
}

func (m *ClientConfig) GetWritebackWindows() string {
	if m != nil {
		return m.WritebackWindows
	}
	return ""
}

func (m *ClientConfig) GetMaxPoll() uint64 {
	if m != nil {
		return m.MaxPoll
	}
	return 0
}

func (m *ClientConfig) GetMaxPollStd() uint64 {
	if m != nil {
		return m.MaxPollStd
	}
	return 0
}

func (m *ClientConfig) GetWindowsInstaller() *WindowsInstallerConfig {
	if m != nil {
		return m.WindowsInstaller
	}
	return nil
}

func (m *ClientConfig) GetDarwinInstaller() *DarwinInstallerConfig {
	if m != nil {
		return m.DarwinInstaller
	}
	return nil
}

func (m *ClientConfig) GetPreventExecve() bool {
	if m != nil {
		return m.PreventExecve
	}
	return false
}

func (m *ClientConfig) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ClientConfig) GetDefaultMaxWait() uint64 {
	if m != nil {
		return m.DefaultMaxWait
	}
	return 0
}

func (m *ClientConfig) GetUseSelfSignedSsl() bool {
	if m != nil {
		return m.UseSelfSignedSsl
	}
	return false
}

func (m *ClientConfig) GetPinnedServerName() string {
	if m != nil {
		return m.PinnedServerName
	}
	return ""
}

func (m *ClientConfig) GetMaxUploadSize() uint64 {
	if m != nil {
		return m.MaxUploadSize
	}
	return 0
}

func (m *ClientConfig) GetLocalBuffer() *RingBufferConfig {
	if m != nil {
		return m.LocalBuffer
	}
	return nil
}

func (m *ClientConfig) GetMaxMemoryHardLimit() uint64 {
	if m != nil {
		return m.MaxMemoryHardLimit
	}
	return 0
}

type APIConfig struct {
	BindAddress          string   `protobuf:"bytes,1,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	BindPort             uint32   `protobuf:"varint,2,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	BindScheme           string   `protobuf:"bytes,3,opt,name=bind_scheme,json=bindScheme,proto3" json:"bind_scheme,omitempty"`
	PinnedGwName         string   `protobuf:"bytes,4,opt,name=pinned_gw_name,json=pinnedGwName,proto3" json:"pinned_gw_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIConfig) Reset()         { *m = APIConfig{} }
func (m *APIConfig) String() string { return proto.CompactTextString(m) }
func (*APIConfig) ProtoMessage()    {}
func (*APIConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{6}
}

func (m *APIConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_APIConfig.Unmarshal(m, b)
}
func (m *APIConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_APIConfig.Marshal(b, m, deterministic)
}
func (m *APIConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIConfig.Merge(m, src)
}
func (m *APIConfig) XXX_Size() int {
	return xxx_messageInfo_APIConfig.Size(m)
}
func (m *APIConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_APIConfig.DiscardUnknown(m)
}

var xxx_messageInfo_APIConfig proto.InternalMessageInfo

func (m *APIConfig) GetBindAddress() string {
	if m != nil {
		return m.BindAddress
	}
	return ""
}

func (m *APIConfig) GetBindPort() uint32 {
	if m != nil {
		return m.BindPort
	}
	return 0
}

func (m *APIConfig) GetBindScheme() string {
	if m != nil {
		return m.BindScheme
	}
	return ""
}

func (m *APIConfig) GetPinnedGwName() string {
	if m != nil {
		return m.PinnedGwName
	}
	return ""
}

// Configuration to be consumed by api clients.
type ApiClientConfig struct {
	CaCertificate        string   `protobuf:"bytes,1,opt,name=ca_certificate,json=caCertificate,proto3" json:"ca_certificate,omitempty"`
	ClientCert           string   `protobuf:"bytes,2,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	ClientPrivateKey     string   `protobuf:"bytes,3,opt,name=client_private_key,json=clientPrivateKey,proto3" json:"client_private_key,omitempty"`
	ApiConnectionString  string   `protobuf:"bytes,4,opt,name=api_connection_string,json=apiConnectionString,proto3" json:"api_connection_string,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiClientConfig) Reset()         { *m = ApiClientConfig{} }
func (m *ApiClientConfig) String() string { return proto.CompactTextString(m) }
func (*ApiClientConfig) ProtoMessage()    {}
func (*ApiClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{7}
}

func (m *ApiClientConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApiClientConfig.Unmarshal(m, b)
}
func (m *ApiClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApiClientConfig.Marshal(b, m, deterministic)
}
func (m *ApiClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiClientConfig.Merge(m, src)
}
func (m *ApiClientConfig) XXX_Size() int {
	return xxx_messageInfo_ApiClientConfig.Size(m)
}
func (m *ApiClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ApiClientConfig proto.InternalMessageInfo

func (m *ApiClientConfig) GetCaCertificate() string {
	if m != nil {
		return m.CaCertificate
	}
	return ""
}

func (m *ApiClientConfig) GetClientCert() string {
	if m != nil {
		return m.ClientCert
	}
	return ""
}

func (m *ApiClientConfig) GetClientPrivateKey() string {
	if m != nil {
		return m.ClientPrivateKey
	}
	return ""
}

func (m *ApiClientConfig) GetApiConnectionString() string {
	if m != nil {
		return m.ApiConnectionString
	}
	return ""
}

func (m *ApiClientConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GUILink struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GUILink) Reset()         { *m = GUILink{} }
func (m *GUILink) String() string { return proto.CompactTextString(m) }
func (*GUILink) ProtoMessage()    {}
func (*GUILink) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{8}
}

func (m *GUILink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GUILink.Unmarshal(m, b)
}
func (m *GUILink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GUILink.Marshal(b, m, deterministic)
}
func (m *GUILink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GUILink.Merge(m, src)
}
func (m *GUILink) XXX_Size() int {
	return xxx_messageInfo_GUILink.Size(m)
}
func (m *GUILink) XXX_DiscardUnknown() {
	xxx_messageInfo_GUILink.DiscardUnknown(m)
}

var xxx_messageInfo_GUILink proto.InternalMessageInfo

func (m *GUILink) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *GUILink) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type GUIConfig struct {
	BindAddress             string                `protobuf:"bytes,1,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	BindPort                uint32                `protobuf:"varint,2,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	GwCertificate           string                `protobuf:"bytes,10,opt,name=gw_certificate,json=gwCertificate,proto3" json:"gw_certificate,omitempty"`
	GwPrivateKey            string                `protobuf:"bytes,11,opt,name=gw_private_key,json=gwPrivateKey,proto3" json:"gw_private_key,omitempty"`
	InternalCidr            []string              `protobuf:"bytes,3,rep,name=internal_cidr,json=internalCidr,proto3" json:"internal_cidr,omitempty"`
	VpnCidr                 []string              `protobuf:"bytes,4,rep,name=vpn_cidr,json=vpnCidr,proto3" json:"vpn_cidr,omitempty"`
	GoogleOauthClientId     string                `protobuf:"bytes,5,opt,name=google_oauth_client_id,json=googleOauthClientId,proto3" json:"google_oauth_client_id,omitempty"`
	GoogleOauthClientSecret string                `protobuf:"bytes,6,opt,name=google_oauth_client_secret,json=googleOauthClientSecret,proto3" json:"google_oauth_client_secret,omitempty"`
	PublicUrl               string                `protobuf:"bytes,7,opt,name=public_url,json=publicUrl,proto3" json:"public_url,omitempty"`
	ReverseProxy            []*ReverseProxyConfig `protobuf:"bytes,8,rep,name=reverse_proxy,json=reverseProxy,proto3" json:"reverse_proxy,omitempty"`
	Links                   []*GUILink            `protobuf:"bytes,9,rep,name=links,proto3" json:"links,omitempty"`
	SamlCertificate         string                `protobuf:"bytes,12,opt,name=saml_certificate,json=samlCertificate,proto3" json:"saml_certificate,omitempty"`
	SamlPrivateKey          string                `protobuf:"bytes,13,opt,name=saml_private_key,json=samlPrivateKey,proto3" json:"saml_private_key,omitempty"`
	SamlIdpMetadataUrl      string                `protobuf:"bytes,14,opt,name=saml_idp_metadata_url,json=samlIdpMetadataUrl,proto3" json:"saml_idp_metadata_url,omitempty"`
	SamlRootUrl             string                `protobuf:"bytes,15,opt,name=saml_root_url,json=samlRootUrl,proto3" json:"saml_root_url,omitempty"`
	SamlUserAttribute       string                `protobuf:"bytes,16,opt,name=saml_user_attribute,json=samlUserAttribute,proto3" json:"saml_user_attribute,omitempty"`
	// These users are created if they do no already exist in the data
	// store.
	InitialUsers         []*GUIUser `protobuf:"bytes,17,rep,name=initial_users,json=initialUsers,proto3" json:"initial_users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GUIConfig) Reset()         { *m = GUIConfig{} }
func (m *GUIConfig) String() string { return proto.CompactTextString(m) }
func (*GUIConfig) ProtoMessage()    {}
func (*GUIConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{9}
}

func (m *GUIConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GUIConfig.Unmarshal(m, b)
}
func (m *GUIConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GUIConfig.Marshal(b, m, deterministic)
}
func (m *GUIConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GUIConfig.Merge(m, src)
}
func (m *GUIConfig) XXX_Size() int {
	return xxx_messageInfo_GUIConfig.Size(m)
}
func (m *GUIConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GUIConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GUIConfig proto.InternalMessageInfo

func (m *GUIConfig) GetBindAddress() string {
	if m != nil {
		return m.BindAddress
	}
	return ""
}

func (m *GUIConfig) GetBindPort() uint32 {
	if m != nil {
		return m.BindPort
	}
	return 0
}

func (m *GUIConfig) GetGwCertificate() string {
	if m != nil {
		return m.GwCertificate
	}
	return ""
}

func (m *GUIConfig) GetGwPrivateKey() string {
	if m != nil {
		return m.GwPrivateKey
	}
	return ""
}

func (m *GUIConfig) GetInternalCidr() []string {
	if m != nil {
		return m.InternalCidr
	}
	return nil
}

func (m *GUIConfig) GetVpnCidr() []string {
	if m != nil {
		return m.VpnCidr
	}
	return nil
}

func (m *GUIConfig) GetGoogleOauthClientId() string {
	if m != nil {
		return m.GoogleOauthClientId
	}
	return ""
}

func (m *GUIConfig) GetGoogleOauthClientSecret() string {
	if m != nil {
		return m.GoogleOauthClientSecret
	}
	return ""
}

func (m *GUIConfig) GetPublicUrl() string {
	if m != nil {
		return m.PublicUrl
	}
	return ""
}

func (m *GUIConfig) GetReverseProxy() []*ReverseProxyConfig {
	if m != nil {
		return m.ReverseProxy
	}
	return nil
}

func (m *GUIConfig) GetLinks() []*GUILink {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *GUIConfig) GetSamlCertificate() string {
	if m != nil {
		return m.SamlCertificate
	}
	return ""
}

func (m *GUIConfig) GetSamlPrivateKey() string {
	if m != nil {
		return m.SamlPrivateKey
	}
	return ""
}

func (m *GUIConfig) GetSamlIdpMetadataUrl() string {
	if m != nil {
		return m.SamlIdpMetadataUrl
	}
	return ""
}

func (m *GUIConfig) GetSamlRootUrl() string {
	if m != nil {
		return m.SamlRootUrl
	}
	return ""
}

func (m *GUIConfig) GetSamlUserAttribute() string {
	if m != nil {
		return m.SamlUserAttribute
	}
	return ""
}

func (m *GUIConfig) GetInitialUsers() []*GUIUser {
	if m != nil {
		return m.InitialUsers
	}
	return nil
}

type GUIUser struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PasswordHash         string   `protobuf:"bytes,2,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	PasswordSalt         string   `protobuf:"bytes,3,opt,name=password_salt,json=passwordSalt,proto3" json:"password_salt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GUIUser) Reset()         { *m = GUIUser{} }
func (m *GUIUser) String() string { return proto.CompactTextString(m) }
func (*GUIUser) ProtoMessage()    {}
func (*GUIUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{10}
}

func (m *GUIUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GUIUser.Unmarshal(m, b)
}
func (m *GUIUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GUIUser.Marshal(b, m, deterministic)
}
func (m *GUIUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GUIUser.Merge(m, src)
}
func (m *GUIUser) XXX_Size() int {
	return xxx_messageInfo_GUIUser.Size(m)
}
func (m *GUIUser) XXX_DiscardUnknown() {
	xxx_messageInfo_GUIUser.DiscardUnknown(m)
}

var xxx_messageInfo_GUIUser proto.InternalMessageInfo

func (m *GUIUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GUIUser) GetPasswordHash() string {
	if m != nil {
		return m.PasswordHash
	}
	return ""
}

func (m *GUIUser) GetPasswordSalt() string {
	if m != nil {
		return m.PasswordSalt
	}
	return ""
}

type CAConfig struct {
	PrivateKey           string   `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAConfig) Reset()         { *m = CAConfig{} }
func (m *CAConfig) String() string { return proto.CompactTextString(m) }
func (*CAConfig) ProtoMessage()    {}
func (*CAConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{11}
}

func (m *CAConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAConfig.Unmarshal(m, b)
}
func (m *CAConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAConfig.Marshal(b, m, deterministic)
}
func (m *CAConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAConfig.Merge(m, src)
}
func (m *CAConfig) XXX_Size() int {
	return xxx_messageInfo_CAConfig.Size(m)
}
func (m *CAConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CAConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CAConfig proto.InternalMessageInfo

func (m *CAConfig) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

type ReverseProxyConfig struct {
	Route                string   `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	RequireAuth          bool     `protobuf:"varint,3,opt,name=require_auth,json=requireAuth,proto3" json:"require_auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseProxyConfig) Reset()         { *m = ReverseProxyConfig{} }
func (m *ReverseProxyConfig) String() string { return proto.CompactTextString(m) }
func (*ReverseProxyConfig) ProtoMessage()    {}
func (*ReverseProxyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{12}
}

func (m *ReverseProxyConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseProxyConfig.Unmarshal(m, b)
}
func (m *ReverseProxyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseProxyConfig.Marshal(b, m, deterministic)
}
func (m *ReverseProxyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseProxyConfig.Merge(m, src)
}
func (m *ReverseProxyConfig) XXX_Size() int {
	return xxx_messageInfo_ReverseProxyConfig.Size(m)
}
func (m *ReverseProxyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseProxyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseProxyConfig proto.InternalMessageInfo

func (m *ReverseProxyConfig) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *ReverseProxyConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ReverseProxyConfig) GetRequireAuth() bool {
	if m != nil {
		return m.RequireAuth
	}
	return false
}

type DynDNSConfig struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	DdnsUsername         string   `protobuf:"bytes,2,opt,name=ddns_username,json=ddnsUsername,proto3" json:"ddns_username,omitempty"`
	DdnsPassword         string   `protobuf:"bytes,3,opt,name=ddns_password,json=ddnsPassword,proto3" json:"ddns_password,omitempty"`
	UpdateUrl            string   `protobuf:"bytes,4,opt,name=update_url,json=updateUrl,proto3" json:"update_url,omitempty"`
	Frequency            uint64   `protobuf:"varint,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynDNSConfig) Reset()         { *m = DynDNSConfig{} }
func (m *DynDNSConfig) String() string { return proto.CompactTextString(m) }
func (*DynDNSConfig) ProtoMessage()    {}
func (*DynDNSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{13}
}

func (m *DynDNSConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DynDNSConfig.Unmarshal(m, b)
}
func (m *DynDNSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DynDNSConfig.Marshal(b, m, deterministic)
}
func (m *DynDNSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynDNSConfig.Merge(m, src)
}
func (m *DynDNSConfig) XXX_Size() int {
	return xxx_messageInfo_DynDNSConfig.Size(m)
}
func (m *DynDNSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DynDNSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DynDNSConfig proto.InternalMessageInfo

func (m *DynDNSConfig) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DynDNSConfig) GetDdnsUsername() string {
	if m != nil {
		return m.DdnsUsername
	}
	return ""
}

func (m *DynDNSConfig) GetDdnsPassword() string {
	if m != nil {
		return m.DdnsPassword
	}
	return ""
}

func (m *DynDNSConfig) GetUpdateUrl() string {
	if m != nil {
		return m.UpdateUrl
	}
	return ""
}

func (m *DynDNSConfig) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type FrontendConfig struct {
	BindAddress                      string        `protobuf:"bytes,1,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	BindPort                         uint32        `protobuf:"varint,2,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	Certificate                      string        `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	PrivateKey                       string        `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	DnsName                          string        `protobuf:"bytes,6,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	ArtifactsPath                    string        `protobuf:"bytes,7,opt,name=artifacts_path,json=artifactsPath,proto3" json:"artifacts_path,omitempty"`
	PublicPath                       string        `protobuf:"bytes,8,opt,name=public_path,json=publicPath,proto3" json:"public_path,omitempty"`
	Concurrency                      uint64        `protobuf:"varint,9,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	DoNotCompressArtifacts           bool          `protobuf:"varint,10,opt,name=do_not_compress_artifacts,json=doNotCompressArtifacts,proto3" json:"do_not_compress_artifacts,omitempty"`
	MaxUploadSize                    uint64        `protobuf:"varint,11,opt,name=max_upload_size,json=maxUploadSize,proto3" json:"max_upload_size,omitempty"`
	DynDns                           *DynDNSConfig `protobuf:"bytes,12,opt,name=dyn_dns,json=dynDns,proto3" json:"dyn_dns,omitempty"`
	ProxyHeader                      string        `protobuf:"bytes,13,opt,name=proxy_header,json=proxyHeader,proto3" json:"proxy_header,omitempty"`
	DefaultClientMonitoringArtifacts []string      `protobuf:"bytes,14,rep,name=default_client_monitoring_artifacts,json=defaultClientMonitoringArtifacts,proto3" json:"default_client_monitoring_artifacts,omitempty"`
	RunAsUser                        string        `protobuf:"bytes,16,opt,name=run_as_user,json=runAsUser,proto3" json:"run_as_user,omitempty"`
	// Various performoance related tweaks.
	ExpectedClients      int64    `protobuf:"varint,15,opt,name=expected_clients,json=expectedClients,proto3" json:"expected_clients,omitempty"`
	GRPCPoolMaxSize      int64    `protobuf:"varint,17,opt,name=GRPC_pool_max_size,json=GRPCPoolMaxSize,proto3" json:"GRPC_pool_max_size,omitempty"`
	GRPCPoolMaxWait      int64    `protobuf:"varint,18,opt,name=GRPC_pool_max_wait,json=GRPCPoolMaxWait,proto3" json:"GRPC_pool_max_wait,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontendConfig) Reset()         { *m = FrontendConfig{} }
func (m *FrontendConfig) String() string { return proto.CompactTextString(m) }
func (*FrontendConfig) ProtoMessage()    {}
func (*FrontendConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{14}
}

func (m *FrontendConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrontendConfig.Unmarshal(m, b)
}
func (m *FrontendConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrontendConfig.Marshal(b, m, deterministic)
}
func (m *FrontendConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontendConfig.Merge(m, src)
}
func (m *FrontendConfig) XXX_Size() int {
	return xxx_messageInfo_FrontendConfig.Size(m)
}
func (m *FrontendConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontendConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FrontendConfig proto.InternalMessageInfo

func (m *FrontendConfig) GetBindAddress() string {
	if m != nil {
		return m.BindAddress
	}
	return ""
}

func (m *FrontendConfig) GetBindPort() uint32 {
	if m != nil {
		return m.BindPort
	}
	return 0
}

func (m *FrontendConfig) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *FrontendConfig) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *FrontendConfig) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

func (m *FrontendConfig) GetArtifactsPath() string {
	if m != nil {
		return m.ArtifactsPath
	}
	return ""
}

func (m *FrontendConfig) GetPublicPath() string {
	if m != nil {
		return m.PublicPath
	}
	return ""
}

func (m *FrontendConfig) GetConcurrency() uint64 {
	if m != nil {
		return m.Concurrency
	}
	return 0
}

func (m *FrontendConfig) GetDoNotCompressArtifacts() bool {
	if m != nil {
		return m.DoNotCompressArtifacts
	}
	return false
}

func (m *FrontendConfig) GetMaxUploadSize() uint64 {
	if m != nil {
		return m.MaxUploadSize
	}
	return 0
}

func (m *FrontendConfig) GetDynDns() *DynDNSConfig {
	if m != nil {
		return m.DynDns
	}
	return nil
}

func (m *FrontendConfig) GetProxyHeader() string {
	if m != nil {
		return m.ProxyHeader
	}
	return ""
}

func (m *FrontendConfig) GetDefaultClientMonitoringArtifacts() []string {
	if m != nil {
		return m.DefaultClientMonitoringArtifacts
	}
	return nil
}

func (m *FrontendConfig) GetRunAsUser() string {
	if m != nil {
		return m.RunAsUser
	}
	return ""
}

func (m *FrontendConfig) GetExpectedClients() int64 {
	if m != nil {
		return m.ExpectedClients
	}
	return 0
}

func (m *FrontendConfig) GetGRPCPoolMaxSize() int64 {
	if m != nil {
		return m.GRPCPoolMaxSize
	}
	return 0
}

func (m *FrontendConfig) GetGRPCPoolMaxWait() int64 {
	if m != nil {
		return m.GRPCPoolMaxWait
	}
	return 0
}

type DatastoreConfig struct {
	Implementation     string `protobuf:"bytes,1,opt,name=implementation,proto3" json:"implementation,omitempty"`
	Location           string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	FilestoreDirectory string `protobuf:"bytes,3,opt,name=filestore_directory,json=filestoreDirectory,proto3" json:"filestore_directory,omitempty"`
	// For MySQL data store (Valid when implementation = "MySQL")
	MysqlUsername string `protobuf:"bytes,4,opt,name=mysql_username,json=mysqlUsername,proto3" json:"mysql_username,omitempty"`
	MysqlPassword string `protobuf:"bytes,5,opt,name=mysql_password,json=mysqlPassword,proto3" json:"mysql_password,omitempty"`
	MysqlDatabase string `protobuf:"bytes,6,opt,name=mysql_database,json=mysqlDatabase,proto3" json:"mysql_database,omitempty"`
	MysqlServer   string `protobuf:"bytes,7,opt,name=mysql_server,json=mysqlServer,proto3" json:"mysql_server,omitempty"`
	// Alternatively if this is set we just use this instead of the
	// above settings.
	MysqlConnectionString string   `protobuf:"bytes,8,opt,name=mysql_connection_string,json=mysqlConnectionString,proto3" json:"mysql_connection_string,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DatastoreConfig) Reset()         { *m = DatastoreConfig{} }
func (m *DatastoreConfig) String() string { return proto.CompactTextString(m) }
func (*DatastoreConfig) ProtoMessage()    {}
func (*DatastoreConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{15}
}

func (m *DatastoreConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatastoreConfig.Unmarshal(m, b)
}
func (m *DatastoreConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatastoreConfig.Marshal(b, m, deterministic)
}
func (m *DatastoreConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatastoreConfig.Merge(m, src)
}
func (m *DatastoreConfig) XXX_Size() int {
	return xxx_messageInfo_DatastoreConfig.Size(m)
}
func (m *DatastoreConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DatastoreConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DatastoreConfig proto.InternalMessageInfo

func (m *DatastoreConfig) GetImplementation() string {
	if m != nil {
		return m.Implementation
	}
	return ""
}

func (m *DatastoreConfig) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *DatastoreConfig) GetFilestoreDirectory() string {
	if m != nil {
		return m.FilestoreDirectory
	}
	return ""
}

func (m *DatastoreConfig) GetMysqlUsername() string {
	if m != nil {
		return m.MysqlUsername
	}
	return ""
}

func (m *DatastoreConfig) GetMysqlPassword() string {
	if m != nil {
		return m.MysqlPassword
	}
	return ""
}

func (m *DatastoreConfig) GetMysqlDatabase() string {
	if m != nil {
		return m.MysqlDatabase
	}
	return ""
}

func (m *DatastoreConfig) GetMysqlServer() string {
	if m != nil {
		return m.MysqlServer
	}
	return ""
}

func (m *DatastoreConfig) GetMysqlConnectionString() string {
	if m != nil {
		return m.MysqlConnectionString
	}
	return ""
}

// Configuration for the mail server.
type MailConfig struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Server               string   `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	ServerPort           uint64   `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	AuthUsername         string   `protobuf:"bytes,4,opt,name=auth_username,json=authUsername,proto3" json:"auth_username,omitempty"`
	AuthPassword         string   `protobuf:"bytes,5,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MailConfig) Reset()         { *m = MailConfig{} }
func (m *MailConfig) String() string { return proto.CompactTextString(m) }
func (*MailConfig) ProtoMessage()    {}
func (*MailConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{16}
}

func (m *MailConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MailConfig.Unmarshal(m, b)
}
func (m *MailConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MailConfig.Marshal(b, m, deterministic)
}
func (m *MailConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailConfig.Merge(m, src)
}
func (m *MailConfig) XXX_Size() int {
	return xxx_messageInfo_MailConfig.Size(m)
}
func (m *MailConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MailConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MailConfig proto.InternalMessageInfo

func (m *MailConfig) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MailConfig) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *MailConfig) GetServerPort() uint64 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *MailConfig) GetAuthUsername() string {
	if m != nil {
		return m.AuthUsername
	}
	return ""
}

func (m *MailConfig) GetAuthPassword() string {
	if m != nil {
		return m.AuthPassword
	}
	return ""
}

type LoggingConfig struct {
	OutputDirectory          string   `protobuf:"bytes,1,opt,name=output_directory,json=outputDirectory,proto3" json:"output_directory,omitempty"`
	SeparateLogsPerComponent bool     `protobuf:"varint,2,opt,name=separate_logs_per_component,json=separateLogsPerComponent,proto3" json:"separate_logs_per_component,omitempty"`
	RotationTime             uint64   `protobuf:"varint,3,opt,name=rotation_time,json=rotationTime,proto3" json:"rotation_time,omitempty"`
	MaxAge                   uint64   `protobuf:"varint,4,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *LoggingConfig) Reset()         { *m = LoggingConfig{} }
func (m *LoggingConfig) String() string { return proto.CompactTextString(m) }
func (*LoggingConfig) ProtoMessage()    {}
func (*LoggingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{17}
}

func (m *LoggingConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggingConfig.Unmarshal(m, b)
}
func (m *LoggingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggingConfig.Marshal(b, m, deterministic)
}
func (m *LoggingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingConfig.Merge(m, src)
}
func (m *LoggingConfig) XXX_Size() int {
	return xxx_messageInfo_LoggingConfig.Size(m)
}
func (m *LoggingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingConfig proto.InternalMessageInfo

func (m *LoggingConfig) GetOutputDirectory() string {
	if m != nil {
		return m.OutputDirectory
	}
	return ""
}

func (m *LoggingConfig) GetSeparateLogsPerComponent() bool {
	if m != nil {
		return m.SeparateLogsPerComponent
	}
	return false
}

func (m *LoggingConfig) GetRotationTime() uint64 {
	if m != nil {
		return m.RotationTime
	}
	return 0
}

func (m *LoggingConfig) GetMaxAge() uint64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

type MonitoringConfig struct {
	BindAddress          string   `protobuf:"bytes,1,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	BindPort             uint32   `protobuf:"varint,2,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitoringConfig) Reset()         { *m = MonitoringConfig{} }
func (m *MonitoringConfig) String() string { return proto.CompactTextString(m) }
func (*MonitoringConfig) ProtoMessage()    {}
func (*MonitoringConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{18}
}

func (m *MonitoringConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringConfig.Unmarshal(m, b)
}
func (m *MonitoringConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringConfig.Marshal(b, m, deterministic)
}
func (m *MonitoringConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringConfig.Merge(m, src)
}
func (m *MonitoringConfig) XXX_Size() int {
	return xxx_messageInfo_MonitoringConfig.Size(m)
}
func (m *MonitoringConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringConfig proto.InternalMessageInfo

func (m *MonitoringConfig) GetBindAddress() string {
	if m != nil {
		return m.BindAddress
	}
	return ""
}

func (m *MonitoringConfig) GetBindPort() uint32 {
	if m != nil {
		return m.BindPort
	}
	return 0
}

type AutoExecConfig struct {
	Argv                 []string           `protobuf:"bytes,1,rep,name=argv,proto3" json:"argv,omitempty"`
	ArtifactDefinitions  []*proto2.Artifact `protobuf:"bytes,2,rep,name=artifact_definitions,json=artifactDefinitions,proto3" json:"artifact_definitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AutoExecConfig) Reset()         { *m = AutoExecConfig{} }
func (m *AutoExecConfig) String() string { return proto.CompactTextString(m) }
func (*AutoExecConfig) ProtoMessage()    {}
func (*AutoExecConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{19}
}

func (m *AutoExecConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutoExecConfig.Unmarshal(m, b)
}
func (m *AutoExecConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutoExecConfig.Marshal(b, m, deterministic)
}
func (m *AutoExecConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoExecConfig.Merge(m, src)
}
func (m *AutoExecConfig) XXX_Size() int {
	return xxx_messageInfo_AutoExecConfig.Size(m)
}
func (m *AutoExecConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoExecConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AutoExecConfig proto.InternalMessageInfo

func (m *AutoExecConfig) GetArgv() []string {
	if m != nil {
		return m.Argv
	}
	return nil
}

func (m *AutoExecConfig) GetArtifactDefinitions() []*proto2.Artifact {
	if m != nil {
		return m.ArtifactDefinitions
	}
	return nil
}

type ServerServicesConfig struct {
	HuntManager          bool     `protobuf:"varint,1,opt,name=hunt_manager,json=huntManager,proto3" json:"hunt_manager,omitempty"`
	HuntDispatcher       bool     `protobuf:"varint,2,opt,name=hunt_dispatcher,json=huntDispatcher,proto3" json:"hunt_dispatcher,omitempty"`
	StatsCollector       bool     `protobuf:"varint,3,opt,name=stats_collector,json=statsCollector,proto3" json:"stats_collector,omitempty"`
	ServerMonitoring     bool     `protobuf:"varint,4,opt,name=server_monitoring,json=serverMonitoring,proto3" json:"server_monitoring,omitempty"`
	ServerArtifacts      bool     `protobuf:"varint,5,opt,name=server_artifacts,json=serverArtifacts,proto3" json:"server_artifacts,omitempty"`
	DynDns               bool     `protobuf:"varint,6,opt,name=dyn_dns,json=dynDns,proto3" json:"dyn_dns,omitempty"`
	Interrogation        bool     `protobuf:"varint,7,opt,name=interrogation,proto3" json:"interrogation,omitempty"`
	SanityChecker        bool     `protobuf:"varint,8,opt,name=sanity_checker,json=sanityChecker,proto3" json:"sanity_checker,omitempty"`
	VfsService           bool     `protobuf:"varint,9,opt,name=vfs_service,json=vfsService,proto3" json:"vfs_service,omitempty"`
	UserManager          bool     `protobuf:"varint,10,opt,name=user_manager,json=userManager,proto3" json:"user_manager,omitempty"`
	ClientMonitoring     bool     `protobuf:"varint,11,opt,name=client_monitoring,json=clientMonitoring,proto3" json:"client_monitoring,omitempty"`
	MonitoringService    bool     `protobuf:"varint,12,opt,name=monitoring_service,json=monitoringService,proto3" json:"monitoring_service,omitempty"`
	ApiServer            bool     `protobuf:"varint,13,opt,name=api_server,json=apiServer,proto3" json:"api_server,omitempty"`
	FrontendServer       bool     `protobuf:"varint,14,opt,name=frontend_server,json=frontendServer,proto3" json:"frontend_server,omitempty"`
	GuiServer            bool     `protobuf:"varint,15,opt,name=gui_server,json=guiServer,proto3" json:"gui_server,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerServicesConfig) Reset()         { *m = ServerServicesConfig{} }
func (m *ServerServicesConfig) String() string { return proto.CompactTextString(m) }
func (*ServerServicesConfig) ProtoMessage()    {}
func (*ServerServicesConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{20}
}

func (m *ServerServicesConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerServicesConfig.Unmarshal(m, b)
}
func (m *ServerServicesConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerServicesConfig.Marshal(b, m, deterministic)
}
func (m *ServerServicesConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerServicesConfig.Merge(m, src)
}
func (m *ServerServicesConfig) XXX_Size() int {
	return xxx_messageInfo_ServerServicesConfig.Size(m)
}
func (m *ServerServicesConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerServicesConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServerServicesConfig proto.InternalMessageInfo

func (m *ServerServicesConfig) GetHuntManager() bool {
	if m != nil {
		return m.HuntManager
	}
	return false
}

func (m *ServerServicesConfig) GetHuntDispatcher() bool {
	if m != nil {
		return m.HuntDispatcher
	}
	return false
}

func (m *ServerServicesConfig) GetStatsCollector() bool {
	if m != nil {
		return m.StatsCollector
	}
	return false
}

func (m *ServerServicesConfig) GetServerMonitoring() bool {
	if m != nil {
		return m.ServerMonitoring
	}
	return false
}

func (m *ServerServicesConfig) GetServerArtifacts() bool {
	if m != nil {
		return m.ServerArtifacts
	}
	return false
}

func (m *ServerServicesConfig) GetDynDns() bool {
	if m != nil {
		return m.DynDns
	}
	return false
}

func (m *ServerServicesConfig) GetInterrogation() bool {
	if m != nil {
		return m.Interrogation
	}
	return false
}

func (m *ServerServicesConfig) GetSanityChecker() bool {
	if m != nil {
		return m.SanityChecker
	}
	return false
}

func (m *ServerServicesConfig) GetVfsService() bool {
	if m != nil {
		return m.VfsService
	}
	return false
}

func (m *ServerServicesConfig) GetUserManager() bool {
	if m != nil {
		return m.UserManager
	}
	return false
}

func (m *ServerServicesConfig) GetClientMonitoring() bool {
	if m != nil {
		return m.ClientMonitoring
	}
	return false
}

func (m *ServerServicesConfig) GetMonitoringService() bool {
	if m != nil {
		return m.MonitoringService
	}
	return false
}

func (m *ServerServicesConfig) GetApiServer() bool {
	if m != nil {
		return m.ApiServer
	}
	return false
}

func (m *ServerServicesConfig) GetFrontendServer() bool {
	if m != nil {
		return m.FrontendServer
	}
	return false
}

func (m *ServerServicesConfig) GetGuiServer() bool {
	if m != nil {
		return m.GuiServer
	}
	return false
}

type Config struct {
	Version              *Version              `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	Client               *ClientConfig         `protobuf:"bytes,1,opt,name=Client,proto3" json:"Client,omitempty"`
	API                  *APIConfig            `protobuf:"bytes,2,opt,name=API,proto3" json:"API,omitempty"`
	GUI                  *GUIConfig            `protobuf:"bytes,3,opt,name=GUI,proto3" json:"GUI,omitempty"`
	CA                   *CAConfig             `protobuf:"bytes,4,opt,name=CA,proto3" json:"CA,omitempty"`
	Frontend             *FrontendConfig       `protobuf:"bytes,5,opt,name=Frontend,proto3" json:"Frontend,omitempty"`
	Datastore            *DatastoreConfig      `protobuf:"bytes,6,opt,name=Datastore,proto3" json:"Datastore,omitempty"`
	Writeback            *Writeback            `protobuf:"bytes,9,opt,name=Writeback,proto3" json:"Writeback,omitempty"`
	Mail                 *MailConfig           `protobuf:"bytes,11,opt,name=Mail,proto3" json:"Mail,omitempty"`
	Logging              *LoggingConfig        `protobuf:"bytes,23,opt,name=Logging,proto3" json:"Logging,omitempty"`
	Verbose              bool                  `protobuf:"varint,20,opt,name=verbose,proto3" json:"verbose,omitempty"`
	AutocertDomain       string                `protobuf:"bytes,21,opt,name=autocert_domain,json=autocertDomain,proto3" json:"autocert_domain,omitempty"`
	AutocertCertCache    string                `protobuf:"bytes,22,opt,name=autocert_cert_cache,json=autocertCertCache,proto3" json:"autocert_cert_cache,omitempty"`
	Monitoring           *MonitoringConfig     `protobuf:"bytes,25,opt,name=Monitoring,proto3" json:"Monitoring,omitempty"`
	ApiConfig            *ApiClientConfig      `protobuf:"bytes,26,opt,name=api_config,json=apiConfig,proto3" json:"api_config,omitempty"`
	Autoexec             *AutoExecConfig       `protobuf:"bytes,28,opt,name=autoexec,proto3" json:"autoexec,omitempty"`
	ServerServices       *ServerServicesConfig `protobuf:"bytes,29,opt,name=server_services,json=serverServices,proto3" json:"server_services,omitempty"`
	ServerType           string                `protobuf:"bytes,30,opt,name=server_type,json=serverType,proto3" json:"server_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{21}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Config) GetClient() *ClientConfig {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *Config) GetAPI() *APIConfig {
	if m != nil {
		return m.API
	}
	return nil
}

func (m *Config) GetGUI() *GUIConfig {
	if m != nil {
		return m.GUI
	}
	return nil
}

func (m *Config) GetCA() *CAConfig {
	if m != nil {
		return m.CA
	}
	return nil
}

func (m *Config) GetFrontend() *FrontendConfig {
	if m != nil {
		return m.Frontend
	}
	return nil
}

func (m *Config) GetDatastore() *DatastoreConfig {
	if m != nil {
		return m.Datastore
	}
	return nil
}

func (m *Config) GetWriteback() *Writeback {
	if m != nil {
		return m.Writeback
	}
	return nil
}

func (m *Config) GetMail() *MailConfig {
	if m != nil {
		return m.Mail
	}
	return nil
}

func (m *Config) GetLogging() *LoggingConfig {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *Config) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *Config) GetAutocertDomain() string {
	if m != nil {
		return m.AutocertDomain
	}
	return ""
}

func (m *Config) GetAutocertCertCache() string {
	if m != nil {
		return m.AutocertCertCache
	}
	return ""
}

func (m *Config) GetMonitoring() *MonitoringConfig {
	if m != nil {
		return m.Monitoring
	}
	return nil
}

func (m *Config) GetApiConfig() *ApiClientConfig {
	if m != nil {
		return m.ApiConfig
	}
	return nil
}

func (m *Config) GetAutoexec() *AutoExecConfig {
	if m != nil {
		return m.Autoexec
	}
	return nil
}

func (m *Config) GetServerServices() *ServerServicesConfig {
	if m != nil {
		return m.ServerServices
	}
	return nil
}

func (m *Config) GetServerType() string {
	if m != nil {
		return m.ServerType
	}
	return ""
}

func init() {
	proto.RegisterType((*Version)(nil), "proto.Version")
	proto.RegisterType((*Writeback)(nil), "proto.Writeback")
	proto.RegisterType((*WindowsInstallerConfig)(nil), "proto.WindowsInstallerConfig")
	proto.RegisterType((*DarwinInstallerConfig)(nil), "proto.DarwinInstallerConfig")
	proto.RegisterType((*RingBufferConfig)(nil), "proto.RingBufferConfig")
	proto.RegisterType((*ClientConfig)(nil), "proto.ClientConfig")
	proto.RegisterType((*APIConfig)(nil), "proto.APIConfig")
	proto.RegisterType((*ApiClientConfig)(nil), "proto.ApiClientConfig")
	proto.RegisterType((*GUILink)(nil), "proto.GUILink")
	proto.RegisterType((*GUIConfig)(nil), "proto.GUIConfig")
	proto.RegisterType((*GUIUser)(nil), "proto.GUIUser")
	proto.RegisterType((*CAConfig)(nil), "proto.CAConfig")
	proto.RegisterType((*ReverseProxyConfig)(nil), "proto.ReverseProxyConfig")
	proto.RegisterType((*DynDNSConfig)(nil), "proto.DynDNSConfig")
	proto.RegisterType((*FrontendConfig)(nil), "proto.FrontendConfig")
	proto.RegisterType((*DatastoreConfig)(nil), "proto.DatastoreConfig")
	proto.RegisterType((*MailConfig)(nil), "proto.MailConfig")
	proto.RegisterType((*LoggingConfig)(nil), "proto.LoggingConfig")
	proto.RegisterType((*MonitoringConfig)(nil), "proto.MonitoringConfig")
	proto.RegisterType((*AutoExecConfig)(nil), "proto.AutoExecConfig")
	proto.RegisterType((*ServerServicesConfig)(nil), "proto.ServerServicesConfig")
	proto.RegisterType((*Config)(nil), "proto.Config")
}

func init() {
	proto.RegisterFile("config.proto", fileDescriptor_3eaf2c85e69e9ea4)
}

var fileDescriptor_3eaf2c85e69e9ea4 = []byte{
	// 5644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xcd, 0x6f, 0x1c, 0xc9,
	0x75, 0xc7, 0x48, 0x94, 0x44, 0xd6, 0xf0, 0xb3, 0xf4, 0x35, 0xfb, 0x21, 0x6f, 0xed, 0xac, 0xd7,
	0x22, 0xbd, 0x72, 0x93, 0xa2, 0x56, 0xf2, 0xee, 0xfa, 0x63, 0x35, 0x24, 0xb5, 0x12, 0xbd, 0x94,
	0xcc, 0x6d, 0x92, 0x92, 0xb1, 0xb1, 0x3d, 0xae, 0xe9, 0xae, 0x99, 0x29, 0xb3, 0xa7, 0xab, 0xb7,
	0xab, 0x9a, 0xc3, 0xd9, 0x18, 0x8e, 0x73, 0x49, 0x62, 0x5f, 0x02, 0x03, 0x41, 0x9c, 0xc4, 0x88,
	0x03, 0x27, 0xf1, 0x2d, 0x17, 0x03, 0xb9, 0x39, 0x87, 0x00, 0x49, 0x4e, 0xc9, 0x21, 0xff, 0x40,
	0x2e, 0xc9, 0x21, 0x41, 0x82, 0x00, 0xbe, 0x04, 0xf1, 0x21, 0x40, 0x82, 0xf7, 0xaa, 0xaa, 0xa7,
	0x87, 0x64, 0x62, 0x18, 0xb0, 0x83, 0x1c, 0x72, 0x90, 0x66, 0xa6, 0xea, 0xd5, 0x7b, 0xaf, 0xaa,
	0x5e, 0xbd, 0xf7, 0x7b, 0xaf, 0x8a, 0x64, 0x36, 0x52, 0x69, 0x57, 0xf6, 0x82, 0x2c, 0x57, 0x46,
	0xd1, 0x0b, 0xf8, 0xf1, 0xfc, 0x15, 0xfc, 0x58, 0xd5, 0x62, 0xc0, 0x53, 0x23, 0x23, 0xdb, 0xf9,
	0xfc, 0x75, 0x1e, 0x19, 0xa9, 0x52, 0xbd, 0x6a, 0x7b, 0x8f, 0x3e, 0x48, 0x5c, 0xc7, 0x47, 0x78,
	0x6e, 0x64, 0x97, 0x47, 0xc6, 0x77, 0xf9, 0xdf, 0xb6, 0xbf, 0xf9, 0xe3, 0x73, 0xe4, 0xd2, 0x53,
	0x91, 0x6b, 0xa9, 0x52, 0x1a, 0x90, 0xa9, 0x94, 0x0f, 0x44, 0xa3, 0xc6, 0x6a, 0xcb, 0x33, 0x1b,
	0xcf, 0xff, 0xfd, 0x7f, 0xfc, 0xc3, 0x5f, 0xd6, 0xae, 0x50, 0xba, 0xdf, 0x17, 0x2c, 0x4a, 0xa4,
	0x48, 0xcd, 0x4d, 0xcd, 0x80, 0x20, 0x08, 0x91, 0x8e, 0x3e, 0x21, 0xf5, 0x58, 0xe8, 0x28, 0x97,
	0x19, 0xc8, 0x6e, 0x9c, 0xc3, 0x61, 0xb7, 0x70, 0xd8, 0xc7, 0xe8, 0x47, 0x27, 0x86, 0x25, 0x2a,
	0xed, 0xb1, 0x0a, 0x31, 0xd3, 0x26, 0x97, 0x69, 0x2f, 0xac, 0x32, 0xa0, 0x9c, 0x5c, 0x3a, 0xb2,
	0xaa, 0x34, 0xce, 0x23, 0xaf, 0x87, 0xc8, 0xab, 0x45, 0xdf, 0x9e, 0xe0, 0xe5, 0x68, 0x1c, 0x0b,
	0x56, 0x68, 0xf8, 0x9f, 0x33, 0xbf, 0x22, 0xbe, 0x1f, 0x5a, 0x75, 0xd4, 0x17, 0xa0, 0xaf, 0xe7,
	0x4b, 0xdf, 0x26, 0x17, 0x23, 0x35, 0x18, 0x48, 0xd3, 0x98, 0x42, 0x09, 0x37, 0x51, 0xc2, 0xcb,
	0xf4, 0xa5, 0x09, 0x09, 0x3d, 0x69, 0x98, 0x25, 0x73, 0x42, 0x82, 0xd0, 0x0d, 0xa3, 0x2d, 0x42,
	0x3a, 0x85, 0x4c, 0xe2, 0xb6, 0x91, 0x03, 0xd1, 0xb8, 0x80, 0x4c, 0x9a, 0xc8, 0xe4, 0x45, 0xfa,
	0xfc, 0xb3, 0xbe, 0x48, 0x99, 0x29, 0x39, 0xb1, 0x21, 0xd7, 0x0c, 0xa8, 0x4d, 0x10, 0xce, 0xe0,
	0xa8, 0x7d, 0x39, 0x10, 0xcd, 0x7f, 0x3c, 0x4f, 0x66, 0x9e, 0xe5, 0xd2, 0x88, 0x0e, 0x8f, 0x0e,
	0x69, 0x48, 0xea, 0x59, 0x2e, 0x8f, 0xb8, 0x11, 0xed, 0x43, 0x31, 0x6a, 0x5c, 0x42, 0x8e, 0xb7,
	0x91, 0xe3, 0x6b, 0x74, 0x65, 0x42, 0x2d, 0x47, 0xc7, 0x0e, 0xc5, 0x88, 0xc9, 0x94, 0xed, 0x3e,
	0x78, 0xcc, 0x44, 0x1a, 0xa9, 0x18, 0x15, 0x24, 0xae, 0xf7, 0x5d, 0x31, 0xa2, 0x5f, 0x21, 0x97,
	0xfb, 0x45, 0x6a, 0xda, 0x09, 0xd7, 0x06, 0x15, 0xd5, 0x86, 0x0f, 0xb2, 0xc6, 0x1c, 0xab, 0x2d,
	0x4f, 0x6d, 0xac, 0x21, 0xef, 0x8f, 0xd3, 0x65, 0xe0, 0x0d, 0x14, 0x0c, 0x68, 0x59, 0x49, 0xc6,
	0x4c, 0x5f, 0x6a, 0x3f, 0x83, 0x9c, 0xa7, 0x41, 0xb8, 0x04, 0x04, 0x3b, 0x5c, 0x9b, 0x7d, 0x4f,
	0x43, 0xff, 0xa9, 0x46, 0x9e, 0x43, 0xee, 0x5a, 0xe4, 0x47, 0x22, 0x87, 0x0f, 0xc9, 0x93, 0x76,
	0x5a, 0x0c, 0x3a, 0x22, 0x6f, 0xcc, 0xa3, 0xa0, 0x3f, 0xa9, 0xa1, 0xa4, 0x1f, 0xd4, 0xe8, 0x1f,
	0xd6, 0x4a, 0x59, 0x91, 0x00, 0xfb, 0x93, 0x11, 0xcc, 0xc3, 0x0e, 0x62, 0x76, 0x10, 0x1b, 0x0a,
	0xa6, 0xf9, 0x90, 0x75, 0x73, 0x35, 0xc0, 0x35, 0xb4, 0x9c, 0x03, 0xb6, 0x89, 0x9a, 0x68, 0x96,
	0x8b, 0x6e, 0xa1, 0x05, 0x33, 0x8a, 0x45, 0x2a, 0x4d, 0x45, 0x64, 0xe0, 0xab, 0x25, 0xd2, 0x6c,
	0x28, 0x4d, 0x9f, 0xa9, 0x24, 0x16, 0xf9, 0x24, 0x57, 0xcd, 0xb8, 0x66, 0x19, 0xcf, 0x0d, 0x53,
	0x5d, 0x47, 0x8c, 0xcb, 0x97, 0x2b, 0xc3, 0xd1, 0x0e, 0xf1, 0x14, 0x44, 0x2a, 0x09, 0xc2, 0x6b,
	0xa0, 0xdf, 0x1e, 0x92, 0xec, 0x21, 0x8b, 0x27, 0xc8, 0x81, 0xbe, 0x49, 0xe6, 0xc4, 0x91, 0x48,
	0x4d, 0xfb, 0x83, 0x42, 0xe4, 0x52, 0x68, 0x3c, 0x1e, 0xf5, 0xf5, 0x2b, 0xf6, 0x00, 0x05, 0x4f,
	0xdf, 0xdb, 0x79, 0x00, 0xdd, 0xfb, 0xbc, 0x93, 0x88, 0x70, 0x16, 0x49, 0xdf, 0xb3, 0x94, 0xcd,
	0x7f, 0x3e, 0x47, 0xae, 0x3d, 0x93, 0x69, 0xac, 0x86, 0x7a, 0x3b, 0xd5, 0x86, 0x27, 0x89, 0xc8,
	0x37, 0xf1, 0x4c, 0xd3, 0xc7, 0x64, 0x16, 0xd4, 0x91, 0x91, 0x68, 0x57, 0xce, 0xdc, 0xc7, 0x71,
	0xc5, 0x3e, 0x4a, 0x9b, 0xb0, 0x5e, 0xd0, 0x0e, 0x6a, 0xfb, 0xc5, 0x90, 0x91, 0x9d, 0x7d, 0x2e,
	0xb8, 0x11, 0x41, 0x58, 0x77, 0x6d, 0x4f, 0xe0, 0x28, 0x7e, 0xbf, 0x46, 0x66, 0xa5, 0x15, 0xd1,
	0xce, 0xb8, 0xe9, 0xbb, 0xc3, 0xf8, 0x75, 0xe4, 0x77, 0x4c, 0x8f, 0x9e, 0xf5, 0x45, 0x2e, 0x98,
	0xee, 0xab, 0x22, 0x89, 0x91, 0x61, 0x47, 0xa6, 0x3c, 0x1f, 0xb1, 0x8e, 0x60, 0x6e, 0x98, 0x88,
	0xdf, 0x66, 0x20, 0xd5, 0xfd, 0x44, 0xfb, 0xe7, 0x69, 0xcc, 0x22, 0x95, 0x49, 0xa1, 0xab, 0x63,
	0x8c, 0xb2, 0x26, 0x92, 0xa8, 0xc8, 0xae, 0x21, 0x90, 0xb9, 0x61, 0xba, 0xaa, 0x6d, 0x10, 0xd6,
	0x5d, 0xf3, 0x2e, 0x37, 0x7d, 0xfa, 0x25, 0x72, 0xd9, 0x4f, 0xb9, 0xea, 0x36, 0xce, 0x4f, 0xba,
	0x8d, 0xad, 0x8a, 0x93, 0xe8, 0xaa, 0x1c, 0xf9, 0x0d, 0xed, 0x1a, 0x8e, 0xf9, 0x52, 0xf7, 0xad,
	0x42, 0xdc, 0xfc, 0xd6, 0x39, 0x72, 0x75, 0x8b, 0xe7, 0x43, 0x99, 0xfe, 0xff, 0x5a, 0x37, 0xff,
	0xea, 0x02, 0x59, 0x0c, 0x65, 0xda, 0xdb, 0x28, 0xba, 0xdd, 0x72, 0x1d, 0xbe, 0x4c, 0xea, 0x03,
	0x31, 0x50, 0xf9, 0xa8, 0xad, 0xe5, 0x87, 0x76, 0x19, 0xa6, 0x36, 0x3e, 0x83, 0x6a, 0x7f, 0x92,
	0xde, 0x7d, 0xa4, 0x86, 0x6c, 0xc0, 0xd3, 0x11, 0xeb, 0x8c, 0x0c, 0x28, 0xa1, 0x98, 0x36, 0x2a,
	0x07, 0x25, 0x51, 0x0e, 0xfa, 0xda, 0x0e, 0xb2, 0x83, 0x26, 0xcb, 0x28, 0x08, 0x89, 0xfd, 0xb2,
	0x27, 0x3f, 0x14, 0x34, 0x25, 0x33, 0xb1, 0xd4, 0x87, 0x96, 0xfb, 0x39, 0xe4, 0xfe, 0x1e, 0x72,
	0x7f, 0x97, 0x6e, 0xff, 0x0c, 0xdc, 0x55, 0xca, 0x80, 0x0d, 0x5b, 0x5e, 0x63, 0x03, 0xc1, 0x53,
	0x96, 0x2a, 0xfb, 0xbb, 0x2b, 0x13, 0xb1, 0x12, 0x84, 0xd3, 0xf0, 0x03, 0xe5, 0x0d, 0xc8, 0x34,
	0xb4, 0xe1, 0x9e, 0x5a, 0x2b, 0x2a, 0xc5, 0x3d, 0x71, 0xfb, 0x09, 0xfd, 0x63, 0x61, 0x67, 0xcc,
	0x63, 0x59, 0x76, 0x99, 0x18, 0x64, 0x66, 0x04, 0xfe, 0x27, 0x56, 0x2c, 0x55, 0x86, 0x81, 0x9b,
	0xe1, 0xa5, 0x38, 0x2f, 0x82, 0x1e, 0x93, 0x79, 0xff, 0xbd, 0x9d, 0xc8, 0xb4, 0x38, 0x76, 0x31,
	0xe4, 0x17, 0x20, 0x74, 0xce, 0x0b, 0xda, 0x01, 0x39, 0xf4, 0x6b, 0x64, 0xb1, 0x94, 0xec, 0xce,
	0x82, 0x0b, 0x3d, 0xbf, 0x00, 0xd9, 0x0b, 0x5e, 0x94, 0xf3, 0x5c, 0xf4, 0x43, 0x52, 0x36, 0xb5,
	0x63, 0x3c, 0x60, 0x8d, 0x8b, 0xbf, 0x28, 0xe1, 0xe5, 0x0a, 0xdb, 0x93, 0xdc, 0xfc, 0x0e, 0x25,
	0xb3, 0x36, 0x00, 0x38, 0x1b, 0xfe, 0xd5, 0x1a, 0xb9, 0x98, 0xf0, 0x8e, 0x48, 0x74, 0xe3, 0x22,
	0x3b, 0xbf, 0x3c, 0xb3, 0x21, 0x51, 0x89, 0x88, 0xf2, 0x16, 0x4b, 0xa4, 0x46, 0x3f, 0x6f, 0xfb,
	0xab, 0x81, 0xb8, 0xcf, 0x75, 0xc0, 0xf6, 0xe1, 0x20, 0xf1, 0x24, 0xb1, 0x9e, 0x24, 0x11, 0x91,
	0x11, 0x31, 0xeb, 0xe5, 0xaa, 0xc8, 0x34, 0x8c, 0x8a, 0x5c, 0x9c, 0x31, 0x0a, 0x4e, 0xaa, 0xe1,
	0x79, 0x4f, 0x18, 0xa0, 0x90, 0x29, 0x06, 0x48, 0x1d, 0x84, 0x4e, 0x30, 0xe5, 0xa4, 0xee, 0xc2,
	0x5e, 0x91, 0x27, 0xba, 0x31, 0x8d, 0x7a, 0xdc, 0x47, 0x3d, 0xde, 0xa2, 0x6f, 0x8c, 0xf5, 0x70,
	0xf1, 0xe6, 0x20, 0xdc, 0x99, 0x50, 0x66, 0x28, 0x93, 0x84, 0x19, 0x7b, 0xb8, 0xc7, 0xa1, 0x2c,
	0x08, 0x89, 0xa5, 0x3f, 0xc8, 0x13, 0x4d, 0xbf, 0x59, 0x23, 0xf3, 0x11, 0x6f, 0x57, 0xa2, 0x65,
	0xa3, 0x8e, 0x6b, 0xde, 0x41, 0x31, 0x5f, 0xa4, 0xef, 0x83, 0xff, 0xd8, 0x6c, 0xdd, 0xd4, 0x13,
	0x11, 0x15, 0xe1, 0x80, 0xd5, 0x79, 0xf7, 0xc1, 0xe3, 0x80, 0xed, 0x9f, 0x92, 0x5a, 0x68, 0xc3,
	0xe0, 0x18, 0x3a, 0xdd, 0xb4, 0xec, 0xa5, 0x22, 0xb6, 0xe1, 0x13, 0x1d, 0xcd, 0x66, 0x2b, 0x08,
	0xe7, 0x22, 0xbe, 0x39, 0x66, 0x4a, 0x7f, 0x54, 0x23, 0x17, 0x52, 0x95, 0x46, 0xa2, 0x31, 0x8b,
	0x2a, 0xfc, 0xb1, 0x8d, 0xeb, 0xbf, 0x5f, 0xa3, 0xbf, 0x57, 0x6b, 0x31, 0xdd, 0xe7, 0xb9, 0x88,
	0x19, 0x12, 0x9c, 0x9a, 0x65, 0x96, 0x0b, 0x2d, 0x52, 0x63, 0x15, 0x71, 0x22, 0xb1, 0x23, 0x17,
	0x5f, 0x85, 0x69, 0xfb, 0x35, 0x1f, 0xf6, 0x65, 0xd4, 0xf7, 0x06, 0xe1, 0x06, 0x59, 0x7d, 0x20,
	0x58, 0x6b, 0xc5, 0xa4, 0x61, 0x03, 0x50, 0xbd, 0x23, 0x98, 0x18, 0x74, 0x44, 0xec, 0x26, 0x69,
	0xaa, 0xf0, 0xc8, 0xa2, 0xe5, 0x22, 0x47, 0x47, 0x19, 0x84, 0x56, 0x67, 0xda, 0x25, 0x8b, 0x43,
	0x0f, 0xb6, 0xbc, 0xf9, 0x5e, 0xc1, 0x79, 0x7c, 0x0a, 0xa7, 0x71, 0x97, 0xde, 0x69, 0x31, 0x70,
	0xe3, 0x6c, 0x88, 0x7e, 0xdb, 0x92, 0x8c, 0x35, 0x03, 0x6d, 0x91, 0x01, 0xfa, 0xe0, 0x84, 0x69,
	0x83, 0x11, 0x61, 0xa1, 0x64, 0x6a, 0x2d, 0x95, 0x46, 0x64, 0xdc, 0xe4, 0xdc, 0xc3, 0x0c, 0x8a,
	0x79, 0x0b, 0xc5, 0xbc, 0x4e, 0xd7, 0x27, 0xc4, 0x20, 0xc5, 0x4f, 0x95, 0x32, 0x5f, 0xb2, 0xb4,
	0x8e, 0x40, 0x92, 0xa5, 0xb1, 0x10, 0xef, 0x09, 0x08, 0x8a, 0xf9, 0x34, 0x8a, 0xb9, 0x47, 0x5f,
	0x9f, 0x10, 0xe3, 0x23, 0xe7, 0x4f, 0x13, 0x34, 0x5e, 0x23, 0x7f, 0xea, 0x7f, 0x89, 0x4c, 0x0f,
	0xf8, 0x71, 0x3b, 0x53, 0x49, 0xd2, 0x58, 0x40, 0x5f, 0xee, 0x2d, 0xfc, 0x0e, 0x6c, 0xe6, 0x80,
	0x1f, 0xcb, 0x41, 0x31, 0xf0, 0xe0, 0x0d, 0xad, 0x3d, 0x52, 0x69, 0xac, 0x59, 0x47, 0x98, 0xa1,
	0x10, 0xa9, 0xdf, 0x6e, 0x60, 0xa0, 0x83, 0xf5, 0xf3, 0xf7, 0xd6, 0xd6, 0xc2, 0x4b, 0x03, 0x7e,
	0xbc, 0xab, 0x92, 0x84, 0xee, 0x91, 0x59, 0xcf, 0xbc, 0xad, 0x4d, 0xdc, 0x78, 0x01, 0x05, 0x78,
	0xd4, 0xfb, 0x2a, 0x5a, 0x8b, 0xe1, 0x69, 0xcc, 0xf3, 0x98, 0xc5, 0xe2, 0x48, 0xda, 0xd8, 0xe7,
	0x39, 0x3b, 0x96, 0xe7, 0xee, 0xac, 0x85, 0xc4, 0x71, 0xdc, 0x33, 0x31, 0xfd, 0x65, 0xb2, 0xe4,
	0xa6, 0xdb, 0xf6, 0x71, 0x36, 0x6f, 0x2c, 0x22, 0x58, 0xbb, 0xe1, 0xc0, 0xda, 0xd9, 0x60, 0x6c,
	0x63, 0x15, 0x05, 0xaf, 0xd0, 0x9b, 0x9b, 0x55, 0x13, 0xf2, 0x78, 0xc0, 0xaf, 0x61, 0xc9, 0x14,
	0x96, 0xeb, 0x04, 0x23, 0x7a, 0x4c, 0x16, 0xad, 0xe5, 0x54, 0x64, 0x5f, 0x45, 0xd9, 0x2f, 0x3a,
	0xd9, 0x67, 0x62, 0x93, 0x9f, 0x5d, 0xf4, 0x42, 0x3c, 0xc9, 0x87, 0x1e, 0x92, 0xf9, 0x2c, 0xb7,
	0x08, 0x55, 0x1c, 0x8b, 0xe8, 0x48, 0x34, 0x96, 0x58, 0x6d, 0x79, 0x7a, 0x63, 0x0b, 0x39, 0x7f,
	0x96, 0x7e, 0x7a, 0xbb, 0x6b, 0x8f, 0x92, 0x04, 0xb7, 0x67, 0x6e, 0x31, 0x47, 0xcd, 0x78, 0xde,
	0x91, 0x26, 0x07, 0x94, 0x01, 0x4e, 0x83, 0xc1, 0xe0, 0xc2, 0x0a, 0x2f, 0xcd, 0x3f, 0x08, 0xe7,
	0x1c, 0xf5, 0x03, 0x64, 0x4d, 0xdf, 0x1f, 0xa7, 0x68, 0x14, 0x67, 0x37, 0xef, 0x61, 0xb0, 0x6d,
	0x9d, 0xcc, 0x2e, 0x7c, 0xa6, 0x26, 0xd3, 0xae, 0xca, 0x07, 0xbc, 0x82, 0xe9, 0xca, 0x0c, 0xa3,
	0x92, 0x9b, 0xe5, 0x64, 0x31, 0x16, 0x5d, 0x5e, 0x24, 0xa6, 0x0d, 0xc6, 0x31, 0xe4, 0xd2, 0x34,
	0x2e, 0xa3, 0x61, 0x3c, 0x42, 0xa6, 0x1b, 0xf4, 0x3e, 0x30, 0x75, 0x34, 0x60, 0x81, 0x98, 0xb4,
	0x80, 0x1b, 0x05, 0x5a, 0xd6, 0x11, 0x5d, 0x08, 0x3b, 0x90, 0x47, 0x88, 0x34, 0x46, 0xd4, 0x0f,
	0x89, 0xc0, 0xd3, 0xf7, 0x76, 0x58, 0x2e, 0x74, 0x91, 0xc0, 0x74, 0xe6, 0xdd, 0xe8, 0xc7, 0xfc,
	0xf8, 0x19, 0x97, 0x86, 0xfe, 0x4b, 0x8d, 0x5c, 0x2e, 0xb4, 0x68, 0x6b, 0x91, 0x74, 0xdb, 0xd6,
	0x19, 0xb6, 0xb5, 0x4e, 0x1a, 0x0d, 0x5c, 0xc2, 0x1f, 0x59, 0x4f, 0xf7, 0xa7, 0x35, 0xfa, 0xc3,
	0xda, 0xc9, 0x55, 0x3c, 0xe9, 0xea, 0xc4, 0x71, 0x06, 0x1e, 0x0d, 0xf2, 0xd0, 0xa4, 0xeb, 0xfd,
	0x6a, 0xd5, 0x37, 0x9f, 0x4c, 0x6c, 0x9e, 0x7c, 0x7e, 0xff, 0xc1, 0x5b, 0xce, 0x31, 0x9e, 0x3d,
	0xc2, 0x7b, 0x3c, 0xd7, 0xd5, 0x19, 0xe1, 0xf0, 0xa7, 0x22, 0x51, 0x91, 0xcc, 0x79, 0x66, 0x54,
	0xce, 0x36, 0x5b, 0xce, 0x77, 0x4a, 0x3d, 0x76, 0x8c, 0xbc, 0xa3, 0x8e, 0xe0, 0x4c, 0x17, 0x5a,
	0xec, 0x89, 0xa4, 0xbb, 0x87, 0xc3, 0xf7, 0x74, 0x42, 0xff, 0xbc, 0x46, 0x68, 0x26, 0x53, 0x9c,
	0xa4, 0x0d, 0x60, 0x88, 0x9d, 0x5e, 0x44, 0x07, 0xf2, 0x6d, 0x3b, 0xd9, 0x6f, 0xd5, 0xe8, 0xaf,
	0xd7, 0x9e, 0x54, 0xe0, 0x70, 0x37, 0x57, 0xa9, 0x11, 0x69, 0x3c, 0x19, 0x6a, 0x02, 0xb6, 0xdd,
	0x85, 0xa5, 0xe6, 0xb9, 0x70, 0x19, 0x78, 0x75, 0x16, 0x7b, 0x7b, 0x3b, 0xa7, 0x16, 0xa8, 0x23,
	0x98, 0x95, 0x5d, 0x82, 0x5a, 0x04, 0xdd, 0xcb, 0x7e, 0x3f, 0xab, 0xf3, 0xb2, 0x69, 0xd8, 0x4a,
	0xb8, 0x68, 0x47, 0xd8, 0x9f, 0x08, 0xbe, 0x53, 0xb2, 0x00, 0xc6, 0x51, 0x64, 0x89, 0xe2, 0xb1,
	0x45, 0x9a, 0xcf, 0xa1, 0x8d, 0xbc, 0x83, 0xda, 0xdf, 0xa7, 0x9f, 0x7d, 0xec, 0x3c, 0x13, 0xf4,
	0x41, 0x8c, 0xd8, 0x40, 0xc0, 0x39, 0x14, 0x56, 0x0b, 0x8b, 0xe8, 0x99, 0x1d, 0xaf, 0xd1, 0x1a,
	0x4b, 0x0d, 0xee, 0x0e, 0x3a, 0x2b, 0xe1, 0xdc, 0x80, 0x1f, 0x1f, 0x60, 0x2f, 0x62, 0xcc, 0x98,
	0xcc, 0xa2, 0xa3, 0x6c, 0x5b, 0x10, 0xd3, 0x78, 0x1e, 0xad, 0xfe, 0xba, 0xb3, 0xfa, 0x93, 0x10,
	0x7b, 0x63, 0x19, 0xb5, 0x68, 0x52, 0xe6, 0x8f, 0xb3, 0x8d, 0x89, 0xd6, 0xd7, 0x56, 0xc0, 0x50,
	0x10, 0xd6, 0xb1, 0xcd, 0x0e, 0xa6, 0xb7, 0xc9, 0x55, 0x98, 0x95, 0x43, 0xe7, 0x7d, 0x9e, 0xc7,
	0xed, 0x44, 0x0e, 0xa4, 0x69, 0xdc, 0x80, 0xb9, 0x85, 0x74, 0xc0, 0x8f, 0x1f, 0x63, 0xdf, 0x23,
	0x9e, 0xc7, 0x3b, 0xd0, 0xd3, 0xfc, 0xf6, 0x14, 0x99, 0x69, 0xed, 0x6e, 0x3b, 0x58, 0xf4, 0xbb,
	0x35, 0x32, 0xdb, 0x91, 0x69, 0xdc, 0xe6, 0x71, 0x9c, 0x0b, 0xad, 0x5d, 0x8e, 0x73, 0x84, 0xea,
	0x64, 0x34, 0x6d, 0xd9, 0x66, 0x04, 0x37, 0x32, 0x8d, 0x59, 0x2f, 0xdc, 0xdd, 0x64, 0x22, 0x8d,
	0x33, 0x25, 0x6d, 0x78, 0x06, 0xb3, 0xb6, 0x19, 0x4b, 0xa1, 0x0b, 0x9e, 0x24, 0x23, 0xa6, 0xd2,
	0x04, 0x73, 0x96, 0xdb, 0xeb, 0x9f, 0x0c, 0xd6, 0x82, 0xb5, 0xe0, 0xf6, 0x2d, 0xa6, 0x4c, 0x5f,
	0xe4, 0x43, 0xa9, 0x05, 0x5a, 0x25, 0x4e, 0x4e, 0x41, 0x06, 0x9d, 0x89, 0x3c, 0x01, 0x48, 0x11,
	0x41, 0x93, 0x34, 0x41, 0x58, 0x07, 0x21, 0x4e, 0x26, 0xbd, 0x4b, 0x66, 0x50, 0xb5, 0x4c, 0xe5,
	0x06, 0xd3, 0x82, 0xb9, 0x8d, 0x06, 0xea, 0x45, 0xe9, 0xe2, 0xae, 0xca, 0x4d, 0xa9, 0x14, 0x2c,
	0xe8, 0x34, 0x7c, 0x83, 0x56, 0xda, 0x21, 0xc8, 0xa5, 0x6d, 0x6b, 0x38, 0x0e, 0xe0, 0xb7, 0x70,
	0xe0, 0xa7, 0x20, 0x66, 0xdb, 0xf6, 0x32, 0x47, 0x04, 0xd0, 0x25, 0x6c, 0xd1, 0x47, 0x45, 0x87,
	0xc2, 0xb0, 0x65, 0x11, 0xf4, 0x02, 0x66, 0xa2, 0xec, 0x16, 0x2b, 0x52, 0x79, 0xbc, 0x12, 0xac,
	0x4f, 0xc1, 0x67, 0x48, 0x80, 0xeb, 0x1e, 0x0e, 0xa6, 0x7f, 0x53, 0x23, 0xf3, 0xee, 0x40, 0xf4,
	0x86, 0xf6, 0x30, 0x58, 0x4c, 0xff, 0x03, 0x7b, 0x18, 0xbe, 0x57, 0xa3, 0xdf, 0xad, 0x3d, 0xe4,
	0x46, 0x0c, 0xf9, 0x68, 0xe2, 0x68, 0x5a, 0x5b, 0xe2, 0x39, 0xa0, 0x38, 0x74, 0x66, 0x6a, 0x30,
	0x50, 0xa9, 0xad, 0x8e, 0xb1, 0x27, 0xca, 0xc0, 0xb6, 0x73, 0x53, 0x31, 0x73, 0x58, 0xdf, 0x4c,
	0x44, 0xe0, 0x90, 0x3a, 0x22, 0xe2, 0x00, 0x7a, 0xa5, 0xf1, 0x68, 0x94, 0x17, 0xa6, 0xcf, 0x3a,
	0xa3, 0x8c, 0x6b, 0x6b, 0x91, 0x32, 0x35, 0x22, 0x4f, 0x79, 0xc2, 0x7a, 0x5e, 0x34, 0xa4, 0x7b,
	0x01, 0xdb, 0x72, 0x86, 0xba, 0xfc, 0x30, 0xdc, 0xdd, 0x6c, 0x3f, 0x7c, 0xb6, 0x12, 0xce, 0x5a,
	0xed, 0x1f, 0x0e, 0xe1, 0x70, 0x34, 0xbf, 0x37, 0x45, 0x16, 0x5a, 0x99, 0x9c, 0x00, 0xcc, 0xfc,
	0x14, 0x90, 0xac, 0x4d, 0xc2, 0x12, 0x0b, 0x24, 0x27, 0x66, 0x57, 0x68, 0x7b, 0x4a, 0x8f, 0x44,
	0x2e, 0xbb, 0x23, 0xd6, 0xda, 0xdd, 0xf6, 0x40, 0x55, 0xaa, 0x54, 0x9f, 0x02, 0x88, 0xdf, 0xa9,
	0x91, 0xba, 0x3d, 0xe9, 0x28, 0xc7, 0xe5, 0xc3, 0x63, 0xdb, 0xf3, 0x6e, 0xa0, 0x2a, 0x02, 0x97,
	0xa7, 0x23, 0x12, 0x95, 0xf6, 0x74, 0xe9, 0x10, 0x5c, 0x48, 0x60, 0x0f, 0x45, 0x2a, 0x72, 0x0e,
	0xe0, 0xbb, 0x74, 0x9a, 0x37, 0x8f, 0xaa, 0x6e, 0xcf, 0x42, 0x3d, 0xc6, 0x33, 0xd9, 0x76, 0xf0,
	0xcf, 0xe7, 0xd0, 0x41, 0x48, 0x6c, 0x0b, 0x28, 0x48, 0xbf, 0x44, 0xa8, 0x53, 0xac, 0x5a, 0x63,
	0xb3, 0xa6, 0x54, 0x46, 0xde, 0xdd, 0x4a, 0x59, 0xcd, 0x28, 0xd6, 0x53, 0x1e, 0x0e, 0x7b, 0xff,
	0x85, 0xb3, 0x0a, 0xc2, 0x45, 0xfb, 0x6b, 0x77, 0x5c, 0x67, 0x4b, 0xc9, 0x55, 0x54, 0xa1, 0x5c,
	0x9b, 0xb6, 0x2d, 0x17, 0x3a, 0x23, 0x2a, 0x97, 0x78, 0xc7, 0x67, 0xef, 0x16, 0x94, 0x01, 0x67,
	0x9e, 0xc9, 0xf2, 0xfc, 0x95, 0xfe, 0x91, 0x1f, 0x71, 0x99, 0xf0, 0x4e, 0x22, 0x82, 0xf0, 0x32,
	0xcf, 0xe4, 0x66, 0xc9, 0x77, 0x0f, 0xd9, 0xd2, 0xb7, 0x5d, 0x81, 0xd6, 0xe6, 0x7e, 0xaf, 0x21,
	0xfb, 0x57, 0xe9, 0x2b, 0xb8, 0x83, 0x68, 0x80, 0xe8, 0xb7, 0xcb, 0x08, 0x8b, 0xfb, 0xe6, 0xa2,
	0x2c, 0x0e, 0x6c, 0xae, 0x92, 0x4b, 0x0f, 0x0f, 0xb6, 0x77, 0x64, 0x7a, 0x48, 0x29, 0x99, 0x32,
	0xe2, 0xd8, 0x58, 0x6b, 0x08, 0xf1, 0x3b, 0x5d, 0x24, 0xe7, 0x8b, 0x3c, 0xb1, 0xfb, 0x17, 0xc2,
	0xd7, 0xe6, 0xdf, 0xcd, 0x91, 0x99, 0x87, 0x07, 0xde, 0xcb, 0xfc, 0xce, 0xd9, 0x5e, 0xa6, 0x40,
	0x45, 0x14, 0x1d, 0x9c, 0xf4, 0x32, 0x0f, 0x0f, 0xb6, 0xff, 0x8f, 0x3b, 0x99, 0xbf, 0xa8, 0x91,
	0xf9, 0xde, 0x70, 0xe2, 0x78, 0x58, 0x38, 0xfd, 0x5d, 0xeb, 0x00, 0x7e, 0xab, 0x46, 0xbf, 0x8d,
	0xc5, 0x4b, 0x9c, 0xca, 0x71, 0xa6, 0xb4, 0xd0, 0x8c, 0xb3, 0x47, 0xfb, 0xfb, 0xbb, 0xf6, 0x94,
	0x76, 0xb9, 0xad, 0x14, 0xc1, 0x9e, 0x7a, 0xa7, 0xca, 0xec, 0x84, 0xf7, 0x1d, 0x5c, 0x40, 0x43,
	0xaa, 0x98, 0x3e, 0x07, 0x8a, 0xaa, 0xcd, 0xc1, 0x51, 0xf0, 0x26, 0xe0, 0x8f, 0x5e, 0xa5, 0xc6,
	0x59, 0x65, 0x6d, 0x39, 0x87, 0x73, 0xbd, 0x61, 0xf5, 0x00, 0x1e, 0xe2, 0x24, 0xaa, 0x26, 0x6e,
	0x93, 0xc5, 0x07, 0x38, 0x87, 0xb7, 0xe9, 0x67, 0x60, 0x06, 0x55, 0x91, 0x27, 0x42, 0xbb, 0xc7,
	0xea, 0x93, 0xe9, 0x23, 0xb3, 0xa0, 0x2d, 0x08, 0x67, 0x7b, 0xc3, 0x8a, 0xd1, 0x7f, 0xa7, 0x46,
	0xe6, 0xbc, 0x83, 0x6a, 0x47, 0x32, 0xce, 0x1b, 0xe7, 0x31, 0x01, 0xce, 0x51, 0x58, 0x42, 0xbf,
	0xba, 0xb9, 0xbd, 0x15, 0x32, 0x67, 0x21, 0x02, 0x53, 0xeb, 0xd2, 0x9f, 0xa5, 0xc2, 0x0c, 0x55,
	0x7e, 0xa8, 0x9d, 0x73, 0xbe, 0xfd, 0xe6, 0x7a, 0x70, 0xfb, 0xde, 0x1b, 0xb0, 0xf3, 0xab, 0xb7,
	0xef, 0xad, 0x04, 0xec, 0x19, 0x2e, 0x80, 0xb5, 0x5e, 0xa3, 0xc0, 0x58, 0x86, 0xa8, 0xa8, 0x67,
	0xb0, 0x2a, 0x8e, 0x1d, 0x27, 0x19, 0x41, 0x8e, 0x37, 0xeb, 0x3b, 0x36, 0x65, 0x9c, 0xd3, 0xdf,
	0xa8, 0x91, 0xe9, 0xa3, 0x2c, 0xb5, 0x4a, 0x4d, 0xa1, 0x52, 0x03, 0x54, 0xaa, 0x47, 0xc5, 0x69,
	0xa5, 0x8e, 0xb2, 0xf4, 0xe7, 0xae, 0xcf, 0xa5, 0xa3, 0x2c, 0x45, 0x55, 0x04, 0xb9, 0xd6, 0x53,
	0xaa, 0x97, 0x88, 0xb6, 0x02, 0xe7, 0xee, 0xbc, 0x54, 0x5b, 0xc6, 0xee, 0xec, 0x96, 0x30, 0x79,
	0x1b, 0x12, 0x27, 0x03, 0xf0, 0x04, 0x04, 0x21, 0x31, 0x86, 0x03, 0x91, 0x1a, 0xe9, 0x9c, 0x46,
	0x37, 0x51, 0xc3, 0x20, 0xbc, 0x6c, 0xf9, 0x7d, 0x1e, 0x3a, 0xad, 0x83, 0xdf, 0x8e, 0xe9, 0x80,
	0x3c, 0x7f, 0x96, 0x18, 0x2d, 0xa2, 0x5c, 0x18, 0x57, 0xa5, 0xf9, 0xd9, 0x45, 0x5d, 0x3f, 0x25,
	0x6a, 0x0f, 0x19, 0xd2, 0x07, 0x84, 0x64, 0x45, 0x27, 0x91, 0x51, 0x1b, 0xdc, 0x84, 0xbd, 0xaa,
	0xf8, 0x18, 0xb2, 0x67, 0xf4, 0x23, 0x68, 0x63, 0xd8, 0xcb, 0x0e, 0xc2, 0x1d, 0x6b, 0x62, 0x52,
	0x7b, 0xb4, 0x1b, 0xce, 0xd8, 0xbe, 0x83, 0x3c, 0xa1, 0x11, 0x99, 0x83, 0xa4, 0x22, 0xd7, 0xa2,
	0x9d, 0xe5, 0xea, 0x78, 0x84, 0x15, 0x94, 0xfa, 0xfa, 0x73, 0x1e, 0x54, 0xd9, 0xbe, 0x5d, 0xe8,
	0x72, 0xb0, 0xea, 0x15, 0x14, 0x72, 0x83, 0xbe, 0x10, 0xaa, 0x02, 0xd0, 0x1c, 0xb8, 0x38, 0xc7,
	0x02, 0x5c, 0xc3, 0xb1, 0x14, 0x3a, 0x08, 0x67, 0xf3, 0xca, 0x40, 0x7a, 0x40, 0x2e, 0x24, 0x32,
	0x3d, 0xd4, 0x8d, 0x19, 0x64, 0xee, 0xf3, 0x14, 0xe7, 0xfe, 0xc6, 0xde, 0xbf, 0x15, 0xc7, 0x12,
	0xe6, 0xce, 0x13, 0x86, 0xf4, 0xd6, 0xdb, 0xd8, 0x0a, 0x84, 0xab, 0x30, 0x3c, 0x3c, 0xd8, 0x0e,
	0x42, 0xcb, 0x8d, 0x6e, 0x91, 0x45, 0xcd, 0x07, 0xc9, 0x84, 0xc7, 0xb0, 0x65, 0x91, 0xe7, 0x90,
	0xe3, 0x65, 0xba, 0xb4, 0xd7, 0x7a, 0xbc, 0x33, 0x01, 0x95, 0xc3, 0x05, 0x18, 0x52, 0x3d, 0xb0,
	0x9b, 0x8e, 0x4b, 0xf5, 0xc8, 0xce, 0x9d, 0xc1, 0xa5, 0x72, 0x66, 0x83, 0x70, 0x1e, 0x86, 0x54,
	0x0e, 0x62, 0x9b, 0x5c, 0x45, 0x26, 0x32, 0xce, 0xda, 0x03, 0x61, 0x78, 0xcc, 0x0d, 0xc7, 0x8d,
	0x99, 0x9f, 0xac, 0xa8, 0x23, 0x27, 0x19, 0xc3, 0x36, 0x9b, 0x11, 0x2c, 0xd7, 0x91, 0x8c, 0x45,
	0xce, 0xfc, 0x10, 0xd8, 0xad, 0x20, 0xa4, 0xc0, 0x6a, 0x3b, 0xce, 0x1e, 0xbb, 0x56, 0xd8, 0xa7,
	0xb7, 0xc8, 0x1c, 0x0a, 0xc8, 0x95, 0x32, 0xc8, 0x78, 0x01, 0x19, 0x5f, 0x43, 0xc6, 0x8b, 0x74,
	0x1e, 0x19, 0x43, 0xa7, 0x65, 0x51, 0x07, 0xe2, 0x50, 0x29, 0x03, 0x63, 0x33, 0x72, 0x19, 0xc7,
	0x16, 0x5a, 0xe4, 0x6d, 0x6e, 0x4c, 0x2e, 0x3b, 0x85, 0x11, 0x98, 0x8e, 0x57, 0x6a, 0x65, 0xc8,
	0xa1, 0xec, 0x05, 0xa7, 0x67, 0xb8, 0x44, 0x10, 0x77, 0xc4, 0x93, 0xc2, 0x86, 0x32, 0xe0, 0xe0,
	0xd4, 0xef, 0x3a, 0x3b, 0x0d, 0xc2, 0x25, 0x60, 0x7e, 0xa0, 0x45, 0xde, 0xf2, 0x83, 0xe9, 0x1d,
	0x70, 0x4b, 0x12, 0x52, 0x3e, 0x14, 0xaa, 0x1b, 0x4b, 0x27, 0x37, 0x1e, 0xe8, 0xc1, 0x65, 0x20,
	0x11, 0xfc, 0xd0, 0xcd, 0x1e, 0x06, 0x44, 0xf8, 0x0e, 0x01, 0x71, 0x7c, 0x3b, 0xe0, 0x6e, 0x38,
	0x5f, 0x21, 0x73, 0x00, 0xca, 0x86, 0x2a, 0x8f, 0xdb, 0x7d, 0xae, 0x5d, 0xa9, 0x3f, 0x9c, 0xf5,
	0x8d, 0x8f, 0xb8, 0xee, 0x4f, 0x10, 0x69, 0x9e, 0x18, 0x8b, 0x2f, 0xc6, 0x44, 0x7b, 0x3c, 0x31,
	0xcd, 0x3f, 0xaa, 0x91, 0xe9, 0xcd, 0x96, 0x8b, 0xa3, 0xbf, 0x5d, 0x9b, 0xbc, 0xf4, 0x3b, 0x11,
	0x46, 0xff, 0x1b, 0x6f, 0xbd, 0xd9, 0x3a, 0xa3, 0xbe, 0x27, 0xb5, 0x4d, 0x13, 0x23, 0x95, 0xe7,
	0x42, 0x67, 0x2a, 0x8d, 0x2b, 0xe8, 0xa5, 0x12, 0x74, 0x64, 0xea, 0x2e, 0xd2, 0x82, 0x49, 0x34,
	0x38, 0x71, 0x71, 0xd8, 0x6c, 0x13, 0x7a, 0xfa, 0xf4, 0xd1, 0x2b, 0xe4, 0x42, 0x0e, 0xe7, 0xce,
	0x2d, 0x8d, 0xfd, 0x71, 0x1a, 0x2c, 0xd0, 0x97, 0xc9, 0x6c, 0x2e, 0x3e, 0x28, 0x64, 0x2e, 0xda,
	0xe0, 0x3a, 0x70, 0x1d, 0xa6, 0xc3, 0xba, 0x6b, 0x6b, 0x15, 0xa6, 0xdf, 0xfc, 0x61, 0x8d, 0xcc,
	0x6e, 0x8d, 0xd2, 0xad, 0x27, 0x7b, 0x8e, 0xf7, 0xf3, 0x64, 0xba, 0xaf, 0xb4, 0xa9, 0xac, 0x7c,
	0xf9, 0x1b, 0x16, 0x36, 0x8e, 0x53, 0x8d, 0xdb, 0x89, 0x04, 0x6e, 0xf5, 0xa1, 0xf1, 0xc0, 0xb5,
	0x95, 0x44, 0x7e, 0xb5, 0xfd, 0xea, 0x43, 0xe3, 0xae, 0x6b, 0xa3, 0x37, 0x08, 0x29, 0xb2, 0x18,
	0x96, 0x1b, 0x54, 0x46, 0x74, 0x16, 0xce, 0xd8, 0x16, 0x30, 0xd6, 0x17, 0xc9, 0x4c, 0x17, 0xb4,
	0x14, 0x69, 0x34, 0x42, 0x07, 0x3d, 0x15, 0x8e, 0x1b, 0x9a, 0xdf, 0x9d, 0x27, 0xf3, 0xef, 0xb8,
	0x48, 0xe9, 0xb4, 0xfe, 0xc6, 0xd9, 0x40, 0xe8, 0x4b, 0xb8, 0x83, 0xcf, 0xe8, 0xc1, 0x49, 0x20,
	0x54, 0x06, 0xda, 0x31, 0x1a, 0xf2, 0xd7, 0x9a, 0x13, 0x81, 0x1e, 0xb2, 0x78, 0x0f, 0x0a, 0xc1,
	0x0f, 0xa9, 0x24, 0xc1, 0x33, 0xf0, 0x55, 0xd5, 0xd1, 0x3f, 0x1f, 0xc0, 0xf3, 0x84, 0xd4, 0xab,
	0xae, 0xeb, 0xc4, 0xe5, 0xdb, 0x17, 0xee, 0xae, 0xbd, 0xc9, 0x2a, 0x8e, 0x0a, 0x8b, 0xfa, 0x93,
	0x20, 0x21, 0x08, 0xab, 0x0c, 0x68, 0x77, 0xd2, 0x92, 0xa7, 0x7e, 0x9e, 0xb8, 0xa3, 0x7a, 0xa5,
	0x7d, 0x9f, 0x4c, 0xc3, 0x2e, 0xa3, 0x19, 0xd8, 0xb8, 0xf6, 0x2a, 0x0a, 0x79, 0x89, 0xde, 0x00,
	0x21, 0x5b, 0x4f, 0xf6, 0x26, 0xee, 0xf0, 0xbc, 0x84, 0x20, 0xbc, 0x14, 0xa7, 0x1a, 0x2b, 0x07,
	0x7b, 0x64, 0xbe, 0x7c, 0x0b, 0x61, 0xef, 0xed, 0x2e, 0x4d, 0x4e, 0x7e, 0x97, 0xc3, 0xb9, 0x51,
	0x80, 0x12, 0x7c, 0x44, 0x28, 0x07, 0x40, 0x7b, 0xa2, 0x78, 0x1c, 0xce, 0x95, 0x4d, 0x78, 0xa7,
	0xd9, 0x23, 0x75, 0x17, 0x11, 0x91, 0xe3, 0x34, 0x72, 0x2c, 0x4b, 0x11, 0x10, 0x71, 0x21, 0xe9,
	0xeb, 0x4a, 0x11, 0x43, 0xdc, 0x05, 0x00, 0x99, 0xbb, 0xac, 0x10, 0x8b, 0xb4, 0xa6, 0x9f, 0xab,
	0xa2, 0x67, 0x4f, 0xeb, 0xaa, 0x65, 0xb4, 0xca, 0xfa, 0x3c, 0x8d, 0xb1, 0xd4, 0xe7, 0x82, 0x2d,
	0x0a, 0xfa, 0x0a, 0xa9, 0x47, 0x2a, 0x8d, 0x8a, 0x3c, 0x47, 0x23, 0x9d, 0xc1, 0x9a, 0xc7, 0x67,
	0x51, 0xd0, 0x1b, 0xf4, 0x1e, 0x5e, 0x61, 0x96, 0x95, 0x58, 0x97, 0x6e, 0x0d, 0x84, 0xd6, 0xbc,
	0x27, 0x5c, 0x44, 0x53, 0x11, 0x18, 0x64, 0xc9, 0xc3, 0x24, 0x23, 0xd8, 0xc9, 0x31, 0x4b, 0xfa,
	0xa3, 0x73, 0xe4, 0xb9, 0x58, 0xb5, 0x53, 0x65, 0xda, 0x91, 0x1a, 0x40, 0x08, 0xd4, 0xed, 0x72,
	0xb2, 0x88, 0x8a, 0xa7, 0x37, 0xfe, 0xd3, 0xa2, 0xe2, 0x9f, 0xd4, 0xe8, 0xbf, 0xd5, 0xf0, 0xb1,
	0x83, 0x03, 0x14, 0xae, 0x72, 0xef, 0xc7, 0x55, 0xd6, 0xcd, 0x56, 0xf2, 0x55, 0x25, 0x9b, 0x72,
	0x5e, 0x4b, 0x6a, 0x0b, 0xfe, 0x0b, 0x2d, 0xba, 0x85, 0xb5, 0xf2, 0x58, 0x74, 0x8a, 0x5e, 0x4f,
	0xa6, 0x3d, 0x9b, 0x42, 0xbf, 0xc5, 0xf6, 0x84, 0x31, 0x10, 0x0c, 0x70, 0xc1, 0x10, 0x21, 0x63,
	0x65, 0xaf, 0x52, 0x59, 0xf2, 0x82, 0x58, 0x57, 0x8a, 0x24, 0xd6, 0x2c, 0x91, 0x87, 0xee, 0x32,
	0x17, 0x50, 0x76, 0xf5, 0xc1, 0x89, 0x2d, 0x93, 0x0d, 0xf8, 0xc8, 0x15, 0x03, 0xc1, 0xd8, 0xaa,
	0x75, 0xc9, 0x58, 0xea, 0x28, 0x51, 0x98, 0x6f, 0xc8, 0x6e, 0x55, 0x84, 0xd4, 0xac, 0x48, 0xf1,
	0xe2, 0x44, 0xc4, 0x41, 0x78, 0x2d, 0x56, 0x4f, 0x94, 0xd9, 0x74, 0x13, 0x6d, 0xf9, 0x79, 0xd2,
	0xaf, 0x9c, 0xae, 0x4b, 0xd5, 0x71, 0x8f, 0xde, 0xc0, 0x15, 0x5b, 0xa7, 0x6b, 0xff, 0x73, 0x5d,
	0x8a, 0x47, 0x91, 0xc8, 0x4c, 0xb5, 0x2e, 0x75, 0xb2, 0x12, 0xf5, 0x3e, 0xb9, 0x14, 0x8f, 0xd2,
	0x76, 0x9c, 0x6a, 0x04, 0x1c, 0xf5, 0xf5, 0xcb, 0xbe, 0xb0, 0x5c, 0xf1, 0xa7, 0x63, 0x6b, 0x1e,
	0xa3, 0x3d, 0x6d, 0x38, 0x1a, 0x9d, 0x60, 0xf1, 0x28, 0x65, 0x71, 0x5a, 0xb9, 0x47, 0xbf, 0x18,
	0x8f, 0xd2, 0xad, 0x54, 0xd3, 0x98, 0xcc, 0x22, 0x12, 0x6b, 0xf7, 0x05, 0x8f, 0x45, 0xee, 0xb0,
	0x88, 0x2f, 0xb6, 0xbc, 0xf9, 0x08, 0x5b, 0x59, 0x2c, 0xba, 0xb2, 0x52, 0x88, 0xc4, 0x11, 0xd5,
	0x98, 0x8d, 0x17, 0x7e, 0x62, 0xa0, 0x20, 0xc7, 0xb1, 0x5e, 0x2a, 0xac, 0x23, 0x91, 0x1d, 0x4f,
	0x7f, 0xad, 0x46, 0x5e, 0xf1, 0x15, 0x5e, 0x87, 0x54, 0x07, 0x2a, 0x95, 0x46, 0x41, 0x72, 0x5b,
	0xb1, 0xb5, 0x79, 0x84, 0xee, 0x9f, 0x44, 0xe9, 0xb7, 0xe9, 0xaa, 0xbd, 0x29, 0xc7, 0xa0, 0x8d,
	0x53, 0xaa, 0x58, 0x78, 0x39, 0x7a, 0x6c, 0x71, 0x41, 0xe8, 0x2b, 0xc4, 0xd6, 0xc3, 0x3e, 0x2e,
	0x69, 0xc6, 0x9b, 0xf5, 0x75, 0x52, 0xcf, 0x8b, 0xb4, 0xcd, 0x6d, 0x68, 0x71, 0xa0, 0xe4, 0xcb,
	0x28, 0xef, 0x0b, 0xf4, 0x29, 0xc8, 0x43, 0xd0, 0xe1, 0x4a, 0x38, 0x55, 0x7f, 0x65, 0xb3, 0xd7,
	0xbc, 0x48, 0x19, 0xd7, 0x58, 0x02, 0x75, 0x6b, 0x3c, 0x7e, 0x9c, 0x62, 0xfb, 0x18, 0x67, 0xb1,
	0xec, 0x76, 0x05, 0x9c, 0x34, 0x64, 0x16, 0x84, 0x33, 0x79, 0x91, 0xb6, 0x30, 0x6e, 0xd1, 0x8c,
	0x2c, 0xda, 0x72, 0xb1, 0x88, 0xdd, 0x42, 0x68, 0xc4, 0x56, 0xe7, 0xc7, 0x9e, 0xf3, 0x81, 0xeb,
	0x3f, 0x75, 0xac, 0xb5, 0x45, 0xa5, 0x52, 0xb3, 0x58, 0x64, 0x89, 0x1a, 0x0d, 0x40, 0x42, 0x59,
	0xc2, 0xbc, 0xbd, 0xb6, 0xb6, 0xb6, 0xb6, 0x12, 0x2e, 0x78, 0xf6, 0x2e, 0xca, 0xd0, 0xd7, 0x08,
	0xc5, 0x9a, 0x51, 0xa6, 0x54, 0x82, 0xd5, 0x75, 0xb4, 0xd0, 0x25, 0x90, 0x19, 0x2e, 0x40, 0xcf,
	0xae, 0x52, 0xc9, 0x63, 0x7e, 0x8c, 0x96, 0x76, 0x8a, 0x18, 0x4b, 0xf1, 0xf4, 0x14, 0xf1, 0x33,
	0x2e, 0x4d, 0xf3, 0x1b, 0x53, 0x64, 0x61, 0x8b, 0x1b, 0x8e, 0x77, 0xbe, 0x2e, 0x3c, 0x6a, 0x32,
	0x2f, 0x07, 0x59, 0x22, 0x40, 0x37, 0x3c, 0x5d, 0x2e, 0x3e, 0xbe, 0x8b, 0xb3, 0x7b, 0x40, 0xd7,
	0x4e, 0x3e, 0xb9, 0x88, 0x3d, 0x03, 0x36, 0x39, 0x0e, 0x16, 0xb4, 0xd0, 0x22, 0x58, 0x5f, 0x7a,
	0x47, 0x26, 0x62, 0x83, 0x6b, 0x01, 0xa2, 0xf6, 0x80, 0x32, 0x3c, 0x21, 0x82, 0xee, 0x90, 0x69,
	0xff, 0x4a, 0xc2, 0x55, 0xa0, 0x26, 0x5f, 0x3a, 0xf9, 0x1a, 0xcc, 0xb2, 0xca, 0xd1, 0xf9, 0xae,
	0x78, 0xb7, 0x54, 0x0a, 0x0f, 0xc2, 0x92, 0x03, 0x7d, 0x9f, 0x5c, 0xee, 0xca, 0x44, 0x60, 0x7b,
	0x3b, 0x96, 0xb9, 0x88, 0x8c, 0xca, 0x7d, 0xe9, 0x68, 0x05, 0x19, 0xbf, 0x42, 0x5f, 0xc6, 0xf8,
	0xe6, 0xc2, 0x86, 0xd5, 0xdf, 0x1e, 0x60, 0x11, 0xe3, 0x85, 0xb6, 0x0e, 0x42, 0x5a, 0x72, 0xd9,
	0xf2, 0x4c, 0xe8, 0xab, 0x64, 0x7e, 0x30, 0xd2, 0x1f, 0x24, 0x63, 0x60, 0x63, 0x11, 0xc9, 0x1c,
	0xb6, 0x96, 0xc8, 0xa6, 0x24, 0x2b, 0xa1, 0xcd, 0x85, 0x0a, 0x59, 0x89, 0x6d, 0x4a, 0x32, 0x98,
	0x47, 0x87, 0x6b, 0x17, 0x1f, 0x1d, 0xd9, 0x96, 0x6b, 0x04, 0x70, 0x66, 0xc9, 0x6c, 0xcc, 0xb5,
	0xc1, 0x2f, 0xac, 0x63, 0x9b, 0xad, 0xaf, 0xd3, 0x7b, 0xe4, 0xba, 0x25, 0x39, 0x5d, 0xd0, 0xc2,
	0xc0, 0x16, 0x5e, 0xc5, 0xee, 0x93, 0x65, 0xa9, 0xe6, 0x37, 0xcf, 0x13, 0xf2, 0x98, 0xcb, 0xc4,
	0xed, 0xbe, 0x20, 0x53, 0xdd, 0x5c, 0x0d, 0xdc, 0x9e, 0x97, 0x8f, 0x04, 0x9e, 0x95, 0xb5, 0x2f,
	0x31, 0xe0, 0x32, 0xf1, 0x67, 0xa9, 0x23, 0x6c, 0x8c, 0x80, 0x21, 0x78, 0xa2, 0x20, 0x90, 0x54,
	0xf2, 0x54, 0x2c, 0x96, 0x41, 0x6e, 0xeb, 0x17, 0x2b, 0x08, 0x91, 0x3d, 0xfd, 0x14, 0xb9, 0xe8,
	0xa6, 0x62, 0x77, 0xbb, 0xcc, 0x11, 0x3d, 0xf8, 0x72, 0xb6, 0xb5, 0xf7, 0x78, 0x7f, 0xb7, 0xc4,
	0x2e, 0x6e, 0x08, 0xbd, 0x5f, 0x5e, 0xe1, 0x23, 0x7e, 0x3a, 0x8f, 0xae, 0xfa, 0x25, 0xe4, 0xf0,
	0x1c, 0xbd, 0x8e, 0xf8, 0xe9, 0xf4, 0x70, 0x7f, 0x43, 0x8f, 0x40, 0xea, 0x11, 0x99, 0x9b, 0x50,
	0xcb, 0x41, 0x9f, 0x52, 0x0b, 0x2c, 0xc5, 0x01, 0x9a, 0x18, 0x67, 0xd8, 0x82, 0x15, 0x69, 0x0c,
	0x5a, 0xcc, 0x42, 0x63, 0xb9, 0xcf, 0xef, 0x3a, 0x4e, 0x93, 0xdb, 0x3c, 0x4e, 0xac, 0x7d, 0xfb,
	0x29, 0x6e, 0x00, 0xf4, 0x1d, 0x33, 0x6f, 0x0d, 0xcd, 0x3f, 0x3b, 0x4f, 0xe6, 0x76, 0x14, 0x46,
	0x51, 0xb7, 0x1d, 0x05, 0x59, 0x54, 0x85, 0xc9, 0x0a, 0x53, 0x31, 0x63, 0xbb, 0x35, 0x9f, 0x43,
	0x09, 0x5b, 0x74, 0x63, 0xe2, 0x7c, 0x18, 0x55, 0x5e, 0x10, 0xf7, 0x9c, 0x15, 0x9f, 0xd8, 0x16,
	0xdb, 0x9d, 0xaa, 0x0a, 0x45, 0xb8, 0x60, 0x65, 0x8c, 0x8d, 0xfc, 0x43, 0xf2, 0x82, 0x16, 0x19,
	0xcf, 0x01, 0x19, 0x26, 0xaa, 0xa7, 0xdb, 0x99, 0xc8, 0x11, 0x58, 0xa8, 0x54, 0xa4, 0x16, 0xb1,
	0x4e, 0x8f, 0xaf, 0xe0, 0xad, 0x27, 0xbd, 0xc5, 0x04, 0x8f, 0xfa, 0xac, 0xa4, 0xb2, 0xa1, 0x11,
	0xa4, 0xc0, 0xd4, 0x99, 0xe7, 0x87, 0x32, 0x83, 0xb0, 0xe1, 0x7f, 0xef, 0xa8, 0x9e, 0xde, 0x15,
	0xf9, 0xa6, 0x1f, 0x06, 0x2b, 0xea, 0x1f, 0xf8, 0xd9, 0x77, 0x9a, 0x76, 0x7f, 0xcb, 0x15, 0x7d,
	0xa4, 0x86, 0x4c, 0x75, 0x8d, 0xc0, 0xc9, 0x22, 0xa5, 0xb5, 0x33, 0x37, 0x97, 0x59, 0x3f, 0x78,
	0x5f, 0x0e, 0x04, 0x3d, 0x24, 0x97, 0xc0, 0x07, 0xf2, 0x9e, 0xdd, 0xe2, 0xa9, 0x8d, 0x10, 0xd9,
	0xec, 0xd0, 0xfb, 0x3e, 0xa2, 0xf3, 0x1e, 0x3a, 0x32, 0xd4, 0x1d, 0x9f, 0xc0, 0x2c, 0x83, 0xb7,
	0x2a, 0x4b, 0x7a, 0xb1, 0x48, 0x04, 0x78, 0x72, 0xde, 0x35, 0xc2, 0x55, 0x66, 0x41, 0xa9, 0x95,
	0x60, 0x7d, 0xfa, 0xce, 0xed, 0xbb, 0x77, 0xee, 0xad, 0xad, 0xad, 0x85, 0x17, 0x07, 0xfc, 0xb8,
	0xd5, 0x13, 0xcd, 0x9f, 0xd4, 0xc8, 0xe2, 0x38, 0x62, 0xb9, 0x1d, 0xfc, 0x83, 0xb3, 0xb3, 0x8d,
	0xaf, 0xa1, 0x1e, 0x47, 0xd4, 0x9c, 0xcc, 0x36, 0x2a, 0x61, 0xf1, 0x7f, 0xa9, 0xfa, 0xba, 0x71,
	0x3a, 0x19, 0x29, 0xe1, 0xf9, 0x44, 0x32, 0x52, 0x51, 0x0d, 0x68, 0x2b, 0x99, 0x49, 0xb3, 0x4f,
	0xe6, 0x5b, 0x85, 0x51, 0x0f, 0x8e, 0x45, 0xe4, 0xe6, 0x4d, 0xc9, 0x14, 0xcf, 0x7b, 0x47, 0x8d,
	0x1a, 0xe0, 0x81, 0x10, 0xbf, 0xd3, 0x0d, 0x72, 0xc5, 0x87, 0xfa, 0x36, 0xe2, 0x11, 0x84, 0xea,
	0xba, 0x71, 0x0e, 0x93, 0xfd, 0x05, 0x07, 0x89, 0x7c, 0xa8, 0x0f, 0x2f, 0x7b, 0xe2, 0xad, 0x31,
	0x6d, 0xf3, 0x6f, 0xa7, 0xc8, 0x95, 0xf2, 0xa1, 0x27, 0x00, 0x21, 0xed, 0x04, 0xbe, 0x4c, 0x66,
	0xf1, 0xdd, 0xec, 0x80, 0xa7, 0xbc, 0x27, 0x72, 0x5c, 0xe7, 0xe9, 0xb0, 0x0e, 0x6d, 0x8f, 0x6d,
	0x13, 0xbd, 0x49, 0x16, 0x90, 0x24, 0x96, 0x3a, 0xe3, 0x26, 0xea, 0x3b, 0xf7, 0x33, 0x1d, 0xce,
	0x43, 0xf3, 0x56, 0xd9, 0x0a, 0x84, 0xda, 0x70, 0xa3, 0xdb, 0x91, 0x4a, 0x12, 0x3c, 0x13, 0x2e,
	0x1f, 0x9e, 0xc7, 0xe6, 0x4d, 0xdf, 0x4a, 0x5f, 0x23, 0x4b, 0xce, 0x15, 0x8d, 0x17, 0x07, 0x2d,
	0x6d, 0x3a, 0x5c, 0xb4, 0x1d, 0x63, 0x83, 0xa0, 0x2b, 0xc4, 0xb5, 0x55, 0xe0, 0xd2, 0x05, 0xa4,
	0x5d, 0xb0, 0xed, 0x63, 0x90, 0x73, 0x7d, 0x8c, 0x17, 0x2f, 0x22, 0x85, 0x07, 0x7b, 0x1f, 0x75,
	0xf5, 0xdb, 0x5c, 0xf5, 0x6c, 0xb4, 0xbc, 0x84, 0xdd, 0x93, 0x8d, 0x10, 0x56, 0x34, 0x4f, 0xa5,
	0x19, 0xb5, 0xa3, 0xbe, 0x88, 0x0e, 0x45, 0x8e, 0x31, 0x60, 0x3a, 0x9c, 0xb3, 0xad, 0x9b, 0xb6,
	0x91, 0xbe, 0x44, 0xea, 0x47, 0x5d, 0xdd, 0x76, 0x88, 0x12, 0xf3, 0x92, 0xe9, 0x90, 0x1c, 0x75,
	0xb5, 0x5b, 0x5a, 0x58, 0x53, 0xac, 0x01, 0xf9, 0x35, 0x25, 0x76, 0x4d, 0xa1, 0xcd, 0xaf, 0xe9,
	0x6b, 0x64, 0xe9, 0x14, 0x1c, 0x44, 0xf4, 0x3c, 0xed, 0xef, 0x5c, 0x2a, 0x2b, 0xf0, 0x09, 0x42,
	0x2b, 0xa0, 0xd1, 0xcb, 0x9d, 0x45, 0xea, 0xa5, 0x71, 0x8f, 0x17, 0x7f, 0x83, 0x10, 0x9e, 0x49,
	0x1f, 0xf4, 0xe6, 0x90, 0x6c, 0x86, 0x67, 0xd2, 0x85, 0xbc, 0x9b, 0x64, 0xc1, 0x83, 0x3b, 0x4f,
	0x33, 0x6f, 0x77, 0xc9, 0x37, 0x3b, 0xc2, 0x1b, 0x84, 0xf4, 0x8a, 0x92, 0xcf, 0x82, 0xe5, 0xd3,
	0x2b, 0x1c, 0x9f, 0xe6, 0x5f, 0xcf, 0x92, 0x8b, 0xce, 0x88, 0xde, 0x19, 0x3f, 0x91, 0x98, 0x3e,
	0xf3, 0x89, 0xc4, 0x8b, 0x78, 0x32, 0xae, 0xd1, 0x2b, 0x4f, 0x4f, 0x3f, 0x8f, 0xa8, 0x3c, 0x87,
	0xf8, 0x1c, 0xb9, 0x68, 0xd1, 0x9b, 0x7b, 0x70, 0xec, 0xe1, 0x7e, 0xf5, 0x76, 0x6f, 0xe3, 0x06,
	0xf2, 0xba, 0x4e, 0xaf, 0x6e, 0xba, 0x2b, 0xb6, 0xc9, 0x37, 0x50, 0x8e, 0x03, 0xdd, 0x25, 0xe7,
	0x5b, 0xbb, 0xdb, 0x68, 0xa9, 0xf5, 0xf5, 0x45, 0x7f, 0x48, 0xfc, 0xed, 0xf1, 0x38, 0x69, 0x98,
	0x7c, 0x84, 0x02, 0x39, 0x19, 0x5e, 0x3c, 0xb4, 0x76, 0x2b, 0xf7, 0x38, 0x21, 0xb0, 0xa2, 0x4d,
	0x72, 0xfe, 0xe1, 0xc1, 0x36, 0x9a, 0xf4, 0x98, 0x63, 0x79, 0x53, 0x14, 0x42, 0x27, 0x7d, 0x89,
	0x9c, 0xdb, 0x6c, 0xa1, 0x29, 0x8f, 0x4f, 0xa6, 0xaf, 0x81, 0x85, 0xe7, 0x36, 0x5b, 0xf4, 0x36,
	0x99, 0xf6, 0x85, 0x15, 0xb4, 0xe2, 0xfa, 0xfa, 0x55, 0x47, 0x36, 0x59, 0x6f, 0x09, 0x4b, 0x32,
	0xfa, 0x3a, 0x99, 0x29, 0xd1, 0x26, 0xda, 0x75, 0x7d, 0xfd, 0x5a, 0xf9, 0xc0, 0x66, 0x02, 0x85,
	0x86, 0x63, 0x42, 0x3a, 0xac, 0xbc, 0xb8, 0x47, 0x1b, 0x1d, 0xeb, 0x5c, 0xb6, 0x8f, 0xff, 0xda,
	0x60, 0x13, 0x65, 0x99, 0x12, 0x41, 0x94, 0x2f, 0xcc, 0xf0, 0xb1, 0x14, 0xa0, 0x7b, 0xe4, 0x5a,
	0xbe, 0x40, 0x2b, 0xdf, 0x4e, 0xb9, 0xc0, 0x54, 0x79, 0xdd, 0xff, 0x2a, 0x99, 0x02, 0x64, 0x84,
	0xd6, 0x5c, 0x5f, 0x5f, 0x72, 0x32, 0xc7, 0x60, 0x29, 0xc4, 0x6e, 0x1a, 0x90, 0x4b, 0x2e, 0x68,
	0x37, 0xae, 0x4f, 0xbc, 0x2e, 0x9f, 0x08, 0xe5, 0xa1, 0x27, 0xa2, 0xf7, 0xd1, 0xc6, 0x3a, 0x4a,
	0x0b, 0x7c, 0xcb, 0x36, 0x3d, 0x0e, 0x6d, 0x0f, 0x52, 0xde, 0x49, 0xf0, 0xe5, 0x0d, 0xf4, 0x42,
	0xec, 0x84, 0x01, 0xcc, 0x46, 0x67, 0x6b, 0x5d, 0xd0, 0x41, 0xbf, 0x7f, 0x8e, 0x2c, 0xf0, 0xc2,
	0xa8, 0x48, 0xe4, 0xa6, 0x1d, 0xab, 0x01, 0x97, 0x29, 0xbe, 0x57, 0x9a, 0xd9, 0xf8, 0x77, 0x9b,
	0xe3, 0xff, 0xb8, 0x46, 0xff, 0xb5, 0xb6, 0x85, 0x1d, 0x0e, 0x85, 0xa3, 0x3d, 0xf8, 0x31, 0x9a,
	0x2d, 0x27, 0xc2, 0x68, 0x91, 0x46, 0xf9, 0x28, 0x33, 0x2b, 0xd5, 0x52, 0x64, 0x07, 0xd2, 0x21,
	0xad, 0x92, 0x23, 0xd4, 0xc4, 0x81, 0xec, 0x32, 0x85, 0x3a, 0x92, 0x9c, 0x6d, 0x3d, 0xd9, 0x73,
	0xcf, 0x5f, 0xdc, 0x5f, 0x4c, 0x54, 0xde, 0xd5, 0x74, 0x94, 0xab, 0x5e, 0x3e, 0x3c, 0xd8, 0xc6,
	0x24, 0xbe, 0x1c, 0x89, 0xf1, 0x14, 0xf4, 0x80, 0xc8, 0xa1, 0xd9, 0x1b, 0x6b, 0xd8, 0xfd, 0xfa,
	0xeb, 0x77, 0xd8, 0x27, 0xaa, 0xe5, 0x85, 0xca, 0xd3, 0xcc, 0x52, 0x1f, 0x5f, 0x15, 0x52, 0xf9,
	0x80, 0xb1, 0xbe, 0x31, 0x99, 0x7e, 0x6b, 0x75, 0xf5, 0xc4, 0xf4, 0x57, 0xc3, 0x79, 0xdf, 0x62,
	0xa7, 0x4d, 0xbf, 0x48, 0x2e, 0x97, 0x34, 0xf6, 0x3f, 0x1e, 0xf5, 0x45, 0xe3, 0xda, 0xd9, 0x65,
	0x23, 0x8b, 0xff, 0xfd, 0x80, 0x6a, 0xf1, 0x55, 0x07, 0xe1, 0x92, 0x6f, 0xdf, 0x84, 0x7f, 0xc0,
	0x86, 0xa6, 0x84, 0x8c, 0xdd, 0x1a, 0x3e, 0x62, 0x19, 0xbf, 0x2b, 0x39, 0x09, 0x01, 0x36, 0xee,
	0xa2, 0xb4, 0x55, 0xfa, 0x09, 0x87, 0xa2, 0x5d, 0x38, 0xcd, 0x72, 0x35, 0x10, 0xa6, 0x2f, 0x0a,
	0x7d, 0x66, 0xd0, 0x0f, 0x2b, 0x12, 0xe8, 0xaf, 0x58, 0x4f, 0x68, 0x3d, 0x84, 0x7b, 0xc7, 0xe2,
	0x8f, 0xce, 0x89, 0x47, 0x03, 0xe3, 0x07, 0x57, 0xf6, 0x91, 0x8f, 0x4b, 0x69, 0xfc, 0xbd, 0xb5,
	0xbb, 0x7d, 0x77, 0x1d, 0x6e, 0xfb, 0x52, 0x7f, 0x53, 0x99, 0xa8, 0x0e, 0x4f, 0x1c, 0x4d, 0x80,
	0xbe, 0xd6, 0x39, 0xc6, 0xdf, 0xac, 0x91, 0x69, 0x58, 0x06, 0x71, 0x2c, 0x22, 0x7c, 0x73, 0x34,
	0x3e, 0xee, 0x93, 0x81, 0x7f, 0xe3, 0x8b, 0x28, 0xfe, 0x29, 0xdd, 0xaf, 0x3e, 0xba, 0xaa, 0x16,
	0xd2, 0x12, 0x5e, 0xa4, 0x51, 0xbf, 0xfa, 0x50, 0xbe, 0x2c, 0x7a, 0xf7, 0xe4, 0x91, 0x48, 0xcb,
	0x17, 0xf5, 0x89, 0x4c, 0xed, 0x9e, 0x80, 0x7b, 0x8d, 0x00, 0xf4, 0x04, 0x61, 0xa9, 0x04, 0xdd,
	0x22, 0x0b, 0xe3, 0xbf, 0x5f, 0x41, 0x20, 0x80, 0x0f, 0x6e, 0xea, 0xeb, 0x2f, 0x38, 0xbd, 0xce,
	0x42, 0x09, 0xe1, 0xbc, 0x9e, 0x68, 0xa5, 0xbb, 0x65, 0x2e, 0x61, 0x46, 0x99, 0x68, 0x7c, 0x64,
	0xf2, 0x75, 0xc1, 0xfe, 0x28, 0x13, 0x95, 0xc7, 0xc0, 0xcb, 0xf8, 0xf0, 0xf3, 0x96, 0x7f, 0xd9,
	0x77, 0xcb, 0xbd, 0x37, 0x5d, 0xf1, 0xb9, 0x05, 0x90, 0x6f, 0xbc, 0xfe, 0xfe, 0xfa, 0x70, 0x38,
	0x0c, 0xec, 0x93, 0x87, 0x58, 0x1c, 0x07, 0x91, 0x1a, 0xac, 0xf6, 0x54, 0xc2, 0xd3, 0xde, 0x6a,
	0xf5, 0x1d, 0xc4, 0xaa, 0x5d, 0x65, 0xfb, 0x97, 0x5d, 0x9d, 0x8b, 0xf8, 0x71, 0xe7, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x71, 0x03, 0xb4, 0x5b, 0x37, 0x36, 0x00, 0x00,
}
