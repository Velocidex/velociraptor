syntax = "proto3";

import "www.velocidex.com/golang/velociraptor/proto/semantic.proto";
import "www.velocidex.com/golang/velociraptor/actions/proto/vql.proto";
import "www.velocidex.com/golang/velociraptor/crypto/proto/jobs.proto";

package proto;

message Artifacts {
    repeated string names = 1 [(sem_type) = {
            description: "The artifacts to launch.",
        }];
}

message ArtifactParameters {
    repeated VQLEnv env = 3 [(sem_type) = {
            description: "Environment variables to be provided for the query.",
            friendly_name: "Params",
        }];
}


message ArtifactCollectorArgs {
    Artifacts artifacts = 1 [(sem_type) = {
            description: "The artifacts to launch.",
            friendly_name: "Launch",
        }];

    ArtifactParameters parameters = 5 [(sem_type) = {
            description: "Parameters to the artifacts.",
            friendly_name: "Parameters",
        }];

    float ops_per_second = 6 [(sem_type) = {
            description: "Operations per second (Throttling).",
            friendly_name: "Ops Per Second",
            default: "1000000",
        }];

    uint64 timeout = 7 [(sem_type) = {
            description: "Number of seconds to run before cancelling the query.",
            friendly_name: "Timeout",
            default: "600",
        }];

    bool allow_custom_overrides = 8 [(sem_type) = {
            description: "If true we will use a custom artifact if present instead of the named artifact.",
        }];
}

message ArtifactCollectorRequest {
    string creator = 1;
    string client_id = 2;

    ArtifactCollectorArgs request = 3;
}

message ArtifactCollectorResponse {
    string flow_id = 1;
    ArtifactCollectorRequest request =2;
}

message ArtifactUploadedFileInfo {
    string name = 1;
    string vfs_path = 2;
    uint64 size = 3;
}

// This context is serialized into the data store.
message ArtifactCollectorContext {
    // Where we are stored in the data store.
    string urn = 5;
    string session_id = 13;
    ArtifactCollectorRequest request = 11;

    // If an error occurs this is the backtrace.
    string backtrace = 1;
    uint64 create_time = 3;
    uint64 active_time = 17;
    uint64 kill_timestamp = 4;

    // Uploads are now permanently stored in a csv file. This field is
    // never serialized - it is just a place holder during processing.
    repeated ArtifactUploadedFileInfo uploaded_files = 24;

    // A total count of files uploaded by this query.
    uint64 total_uploaded_files = 23;
    uint64 total_expected_uploaded_bytes = 25;
    uint64 total_uploaded_bytes = 26;

    // Logs are stored in their own CSV file. This is just a
    // placeholder during processing.
    repeated LogMessage logs = 20;

    enum State {
        UNSET = 0;
        RUNNING = 1;
        TERMINATED = 2;
        ERROR = 3;   // Flows which raise are marked as having an error.
        ARCHIVED = 4;  // Archived flows do not show up in the UI
    };

    State state = 14;

    string status = 15 [(sem_type) = {
            description: "Contents of an error status sent by the client."
        }];

    bool user_notified = 16;

    // Some of the collected artifacts may not have results.
    repeated string artifacts_with_results = 22 [(sem_type) = {
            description: "The full path to the artifacts with their results. "
            "This takes the form artifact name/source name."
        }];

    bool dirty = 2;
}


// This is stored in the ArtifactCollector state.
message ClientEventTable {
    uint64 version = 1;
    ArtifactCollectorArgs artifacts = 2;
}