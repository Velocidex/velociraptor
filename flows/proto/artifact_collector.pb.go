// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: artifact_collector.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	proto "www.velocidex.com/golang/velociraptor/actions/proto"
	proto1 "www.velocidex.com/golang/velociraptor/crypto/proto"
	_ "www.velocidex.com/golang/velociraptor/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArtifactCollectorContext_State int32

const (
	ArtifactCollectorContext_UNSET     ArtifactCollectorContext_State = 0
	ArtifactCollectorContext_RUNNING   ArtifactCollectorContext_State = 1 // Flow is scheduled and active. If the client
	ArtifactCollectorContext_FINISHED  ArtifactCollectorContext_State = 2 // Flow completed normally.
	ArtifactCollectorContext_ERROR     ArtifactCollectorContext_State = 3 // Flows which raise are marked as having an error.
	ArtifactCollectorContext_ARCHIVED  ArtifactCollectorContext_State = 4 // Archived flows do not show up in the UI
	ArtifactCollectorContext_CANCELLED ArtifactCollectorContext_State = 5 // Cancelled collection were actively cancelled.
)

// Enum value maps for ArtifactCollectorContext_State.
var (
	ArtifactCollectorContext_State_name = map[int32]string{
		0: "UNSET",
		1: "RUNNING",
		2: "FINISHED",
		3: "ERROR",
		4: "ARCHIVED",
		5: "CANCELLED",
	}
	ArtifactCollectorContext_State_value = map[string]int32{
		"UNSET":     0,
		"RUNNING":   1,
		"FINISHED":  2,
		"ERROR":     3,
		"ARCHIVED":  4,
		"CANCELLED": 5,
	}
)

func (x ArtifactCollectorContext_State) Enum() *ArtifactCollectorContext_State {
	p := new(ArtifactCollectorContext_State)
	*p = x
	return p
}

func (x ArtifactCollectorContext_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactCollectorContext_State) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_collector_proto_enumTypes[0].Descriptor()
}

func (ArtifactCollectorContext_State) Type() protoreflect.EnumType {
	return &file_artifact_collector_proto_enumTypes[0]
}

func (x ArtifactCollectorContext_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactCollectorContext_State.Descriptor instead.
func (ArtifactCollectorContext_State) EnumDescriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{5, 0}
}

type ArtifactParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env []*proto.VQLEnv `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
}

func (x *ArtifactParameters) Reset() {
	*x = ArtifactParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_collector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactParameters) ProtoMessage() {}

func (x *ArtifactParameters) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_collector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactParameters.ProtoReflect.Descriptor instead.
func (*ArtifactParameters) Descriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{0}
}

func (x *ArtifactParameters) GetEnv() []*proto.VQLEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

type ArtifactSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifact   string              `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Parameters *ArtifactParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ArtifactSpec) Reset() {
	*x = ArtifactSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_collector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactSpec) ProtoMessage() {}

func (x *ArtifactSpec) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_collector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactSpec.ProtoReflect.Descriptor instead.
func (*ArtifactSpec) Descriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{1}
}

func (x *ArtifactSpec) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *ArtifactSpec) GetParameters() *ArtifactParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ArtifactCollectorArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// If set we send an urgent request to the client.
	Urgent bool `protobuf:"varint,21,opt,name=urgent,proto3" json:"urgent,omitempty"`
	// Deprecated: Old way of specifying the artifacts consist of
	// shared parameters within a list of artifacts (i.e. all
	// artifacts share same scope).
	Artifacts []string `protobuf:"bytes,2,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// New way of specifying artifacts.
	Specs        []*ArtifactSpec `protobuf:"bytes,24,rep,name=specs,proto3" json:"specs,omitempty"`
	OpsPerSecond float32         `protobuf:"fixed32,6,opt,name=ops_per_second,json=opsPerSecond,proto3" json:"ops_per_second,omitempty"`
	// Resource limits on this collection.
	Timeout uint64 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Total number of rows we allow to collect.
	MaxRows uint64 `protobuf:"varint,22,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	// Total bytes allowed to upload
	MaxUploadBytes       uint64 `protobuf:"varint,23,opt,name=max_upload_bytes,json=maxUploadBytes,proto3" json:"max_upload_bytes,omitempty"`
	AllowCustomOverrides bool   `protobuf:"varint,8,opt,name=allow_custom_overrides,json=allowCustomOverrides,proto3" json:"allow_custom_overrides,omitempty"`
	// Note: Event artifacts may produce several VQLCollectorArgs, one
	// for each artifact/source because Event Artifacts are
	// asyncronous and blocking and need to run each query in
	// parallel.
	CompiledCollectorArgs []*proto.VQLCollectorArgs `protobuf:"bytes,20,rep,name=compiled_collector_args,json=compiledCollectorArgs,proto3" json:"compiled_collector_args,omitempty"`
}

func (x *ArtifactCollectorArgs) Reset() {
	*x = ArtifactCollectorArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_collector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactCollectorArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactCollectorArgs) ProtoMessage() {}

func (x *ArtifactCollectorArgs) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_collector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactCollectorArgs.ProtoReflect.Descriptor instead.
func (*ArtifactCollectorArgs) Descriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{2}
}

func (x *ArtifactCollectorArgs) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ArtifactCollectorArgs) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ArtifactCollectorArgs) GetUrgent() bool {
	if x != nil {
		return x.Urgent
	}
	return false
}

func (x *ArtifactCollectorArgs) GetArtifacts() []string {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *ArtifactCollectorArgs) GetSpecs() []*ArtifactSpec {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *ArtifactCollectorArgs) GetOpsPerSecond() float32 {
	if x != nil {
		return x.OpsPerSecond
	}
	return 0
}

func (x *ArtifactCollectorArgs) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ArtifactCollectorArgs) GetMaxRows() uint64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *ArtifactCollectorArgs) GetMaxUploadBytes() uint64 {
	if x != nil {
		return x.MaxUploadBytes
	}
	return 0
}

func (x *ArtifactCollectorArgs) GetAllowCustomOverrides() bool {
	if x != nil {
		return x.AllowCustomOverrides
	}
	return false
}

func (x *ArtifactCollectorArgs) GetCompiledCollectorArgs() []*proto.VQLCollectorArgs {
	if x != nil {
		return x.CompiledCollectorArgs
	}
	return nil
}

type ArtifactCollectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId  string                 `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	Request *ArtifactCollectorArgs `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *ArtifactCollectorResponse) Reset() {
	*x = ArtifactCollectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_collector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactCollectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactCollectorResponse) ProtoMessage() {}

func (x *ArtifactCollectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_collector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactCollectorResponse.ProtoReflect.Descriptor instead.
func (*ArtifactCollectorResponse) Descriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{3}
}

func (x *ArtifactCollectorResponse) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *ArtifactCollectorResponse) GetRequest() *ArtifactCollectorArgs {
	if x != nil {
		return x.Request
	}
	return nil
}

type ArtifactUploadedFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VfsPath    string `protobuf:"bytes,2,opt,name=vfs_path,json=vfsPath,proto3" json:"vfs_path,omitempty"`
	Size       uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	StoredSize uint64 `protobuf:"varint,4,opt,name=stored_size,json=storedSize,proto3" json:"stored_size,omitempty"`
}

func (x *ArtifactUploadedFileInfo) Reset() {
	*x = ArtifactUploadedFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_collector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactUploadedFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactUploadedFileInfo) ProtoMessage() {}

func (x *ArtifactUploadedFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_collector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactUploadedFileInfo.ProtoReflect.Descriptor instead.
func (*ArtifactUploadedFileInfo) Descriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{4}
}

func (x *ArtifactUploadedFileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactUploadedFileInfo) GetVfsPath() string {
	if x != nil {
		return x.VfsPath
	}
	return ""
}

func (x *ArtifactUploadedFileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ArtifactUploadedFileInfo) GetStoredSize() uint64 {
	if x != nil {
		return x.StoredSize
	}
	return 0
}

// This context is serialized into the data store.
type ArtifactCollectorContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  string                 `protobuf:"bytes,27,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	SessionId string                 `protobuf:"bytes,13,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Request   *ArtifactCollectorArgs `protobuf:"bytes,11,opt,name=request,proto3" json:"request,omitempty"`
	// If an error occurs this is the backtrace.
	Backtrace string `protobuf:"bytes,1,opt,name=backtrace,proto3" json:"backtrace,omitempty"`
	// When the collection was created.
	CreateTime uint64 `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime  uint64 `protobuf:"varint,18,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Last time this collection was active (receiving data).
	ActiveTime uint64 `protobuf:"varint,17,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
	// A total count of files uploaded by this query.
	TotalUploadedFiles         uint64 `protobuf:"varint,23,opt,name=total_uploaded_files,json=totalUploadedFiles,proto3" json:"total_uploaded_files,omitempty"`
	TotalExpectedUploadedBytes uint64 `protobuf:"varint,25,opt,name=total_expected_uploaded_bytes,json=totalExpectedUploadedBytes,proto3" json:"total_expected_uploaded_bytes,omitempty"`
	TotalUploadedBytes         uint64 `protobuf:"varint,26,opt,name=total_uploaded_bytes,json=totalUploadedBytes,proto3" json:"total_uploaded_bytes,omitempty"`
	TotalCollectedRows         uint64 `protobuf:"varint,28,opt,name=total_collected_rows,json=totalCollectedRows,proto3" json:"total_collected_rows,omitempty"`
	TotalLogs                  uint64 `protobuf:"varint,32,opt,name=total_logs,json=totalLogs,proto3" json:"total_logs,omitempty"`
	OutstandingRequests        int64  `protobuf:"varint,31,opt,name=outstanding_requests,json=outstandingRequests,proto3" json:"outstanding_requests,omitempty"`
	// We expect the next response from the client to have this id.
	NextResponseId uint64 `protobuf:"varint,30,opt,name=next_response_id,json=nextResponseId,proto3" json:"next_response_id,omitempty"`
	// Total time the query took to run on the client (reported by the
	// client).
	ExecutionDuration int64                          `protobuf:"varint,29,opt,name=execution_duration,json=executionDuration,proto3" json:"execution_duration,omitempty"`
	State             ArtifactCollectorContext_State `protobuf:"varint,14,opt,name=state,proto3,enum=proto.ArtifactCollectorContext_State" json:"state,omitempty"`
	Status            string                         `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	UserNotified      bool                           `protobuf:"varint,16,opt,name=user_notified,json=userNotified,proto3" json:"user_notified,omitempty"`
	// Some of the collected artifacts may not have results.
	ArtifactsWithResults []string `protobuf:"bytes,22,rep,name=artifacts_with_results,json=artifactsWithResults,proto3" json:"artifacts_with_results,omitempty"`
	// Uploads are now permanently stored in a json file. This field is
	// never serialized - it is just a place holder during processing.
	UploadedFiles []*ArtifactUploadedFileInfo `protobuf:"bytes,24,rep,name=uploaded_files,json=uploadedFiles,proto3" json:"uploaded_files,omitempty"`
	// Logs are stored in their own CSV file. This is just a
	// placeholder during processing.
	Logs  []*proto1.LogMessage `protobuf:"bytes,20,rep,name=logs,proto3" json:"logs,omitempty"`
	Dirty bool                 `protobuf:"varint,2,opt,name=dirty,proto3" json:"dirty,omitempty"`
}

func (x *ArtifactCollectorContext) Reset() {
	*x = ArtifactCollectorContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_collector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactCollectorContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactCollectorContext) ProtoMessage() {}

func (x *ArtifactCollectorContext) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_collector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactCollectorContext.ProtoReflect.Descriptor instead.
func (*ArtifactCollectorContext) Descriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{5}
}

func (x *ArtifactCollectorContext) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ArtifactCollectorContext) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ArtifactCollectorContext) GetRequest() *ArtifactCollectorArgs {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ArtifactCollectorContext) GetBacktrace() string {
	if x != nil {
		return x.Backtrace
	}
	return ""
}

func (x *ArtifactCollectorContext) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ArtifactCollectorContext) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ArtifactCollectorContext) GetActiveTime() uint64 {
	if x != nil {
		return x.ActiveTime
	}
	return 0
}

func (x *ArtifactCollectorContext) GetTotalUploadedFiles() uint64 {
	if x != nil {
		return x.TotalUploadedFiles
	}
	return 0
}

func (x *ArtifactCollectorContext) GetTotalExpectedUploadedBytes() uint64 {
	if x != nil {
		return x.TotalExpectedUploadedBytes
	}
	return 0
}

func (x *ArtifactCollectorContext) GetTotalUploadedBytes() uint64 {
	if x != nil {
		return x.TotalUploadedBytes
	}
	return 0
}

func (x *ArtifactCollectorContext) GetTotalCollectedRows() uint64 {
	if x != nil {
		return x.TotalCollectedRows
	}
	return 0
}

func (x *ArtifactCollectorContext) GetTotalLogs() uint64 {
	if x != nil {
		return x.TotalLogs
	}
	return 0
}

func (x *ArtifactCollectorContext) GetOutstandingRequests() int64 {
	if x != nil {
		return x.OutstandingRequests
	}
	return 0
}

func (x *ArtifactCollectorContext) GetNextResponseId() uint64 {
	if x != nil {
		return x.NextResponseId
	}
	return 0
}

func (x *ArtifactCollectorContext) GetExecutionDuration() int64 {
	if x != nil {
		return x.ExecutionDuration
	}
	return 0
}

func (x *ArtifactCollectorContext) GetState() ArtifactCollectorContext_State {
	if x != nil {
		return x.State
	}
	return ArtifactCollectorContext_UNSET
}

func (x *ArtifactCollectorContext) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ArtifactCollectorContext) GetUserNotified() bool {
	if x != nil {
		return x.UserNotified
	}
	return false
}

func (x *ArtifactCollectorContext) GetArtifactsWithResults() []string {
	if x != nil {
		return x.ArtifactsWithResults
	}
	return nil
}

func (x *ArtifactCollectorContext) GetUploadedFiles() []*ArtifactUploadedFileInfo {
	if x != nil {
		return x.UploadedFiles
	}
	return nil
}

func (x *ArtifactCollectorContext) GetLogs() []*proto1.LogMessage {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ArtifactCollectorContext) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

// Artifacts to collect for each label.
type LabelEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label     string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Artifacts *ArtifactCollectorArgs `protobuf:"bytes,2,opt,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *LabelEvents) Reset() {
	*x = LabelEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_collector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelEvents) ProtoMessage() {}

func (x *LabelEvents) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_collector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelEvents.ProtoReflect.Descriptor instead.
func (*LabelEvents) Descriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{6}
}

func (x *LabelEvents) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LabelEvents) GetArtifacts() *ArtifactCollectorArgs {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

// This is stored in the ArtifactCollector state.
type ClientEventTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Artifacts to collect from ALL clients.
	Artifacts   *ArtifactCollectorArgs `protobuf:"bytes,2,opt,name=artifacts,proto3" json:"artifacts,omitempty"`
	LabelEvents []*LabelEvents         `protobuf:"bytes,3,rep,name=label_events,json=labelEvents,proto3" json:"label_events,omitempty"`
}

func (x *ClientEventTable) Reset() {
	*x = ClientEventTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_collector_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientEventTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEventTable) ProtoMessage() {}

func (x *ClientEventTable) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_collector_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEventTable.ProtoReflect.Descriptor instead.
func (*ClientEventTable) Descriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{7}
}

func (x *ClientEventTable) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ClientEventTable) GetArtifacts() *ArtifactCollectorArgs {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *ClientEventTable) GetLabelEvents() []*LabelEvents {
	if x != nil {
		return x.LabelEvents
	}
	return nil
}

type UploadedFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VfsPath string `protobuf:"bytes,2,opt,name=vfs_path,json=vfsPath,proto3" json:"vfs_path,omitempty"`
	Size    uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *UploadedFileInfo) Reset() {
	*x = UploadedFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_collector_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedFileInfo) ProtoMessage() {}

func (x *UploadedFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_collector_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedFileInfo.ProtoReflect.Descriptor instead.
func (*UploadedFileInfo) Descriptor() ([]byte, []int) {
	return file_artifact_collector_proto_rawDescGZIP(), []int{8}
}

func (x *UploadedFileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadedFileInfo) GetVfsPath() string {
	if x != nil {
		return x.VfsPath
	}
	return ""
}

func (x *UploadedFileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

var File_artifact_collector_proto protoreflect.FileDescriptor

var file_artifact_collector_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x12, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x64, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x51, 0x4c, 0x45, 0x6e, 0x76, 0x42, 0x43, 0xe2, 0xfc, 0xe3,
	0xc4, 0x01, 0x3d, 0x12, 0x33, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x22, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x22, 0x65, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd2, 0x05, 0x0a,
	0x15, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75,
	0x72, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x28, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x22,
	0x12, 0x18, 0x54, 0x68, 0x65, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x22, 0x06, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x12, 0x6a, 0x0a, 0x0e, 0x6f, 0x70, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x44, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x3e, 0x12, 0x23, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20,
	0x28, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x22, 0x0e, 0x4f,
	0x70, 0x73, 0x20, 0x50, 0x65, 0x72, 0x20, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x32, 0x07, 0x31,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0c, 0x6f, 0x70, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x65, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4b, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x45, 0x12, 0x35, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x22, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x32, 0x03, 0x36,
	0x30, 0x30, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x8d, 0x01, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x57, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x51, 0x12, 0x4f, 0x49, 0x66, 0x20, 0x74, 0x72,
	0x75, 0x65, 0x20, 0x77, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61,
	0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x20, 0x69, 0x66, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x12, 0x4f, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x51, 0x4c, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x67,
	0x73, 0x22, 0x6c, 0x0a, 0x19, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x7e, 0x0a, 0x18, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x66, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xc2, 0x09, 0x0a, 0x18, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x37, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x31, 0x12, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x42, 0x69, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x63, 0x12,
	0x61, 0x54, 0x68, 0x65, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x2e, 0x52, 0x14, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x22, 0x55, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x22, 0x5f, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x35, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x66, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x33,
	0x5a, 0x31, 0x77, 0x77, 0x77, 0x2e, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x72, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_artifact_collector_proto_rawDescOnce sync.Once
	file_artifact_collector_proto_rawDescData = file_artifact_collector_proto_rawDesc
)

func file_artifact_collector_proto_rawDescGZIP() []byte {
	file_artifact_collector_proto_rawDescOnce.Do(func() {
		file_artifact_collector_proto_rawDescData = protoimpl.X.CompressGZIP(file_artifact_collector_proto_rawDescData)
	})
	return file_artifact_collector_proto_rawDescData
}

var file_artifact_collector_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_artifact_collector_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_artifact_collector_proto_goTypes = []interface{}{
	(ArtifactCollectorContext_State)(0), // 0: proto.ArtifactCollectorContext.State
	(*ArtifactParameters)(nil),          // 1: proto.ArtifactParameters
	(*ArtifactSpec)(nil),                // 2: proto.ArtifactSpec
	(*ArtifactCollectorArgs)(nil),       // 3: proto.ArtifactCollectorArgs
	(*ArtifactCollectorResponse)(nil),   // 4: proto.ArtifactCollectorResponse
	(*ArtifactUploadedFileInfo)(nil),    // 5: proto.ArtifactUploadedFileInfo
	(*ArtifactCollectorContext)(nil),    // 6: proto.ArtifactCollectorContext
	(*LabelEvents)(nil),                 // 7: proto.LabelEvents
	(*ClientEventTable)(nil),            // 8: proto.ClientEventTable
	(*UploadedFileInfo)(nil),            // 9: proto.UploadedFileInfo
	(*proto.VQLEnv)(nil),                // 10: proto.VQLEnv
	(*proto.VQLCollectorArgs)(nil),      // 11: proto.VQLCollectorArgs
	(*proto1.LogMessage)(nil),           // 12: proto.LogMessage
}
var file_artifact_collector_proto_depIdxs = []int32{
	10, // 0: proto.ArtifactParameters.env:type_name -> proto.VQLEnv
	1,  // 1: proto.ArtifactSpec.parameters:type_name -> proto.ArtifactParameters
	2,  // 2: proto.ArtifactCollectorArgs.specs:type_name -> proto.ArtifactSpec
	11, // 3: proto.ArtifactCollectorArgs.compiled_collector_args:type_name -> proto.VQLCollectorArgs
	3,  // 4: proto.ArtifactCollectorResponse.request:type_name -> proto.ArtifactCollectorArgs
	3,  // 5: proto.ArtifactCollectorContext.request:type_name -> proto.ArtifactCollectorArgs
	0,  // 6: proto.ArtifactCollectorContext.state:type_name -> proto.ArtifactCollectorContext.State
	5,  // 7: proto.ArtifactCollectorContext.uploaded_files:type_name -> proto.ArtifactUploadedFileInfo
	12, // 8: proto.ArtifactCollectorContext.logs:type_name -> proto.LogMessage
	3,  // 9: proto.LabelEvents.artifacts:type_name -> proto.ArtifactCollectorArgs
	3,  // 10: proto.ClientEventTable.artifacts:type_name -> proto.ArtifactCollectorArgs
	7,  // 11: proto.ClientEventTable.label_events:type_name -> proto.LabelEvents
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_artifact_collector_proto_init() }
func file_artifact_collector_proto_init() {
	if File_artifact_collector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_artifact_collector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_collector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_collector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactCollectorArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_collector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactCollectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_collector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactUploadedFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_collector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactCollectorContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_collector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_collector_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientEventTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_collector_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artifact_collector_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_collector_proto_goTypes,
		DependencyIndexes: file_artifact_collector_proto_depIdxs,
		EnumInfos:         file_artifact_collector_proto_enumTypes,
		MessageInfos:      file_artifact_collector_proto_msgTypes,
	}.Build()
	File_artifact_collector_proto = out.File
	file_artifact_collector_proto_rawDesc = nil
	file_artifact_collector_proto_goTypes = nil
	file_artifact_collector_proto_depIdxs = nil
}
