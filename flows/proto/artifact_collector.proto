syntax = "proto3";

import "proto/semantic.proto";
import "actions/proto/vql.proto";
import "crypto/proto/jobs.proto";

package proto;

option go_package = "www.velocidex.com/golang/velociraptor/flows/proto";

message ArtifactParameters {
    repeated VQLEnv env = 3 [(sem_type) = {
            description: "Environment variables to be provided for the query.",
            friendly_name: "Params",
        }];
}

message ArtifactSpec {
    string artifact = 1;
    ArtifactParameters parameters = 2;
}

message ArtifactCollectorArgs {
    string creator = 1;
    string client_id = 3;

    // If set we send an urgent request to the client.
    bool urgent = 21;

    // Deprecated: Old way of specifying the artifacts consist of
    // shared parameters within a list of artifacts (i.e. all
    // artifacts share same scope).
    repeated string artifacts = 2 [(sem_type) = {
            description: "The artifacts to launch.",
            friendly_name: "Launch",
        }];

    // New way of specifying artifacts.
    repeated ArtifactSpec specs = 24;

    float ops_per_second = 6 [(sem_type) = {
            description: "Operations per second (Throttling).",
            friendly_name: "Ops Per Second",
            default: "1000000",
        }];

    // Resource limits on this collection.
    uint64 timeout = 7 [(sem_type) = {
            description: "Number of seconds to run before cancelling the query.",
            friendly_name: "Timeout",
            default: "600",
        }];

    // Total number of rows we allow to collect.
    uint64 max_rows = 22;

    // Total bytes allowed to upload
    uint64 max_upload_bytes = 23;

    bool allow_custom_overrides = 8 [(sem_type) = {
            description: "If true we will use a custom artifact if present instead of the named artifact.",
        }];


    // A place to cache the compiled request. If this is provided we
    // do not compile the artifacts at all, we just use it as is.

    // Note: Event artifacts may produce several VQLCollectorArgs, one
    // for each artifact/source because Event Artifacts are
    // asyncronous and blocking and need to run each query in
    // parallel.
    repeated VQLCollectorArgs compiled_collector_args = 20;
}

message ArtifactCollectorResponse {
    string flow_id = 1;
    ArtifactCollectorArgs request =2;
}

message ArtifactUploadedFileInfo {
    string name = 1;
    string vfs_path = 2;
    uint64 size = 3;
    uint64 stored_size = 4;
}

// This context is serialized into the data store.
message ArtifactCollectorContext {
    string client_id = 27;
    string session_id = 13;
    ArtifactCollectorArgs request = 11;

    // If an error occurs this is the backtrace.
    string backtrace = 1;

    // When the collection was created.
    uint64 create_time = 3;
    uint64 start_time = 18;

    // Last time this collection was active (receiving data).
    uint64 active_time = 17;

    // A total count of files uploaded by this query.
    uint64 total_uploaded_files = 23;
    uint64 total_expected_uploaded_bytes = 25;
    uint64 total_uploaded_bytes = 26;
    uint64 total_collected_rows = 28;
    uint64 total_logs = 32;

    int64 outstanding_requests = 31;

    // We expect the next response from the client to have this id.
    uint64 next_response_id = 30;

    // Total time the query took to run on the client (reported by the
    // client).
    int64 execution_duration = 29;

    enum State {
        UNSET = 0;
        RUNNING = 1;  // Flow is scheduled and active. If the client
                      // is not online, it will receive the collection
                      // later.

        FINISHED = 2; // Flow completed normally.
        ERROR = 3;   // Flows which raise are marked as having an error.
        ARCHIVED = 4;  // Archived flows do not show up in the UI
        CANCELLED = 5; // Cancelled collection were actively cancelled.
    };

    State state = 14;

    string status = 15 [(sem_type) = {
            description: "Contents of an error status sent by the client."
        }];

    bool user_notified = 16;

    // Some of the collected artifacts may not have results.
    repeated string artifacts_with_results = 22 [(sem_type) = {
            description: "The full path to the artifacts with their results. "
            "This takes the form artifact name/source name."
        }];

    // The below are not serialized but are used during execution.

    // Uploads are now permanently stored in a json file. This field is
    // never serialized - it is just a place holder during processing.
    repeated ArtifactUploadedFileInfo uploaded_files = 24;

    // Logs are stored in their own CSV file. This is just a
    // placeholder during processing.
    repeated LogMessage logs = 20;

    bool dirty = 2;
}

// Artifacts to collect for each label.
message LabelEvents {
    string label = 1;
    ArtifactCollectorArgs artifacts = 2;
}

// This is stored in the ArtifactCollector state.
message ClientEventTable {
    uint64 version = 1;

    // Artifacts to collect from ALL clients.
    ArtifactCollectorArgs artifacts = 2;

    repeated LabelEvents label_events = 3;
}


message UploadedFileInfo {
    string name = 1;
    string vfs_path = 2;
    uint64 size = 3;
}
