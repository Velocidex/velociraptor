syntax = "proto3";
import "proto/semantic.proto";
import "crypto/proto/jobs.proto";

package proto;

option go_package = "www.velocidex.com/golang/velociraptor/flows/proto";

message UploadedFileInfo {
    string name = 1;
    string vfs_path = 2;
    uint64 size = 3;
}

// The flow context.
// Next field: 19
message FlowContext {
    string backtrace = 1;
    uint64 create_time = 3 [(sem_type) = {
            type: "RDFDatetime",
        }];
    uint64 kill_timestamp = 6 [(sem_type) = {
            type: "RDFDatetime",
        }];
    uint64 network_bytes_sent = 7;

    // Uploads are now permanently stored in a csv file. This field is
    // never serialized - it is just a place holder during processing.
    repeated UploadedFileInfo uploaded_files = 24 [(sem_type) = {
            description: "A list of files uploaded as part of the flow."
        }];

    uint64 total_uploaded_files = 23 [(sem_type) = {
            description: "Total number of uploaded files."
        }];

    uint64 total_expected_uploaded_bytes = 25 [(sem_type) = {
            description: "How many bytes we expect to receive."
        }];

    uint64 total_uploaded_bytes = 26 [(sem_type) = {
            description: "How many bytes we received so far."
        }];

    // Logs are stored in their own CSV file. This is just a
    // placeholder during processing.
    repeated LogMessage logs = 20 [(sem_type) = {
            description: "List of logs.",
            label: HIDDEN,
        }];

        string session_id = 13;
        enum State {
        UNSET = 0;
        RUNNING = 1;
        TERMINATED = 2;
        ERROR = 3;   // Flows which raise are marked as having an error.
        ARCHIVED = 4;  // Archived flows do not show up in the UI
    };

    State state = 14;

    string status = 15 [(sem_type) = {
            description: "Contents of an error status sent by the client."
        }];

    bool user_notified = 16;

    uint64 active_time = 17 [(sem_type) = {
            type: "RDFDatetime",
        }];

    repeated string artifacts = 21 [(sem_type) = {
            description: "If the flow returns a set of artifacts "
            "this field will list them."
        }];

    repeated string artifacts_with_results = 22 [(sem_type) = {
            description: "The full path to the artifacts with their results. "
            "This takes the form artifact name/source name."
        }];
}
