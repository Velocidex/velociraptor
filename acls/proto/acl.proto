syntax = "proto3";

import "proto/semantic.proto";

package proto;

option go_package = "www.velocidex.com/golang/velociraptor/acls/proto";


message ApiClientACL {
    // if this is set we allow everything - normally only set by
    // server-server comms.
    bool super_user = 21;

    bool all_query = 1 [(sem_type) = {
            description: "Provides arbitrary query level access.",
        }];

    bool any_query = 10;

    repeated string publish_queues = 2 [(sem_type)= {
            description: "List of queues the client can publish to.",
        }];

    bool read_results = 3;
    bool label_clients = 11;

    bool collect_client = 4;
    bool start_hunt = 22;
    bool collect_server = 5;
    bool artifact_writer = 6;
    bool server_artifact_writer = 15;
    bool execve = 7;
    bool notebook_editor = 8;

    // Has the ability to add/remove/list orgs. A user with
    // server_admin on the root org will also receive org_admin.
    bool org_admin = 19;

    // Allows a user to run queries as another user.
    bool impersonation = 20;

    bool server_admin = 12;
    bool filesystem_read = 13;
    bool filesystem_write = 14;
    bool machine_state = 16;
    bool prepare_results = 17;
    bool delete_results = 23;
    bool datastore_access = 18;

    // A list of roles in lieu of the permissions above. These will be
    // interpolated into this ACL object.
    repeated string roles = 9;
}

// A role is a named sets of ACL permissions. A user may possess
// multiple roles.
message Role {
    string name = 1;

    ApiClientACL permissions = 2;
}
