// These are the messages used in Velociraptor's encrypted
// communication protocol.
syntax = "proto3";

import "proto/semantic.proto";
import "actions/proto/transport.proto";
import "actions/proto/vql.proto";

package proto;

option go_package = "www.velocidex.com/golang/velociraptor/crypto/proto";

// Represents a complete collection.
message FlowRequest {
    repeated VQLCollectorArgs VQLClientActions = 1;

    // The maximum time in milliseconds the client will batch log
    // messages before forwarding them to the server. If this is 0, no
    // updates will be sent until he very end of the query. You can
    // specify the default in
    // Frontend.resources.default_log_batch_time
    uint64 log_batch_time = 2;

    // The maximum time in milliseconds the client will wait before
    // sending progress updates on the running flows. This is useful
    // to monitor how the client is progress but if it done too often
    // increases load on the server. Default is 5000 (5sec) and you
    // can updatet the default in
    // Client.default_server_flow_stats_update
    uint64 flow_update_time = 3;

    // A limit on total number of rows returned from the
    // collection. Does not count log messages.
    uint64 max_rows = 4;

    // If the client exceeds this, the client will abort the
    // collection.
    uint64 max_upload_bytes = 5;

    // Execute this trace query while the main collection is running.
    repeated VQLCollectorArgs trace = 6;
}


// This message is sent between the client and the server.
message VeloMessage {
  string session_id = 1 [(sem_type) = {
      description: "The session id of the flow that this message belongs to."
    }];

  // An incrementing query id in this session.
  uint64 query_id = 37;

  uint64 request_id = 2 [(sem_type) = {
      description: "The message is in response to this request number "
      "(requests increment from 1)."
    }];

  // If this is set then the message is urgent - it will not be
  // queued needlessly.
  bool urgent = 36;

  // DEPRECATED: not used any more.
  uint64 response_id = 3 [(sem_type) = {
      description: "Responses for each request are also numbered from 1."
    }];

  // The source of this message. Note that clients may group together
  // many messages from the same source. The authenticity of the
  // source is cryptographically determined by the CipherMetadata but
  // the source is also copied down to each message by the server
  // after verification. This means that we ignore what the client
  // actually stores in this field and override it from the
  // CipherMetadata.Source field.
  string source = 6;

  // The Org this client belongs to - set by the frontend from
  // information gathered by the encryption envelope
  string org_id = 40;

  // A Flag to indicate if the message is authenticated. Note that the client
  // does not get to decide this - the server will verify the message and tag it
  // as such. The message is then passed down the chain of components carrying
  // this tag.

  // This is done because signing is done on a group of messages as
  // they arrive over the POST transaction, but after decryption and
  // unpacking, messages are processed individually and therefore need
  // to retain their authenticated status.
  enum AuthorizationState {
    UNAUTHENTICATED = 0;
    AUTHENTICATED = 1;
  };

  AuthorizationState auth_state = 7;

  // The id of this message in the scheduler. Based on the
  // timestamp. If this is 0 then the task is not scheduled.
  uint64 task_id = 15;

  // Generally only one of the following will be set.
  // Client to server:
  FlowStats flow_stats = 41;
  VeloStatus status = 25;
  ForemanCheckin ForemanCheckin = 27;  // Upon initial connection.
  FileBuffer FileBuffer = 28;  // For uploads.
  Certificate CSR = 29;   // For enrollment.
  VQLResponse VQLResponse = 33;
  LogMessage LogMessage = 34;
  Cancel     Ping = 39;

  // Server to client:
  VQLEventTable UpdateEventTable = 31;

  // DEPRECATED but used to talk with older clients. New clients will
  // ignore this message and read the FlowRequest message instead.
  VQLCollectorArgs VQLClientAction = 30;

  // Requests a flow to be collected - contains all the queries that
  // make up the collection.
  FlowRequest FlowRequest = 42;

  Cancel Cancel = 32;
  ForemanCheckin UpdateForeman = 35;

  // Immediately kill the client and reset all buffers.
  Cancel  KillKillKill = 38;

  // DEPRECATED: The following fields were used as part of the old
  // VeloMessage communication protocol. These fields were replaced
  // by the messages above.
  string name = 4 [(sem_type) = {
      description: "This is the name of the client action that will be "
      "executed. It is set by the flow and is executed by the client."
    }];

  // DEPRECATED: This field contains an encoded rdfvalue. The type of
  // this value is in args_rdf_name.
  bytes args = 5;

  // DEPRECATED:
  // The rdfvalue class of the args.
  string args_rdf_name = 14;

  // DEPRECATED: Status messages just carry the VeloStatus member.
  enum Type {
    MESSAGE = 0; // The main kind of message.
    STATUS = 1; //
  };

  // DEPRECATED:
  // The final response to a request carries this type which indicates it is a
  // status message.
  Type type = 8;
};

message Cancel {
    string principal = 1;
};

// Certificates are exchanged with this.
message Certificate {
  enum Type {
    CSR = 0;
    CRT = 1;
    CA  = 2;
  };

  Type type = 1;
  bytes pem = 2;
  string cn = 3;
};

// A periodic message sent from the client to the server to update the
// server about the flow progress.
message FlowStats {
    uint64 total_uploaded_files = 1;
    uint64 total_expected_uploaded_bytes = 2;
    uint64 total_uploaded_bytes = 3;
    uint64 total_collected_rows = 4;
    uint64 total_logs = 5;

    uint64 timestamp = 6;

    repeated string names_with_response = 9;

    repeated VeloStatus query_status = 7;

    // When this is true, the flow is considered complete. It is
    // guaranteed to only fire once.
    bool flow_complete = 8;
}


// This is a status response that is sent for each complete
// query. Velociraptor collections consist of multiple queries (for
// example collecting multiple artifacts or artifacts with multiple
// sources). Each query request ellicits a status message when
// finished to indicate the query's success status and send stats
// about it.
message VeloStatus {
    // Velociraptor only uses OK and GENERIC_ERROR right now.
    enum ReturnedStatus {
        // Query completed successfully
        OK = 0;

        // A progress report of the query but does not mean it is
        // completed.
        PROGRESS = 4;
        GENERIC_ERROR = 10;
    };

    ReturnedStatus status = 1;

    string error_message = 2;

    string backtrace = 3;

    // Total duration the query took to run on the client.
    int64 duration = 4;
    uint64 last_active = 14;
    uint64 first_active = 15;

    // Return statistics about the request

    // A List of artifacts that had some results.
    repeated string names_with_response = 5;

    // The artifact that this status refers to
    string Artifact = 10;

    // How many log rows we generated
    int64 log_rows = 6;

    // How many files were uploaded in this query.
    int64 uploaded_files = 11;
    int64 uploaded_bytes = 12;
    int64 expected_uploaded_bytes = 13;

    int64 result_rows = 7;

    // This status corresponds to this query number out of the total
    // in this collection.
    int64 query_id = 8;
    int64 total_queries = 9;
};

// This is a list of job messages.
message MessageList {
  repeated VeloMessage job = 1;
};

// This is the protobuf which is transmitted on the wire
message PackedMessageList {

  // Currently Velociraptor always compresses all message lists.
  enum CompressionType {
    UNCOMPRESSED = 0;
    // Compressed using the zlib.compress() function.
    ZCOMPRESSION = 1;
  };

  // How the message_list element is compressed.
  CompressionType compression = 4;

  // A serialized and compressed MessageList for signing
  repeated bytes message_list = 1;

  uint64 timestamp = 6 [(sem_type) = {
      type: "RDFDatetime",
      description: "The client sends its timestamp to prevent replay attacks."
    }];

  string nonce = 7 [(sem_type) = {
      description: "A shared nonce between the server and client which must be given by the client. The server uses this to ensure the client belongs to the same deployment as the server. Without this check any client may connect to any server. NOTE this is a weak check - anyone who compromises a client in this deployment may extract this nonce and connect to that server, but it makes it a little harder to join a Velociraptor deployment."
    }];
};

// A cacheable object carrying key material that is reused between
// packets. Can be re-verified on demand but it is retransmitted on
// each packet and cached on each end.
message CipherProperties {
  string name = 1;

  bytes key = 2 [(sem_type) = {
      type: "EncryptionKey",
    }];

  // This IV is used to encrypt the cipher metadata block. Note: Both the
  // CipherProperties() and the CipherMetadata() protobufs do not change for all
  // messages in this session.
  bytes metadata_iv = 3 [(sem_type) = {
      type: "EncryptionKey",
    }];

  // The key used for the hmac.
  bytes hmac_key = 5 [(sem_type) = {
      type: "EncryptionKey",
    }];

  enum HMACType {
      // DEPRECATED: Older clients use a HMAC only on the encrypted message.
    SIMPLE_HMAC = 0;

    // Newer clients also include the encrypted cipher and API version in the
    // hmac.
    FULL_HMAC = 1;
  };

  // The API version of the cipher.
  HMACType hmac_type = 6;
};

message CipherMetadata {
  string source = 1 [(sem_type) = {
      type: "RDFURN",
      description: "The common name this cipher should be used to communicate with."
    }];

  // The signature of the encrypted cipher block.
  bytes signature = 2;
};

// The protobuf actually sent in the POST request (or received in the GET).
// Next field: 11
message ClientCommunication {
  // This message is a serialized PackedMessageList() protobuf, encrypted using
  // the session key (Encrypted inside field 2) and the per-packet IV (field 8).
  bytes encrypted = 1;

  // This is a CipherProperties() protobuf encrypted with the public key of the
  // receiver. Contains the session key and iv, as well as hmac key. This IV
  // does not change for the duration of the session. It is used to decrypt the
  // CipherMetadata() (field 9).
  bytes encrypted_cipher = 2;

  // A serialized CipherMetadata() protobuf, encrypted with the session
  // key. Contains the RSA signature of the digest of the serialized
  // CipherProperties() above, signed with the sender's private key.
  bytes encrypted_cipher_metadata = 9;

  // This iv is used to encrypt the encrypted field (No. 1). This IV changes for
  // each packet.
  bytes packet_iv = 8 [(sem_type) = {
      type: "EncryptionKey",
    }];;

  // This status code applies for the entire communication.
  enum Status {
    UNSET = 0;
    OK = 200;
    BAD_REQUEST = 400;
    CIPHER_ERROR = 406;
  };
  Status status = 5;

  // Communication version:
  // 3 - All versions before release 0.6.8
  // 4 - Release 0.6.8
  uint32 api_version = 6;

  // This is the FULL_HMAC. It covers:
  // 1) the "encrypted" field,
  // 2) The "encrypted_cipher" field.
  // 3) The encrypted_cipher_metadata field
  // 4) The packet iv
  // 5) the api_version.
  bytes full_hmac = 10;

  // While the message is being processed, we send padding
  // periodically to the client to kep the client connection up and
  // keep the client waiting for the message to be processed. This
  // padding can be ignored.
  repeated uint64 padding = 11;
};

message LogMessage {
    // An incremental ID of the first log message
    int64 id = 5;

    // Total number of rows encoded in the jsonl field.
    uint64 number_of_rows = 6;

    // A JSONL encoded list of log messages
    string jsonl = 7;

    // If any of the messages in jsonl are at error level the first is
    // captured in this string.
    string error_message = 8;

    // Deprecated: The fields below are used by older clients and can
    // still be processed by the server but newer clients batch log
    // messages in the jsonl field above.
    string message = 1 [(sem_type) = {
            description: "The message to send to the server.",
        }];

    uint64 timestamp = 2 [(sem_type) = {
            description: "The time when the message was generated.",
            type: "RDFDatetime",
        }];

    // The artifact name that we were running at the time.
    string artifact = 3;

    // DEFAULT, ERROR, DEBUG
    string level = 4;
}

// Message written to the data store with the PEM of the client's
// public key.
message PublicKey {
    bytes pem = 1;

    // The timestamp when the key was saved (the client
    // enrolled). This is used to deduce the first_seen_time.
    uint64 enroll_time = 2;
}