// These are the messages used in Velociraptor's encrypted
// communication protocol.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jobs.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	proto "www.velocidex.com/golang/velociraptor/actions/proto"
	_ "www.velocidex.com/golang/velociraptor/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is done because signing is done on a group of messages as
// they arrive over the POST transaction, but after decryption and
// unpacking, messages are processed individually and therefore need
// to retain their authenticated status.
type VeloMessage_AuthorizationState int32

const (
	VeloMessage_UNAUTHENTICATED VeloMessage_AuthorizationState = 0
	VeloMessage_AUTHENTICATED   VeloMessage_AuthorizationState = 1
)

// Enum value maps for VeloMessage_AuthorizationState.
var (
	VeloMessage_AuthorizationState_name = map[int32]string{
		0: "UNAUTHENTICATED",
		1: "AUTHENTICATED",
	}
	VeloMessage_AuthorizationState_value = map[string]int32{
		"UNAUTHENTICATED": 0,
		"AUTHENTICATED":   1,
	}
)

func (x VeloMessage_AuthorizationState) Enum() *VeloMessage_AuthorizationState {
	p := new(VeloMessage_AuthorizationState)
	*p = x
	return p
}

func (x VeloMessage_AuthorizationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VeloMessage_AuthorizationState) Descriptor() protoreflect.EnumDescriptor {
	return file_jobs_proto_enumTypes[0].Descriptor()
}

func (VeloMessage_AuthorizationState) Type() protoreflect.EnumType {
	return &file_jobs_proto_enumTypes[0]
}

func (x VeloMessage_AuthorizationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VeloMessage_AuthorizationState.Descriptor instead.
func (VeloMessage_AuthorizationState) EnumDescriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{1, 0}
}

// DEPRECATED: Status messages just carry the VeloStatus member.
type VeloMessage_Type int32

const (
	VeloMessage_MESSAGE VeloMessage_Type = 0 // The main kind of message.
	VeloMessage_STATUS  VeloMessage_Type = 1 //
)

// Enum value maps for VeloMessage_Type.
var (
	VeloMessage_Type_name = map[int32]string{
		0: "MESSAGE",
		1: "STATUS",
	}
	VeloMessage_Type_value = map[string]int32{
		"MESSAGE": 0,
		"STATUS":  1,
	}
)

func (x VeloMessage_Type) Enum() *VeloMessage_Type {
	p := new(VeloMessage_Type)
	*p = x
	return p
}

func (x VeloMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VeloMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_jobs_proto_enumTypes[1].Descriptor()
}

func (VeloMessage_Type) Type() protoreflect.EnumType {
	return &file_jobs_proto_enumTypes[1]
}

func (x VeloMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VeloMessage_Type.Descriptor instead.
func (VeloMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{1, 1}
}

type Certificate_Type int32

const (
	Certificate_CSR Certificate_Type = 0
	Certificate_CRT Certificate_Type = 1
	Certificate_CA  Certificate_Type = 2
)

// Enum value maps for Certificate_Type.
var (
	Certificate_Type_name = map[int32]string{
		0: "CSR",
		1: "CRT",
		2: "CA",
	}
	Certificate_Type_value = map[string]int32{
		"CSR": 0,
		"CRT": 1,
		"CA":  2,
	}
)

func (x Certificate_Type) Enum() *Certificate_Type {
	p := new(Certificate_Type)
	*p = x
	return p
}

func (x Certificate_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_jobs_proto_enumTypes[2].Descriptor()
}

func (Certificate_Type) Type() protoreflect.EnumType {
	return &file_jobs_proto_enumTypes[2]
}

func (x Certificate_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_Type.Descriptor instead.
func (Certificate_Type) EnumDescriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{3, 0}
}

// Velociraptor only uses OK and GENERIC_ERROR right now.
type VeloStatus_ReturnedStatus int32

const (
	// Query completed successfully
	VeloStatus_OK VeloStatus_ReturnedStatus = 0
	// A progress report of the query but does not mean it is
	// completed.
	VeloStatus_PROGRESS      VeloStatus_ReturnedStatus = 4
	VeloStatus_GENERIC_ERROR VeloStatus_ReturnedStatus = 10
)

// Enum value maps for VeloStatus_ReturnedStatus.
var (
	VeloStatus_ReturnedStatus_name = map[int32]string{
		0:  "OK",
		4:  "PROGRESS",
		10: "GENERIC_ERROR",
	}
	VeloStatus_ReturnedStatus_value = map[string]int32{
		"OK":            0,
		"PROGRESS":      4,
		"GENERIC_ERROR": 10,
	}
)

func (x VeloStatus_ReturnedStatus) Enum() *VeloStatus_ReturnedStatus {
	p := new(VeloStatus_ReturnedStatus)
	*p = x
	return p
}

func (x VeloStatus_ReturnedStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VeloStatus_ReturnedStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jobs_proto_enumTypes[3].Descriptor()
}

func (VeloStatus_ReturnedStatus) Type() protoreflect.EnumType {
	return &file_jobs_proto_enumTypes[3]
}

func (x VeloStatus_ReturnedStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VeloStatus_ReturnedStatus.Descriptor instead.
func (VeloStatus_ReturnedStatus) EnumDescriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{5, 0}
}

// Currently Velociraptor always compresses all message lists.
type PackedMessageList_CompressionType int32

const (
	PackedMessageList_UNCOMPRESSED PackedMessageList_CompressionType = 0
	// Compressed using the zlib.compress() function.
	PackedMessageList_ZCOMPRESSION PackedMessageList_CompressionType = 1
)

// Enum value maps for PackedMessageList_CompressionType.
var (
	PackedMessageList_CompressionType_name = map[int32]string{
		0: "UNCOMPRESSED",
		1: "ZCOMPRESSION",
	}
	PackedMessageList_CompressionType_value = map[string]int32{
		"UNCOMPRESSED": 0,
		"ZCOMPRESSION": 1,
	}
)

func (x PackedMessageList_CompressionType) Enum() *PackedMessageList_CompressionType {
	p := new(PackedMessageList_CompressionType)
	*p = x
	return p
}

func (x PackedMessageList_CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackedMessageList_CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_jobs_proto_enumTypes[4].Descriptor()
}

func (PackedMessageList_CompressionType) Type() protoreflect.EnumType {
	return &file_jobs_proto_enumTypes[4]
}

func (x PackedMessageList_CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackedMessageList_CompressionType.Descriptor instead.
func (PackedMessageList_CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{7, 0}
}

type CipherProperties_HMACType int32

const (
	// DEPRECATED: Older clients use a HMAC only on the encrypted message.
	CipherProperties_SIMPLE_HMAC CipherProperties_HMACType = 0
	// Newer clients also include the encrypted cipher and API version in the
	// hmac.
	CipherProperties_FULL_HMAC CipherProperties_HMACType = 1
)

// Enum value maps for CipherProperties_HMACType.
var (
	CipherProperties_HMACType_name = map[int32]string{
		0: "SIMPLE_HMAC",
		1: "FULL_HMAC",
	}
	CipherProperties_HMACType_value = map[string]int32{
		"SIMPLE_HMAC": 0,
		"FULL_HMAC":   1,
	}
)

func (x CipherProperties_HMACType) Enum() *CipherProperties_HMACType {
	p := new(CipherProperties_HMACType)
	*p = x
	return p
}

func (x CipherProperties_HMACType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CipherProperties_HMACType) Descriptor() protoreflect.EnumDescriptor {
	return file_jobs_proto_enumTypes[5].Descriptor()
}

func (CipherProperties_HMACType) Type() protoreflect.EnumType {
	return &file_jobs_proto_enumTypes[5]
}

func (x CipherProperties_HMACType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CipherProperties_HMACType.Descriptor instead.
func (CipherProperties_HMACType) EnumDescriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{8, 0}
}

// This status code applies for the entire communication.
type ClientCommunication_Status int32

const (
	ClientCommunication_UNSET        ClientCommunication_Status = 0
	ClientCommunication_OK           ClientCommunication_Status = 200
	ClientCommunication_BAD_REQUEST  ClientCommunication_Status = 400
	ClientCommunication_CIPHER_ERROR ClientCommunication_Status = 406
)

// Enum value maps for ClientCommunication_Status.
var (
	ClientCommunication_Status_name = map[int32]string{
		0:   "UNSET",
		200: "OK",
		400: "BAD_REQUEST",
		406: "CIPHER_ERROR",
	}
	ClientCommunication_Status_value = map[string]int32{
		"UNSET":        0,
		"OK":           200,
		"BAD_REQUEST":  400,
		"CIPHER_ERROR": 406,
	}
)

func (x ClientCommunication_Status) Enum() *ClientCommunication_Status {
	p := new(ClientCommunication_Status)
	*p = x
	return p
}

func (x ClientCommunication_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientCommunication_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_jobs_proto_enumTypes[6].Descriptor()
}

func (ClientCommunication_Status) Type() protoreflect.EnumType {
	return &file_jobs_proto_enumTypes[6]
}

func (x ClientCommunication_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientCommunication_Status.Descriptor instead.
func (ClientCommunication_Status) EnumDescriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{10, 0}
}

// Represents a complete collection.
type FlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VQLClientActions []*proto.VQLCollectorArgs `protobuf:"bytes,1,rep,name=VQLClientActions,proto3" json:"VQLClientActions,omitempty"`
	// The maximum time in milliseconds the client will batch log
	// messages before forwarding them to the server. If this is 0, no
	// updates will be sent until he very end of the query. You can
	// specify the default in
	// Frontend.resources.default_log_batch_time
	LogBatchTime uint64 `protobuf:"varint,2,opt,name=log_batch_time,json=logBatchTime,proto3" json:"log_batch_time,omitempty"`
	// The maximum time in milliseconds the client will wait before
	// sending progress updates on the running flows. This is useful
	// to monitor how the client is progress but if it done too often
	// increases load on the server. Default is 5000 (5sec) and you
	// can updatet the default in
	// Client.default_server_flow_stats_update
	FlowUpdateTime uint64 `protobuf:"varint,3,opt,name=flow_update_time,json=flowUpdateTime,proto3" json:"flow_update_time,omitempty"`
	// A limit on total number of rows returned from the
	// collection. Does not count log messages.
	MaxRows uint64 `protobuf:"varint,4,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	// If the client exceeds this, the client will abort the
	// collection.
	MaxUploadBytes uint64 `protobuf:"varint,5,opt,name=max_upload_bytes,json=maxUploadBytes,proto3" json:"max_upload_bytes,omitempty"`
	// Execute this trace query while the main collection is running.
	Trace []*proto.VQLCollectorArgs `protobuf:"bytes,6,rep,name=trace,proto3" json:"trace,omitempty"`
}

func (x *FlowRequest) Reset() {
	*x = FlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRequest) ProtoMessage() {}

func (x *FlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRequest.ProtoReflect.Descriptor instead.
func (*FlowRequest) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{0}
}

func (x *FlowRequest) GetVQLClientActions() []*proto.VQLCollectorArgs {
	if x != nil {
		return x.VQLClientActions
	}
	return nil
}

func (x *FlowRequest) GetLogBatchTime() uint64 {
	if x != nil {
		return x.LogBatchTime
	}
	return 0
}

func (x *FlowRequest) GetFlowUpdateTime() uint64 {
	if x != nil {
		return x.FlowUpdateTime
	}
	return 0
}

func (x *FlowRequest) GetMaxRows() uint64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *FlowRequest) GetMaxUploadBytes() uint64 {
	if x != nil {
		return x.MaxUploadBytes
	}
	return 0
}

func (x *FlowRequest) GetTrace() []*proto.VQLCollectorArgs {
	if x != nil {
		return x.Trace
	}
	return nil
}

// This message is sent between the client and the server.
type VeloMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// An incrementing query id in this session.
	QueryId   uint64 `protobuf:"varint,37,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	RequestId uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// If this is set then the message is urgent - it will not be
	// queued needlessly.
	Urgent bool `protobuf:"varint,36,opt,name=urgent,proto3" json:"urgent,omitempty"`
	// DEPRECATED: not used any more.
	ResponseId uint64 `protobuf:"varint,3,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	// The source of this message. Note that clients may group together
	// many messages from the same source. The authenticity of the
	// source is cryptographically determined by the CipherMetadata but
	// the source is also copied down to each message by the server
	// after verification. This means that we ignore what the client
	// actually stores in this field and override it from the
	// CipherMetadata.Source field.
	Source string `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// The Org this client belongs to - set by the frontend from
	// information gathered by the encryption envelope
	OrgId     string                         `protobuf:"bytes,40,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	AuthState VeloMessage_AuthorizationState `protobuf:"varint,7,opt,name=auth_state,json=authState,proto3,enum=proto.VeloMessage_AuthorizationState" json:"auth_state,omitempty"`
	// The id of this message in the scheduler. Based on the
	// timestamp. If this is 0 then the task is not scheduled.
	TaskId uint64 `protobuf:"varint,15,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Generally only one of the following will be set.
	// Client to server:
	FlowStats      *FlowStats            `protobuf:"bytes,41,opt,name=flow_stats,json=flowStats,proto3" json:"flow_stats,omitempty"`
	Status         *VeloStatus           `protobuf:"bytes,25,opt,name=status,proto3" json:"status,omitempty"`
	ForemanCheckin *proto.ForemanCheckin `protobuf:"bytes,27,opt,name=ForemanCheckin,proto3" json:"ForemanCheckin,omitempty"` // Upon initial connection.
	FileBuffer     *proto.FileBuffer     `protobuf:"bytes,28,opt,name=FileBuffer,proto3" json:"FileBuffer,omitempty"`         // For uploads.
	CSR            *Certificate          `protobuf:"bytes,29,opt,name=CSR,proto3" json:"CSR,omitempty"`                       // For enrollment.
	VQLResponse    *proto.VQLResponse    `protobuf:"bytes,33,opt,name=VQLResponse,proto3" json:"VQLResponse,omitempty"`
	LogMessage     *LogMessage           `protobuf:"bytes,34,opt,name=LogMessage,proto3" json:"LogMessage,omitempty"`
	Ping           *Cancel               `protobuf:"bytes,39,opt,name=Ping,proto3" json:"Ping,omitempty"`
	// Server to client:
	UpdateEventTable *proto.VQLEventTable `protobuf:"bytes,31,opt,name=UpdateEventTable,proto3" json:"UpdateEventTable,omitempty"`
	// DEPRECATED but used to talk with older clients. New clients will
	// ignore this message and read the FlowRequest message instead.
	VQLClientAction *proto.VQLCollectorArgs `protobuf:"bytes,30,opt,name=VQLClientAction,proto3" json:"VQLClientAction,omitempty"`
	// Requests a flow to be collected - contains all the queries that
	// make up the collection.
	FlowRequest   *FlowRequest          `protobuf:"bytes,42,opt,name=FlowRequest,proto3" json:"FlowRequest,omitempty"`
	Cancel        *Cancel               `protobuf:"bytes,32,opt,name=Cancel,proto3" json:"Cancel,omitempty"`
	UpdateForeman *proto.ForemanCheckin `protobuf:"bytes,35,opt,name=UpdateForeman,proto3" json:"UpdateForeman,omitempty"`
	// Immediately kill the client and reset all buffers.
	KillKillKill *Cancel `protobuf:"bytes,38,opt,name=KillKillKill,proto3" json:"KillKillKill,omitempty"`
	// DEPRECATED: The following fields were used as part of the old
	// VeloMessage communication protocol. These fields were replaced
	// by the messages above.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// DEPRECATED: This field contains an encoded rdfvalue. The type of
	// this value is in args_rdf_name.
	Args []byte `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
	// DEPRECATED:
	// The rdfvalue class of the args.
	ArgsRdfName string `protobuf:"bytes,14,opt,name=args_rdf_name,json=argsRdfName,proto3" json:"args_rdf_name,omitempty"`
	// DEPRECATED:
	// The final response to a request carries this type which indicates it is a
	// status message.
	Type VeloMessage_Type `protobuf:"varint,8,opt,name=type,proto3,enum=proto.VeloMessage_Type" json:"type,omitempty"`
}

func (x *VeloMessage) Reset() {
	*x = VeloMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VeloMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VeloMessage) ProtoMessage() {}

func (x *VeloMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VeloMessage.ProtoReflect.Descriptor instead.
func (*VeloMessage) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{1}
}

func (x *VeloMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *VeloMessage) GetQueryId() uint64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *VeloMessage) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *VeloMessage) GetUrgent() bool {
	if x != nil {
		return x.Urgent
	}
	return false
}

func (x *VeloMessage) GetResponseId() uint64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *VeloMessage) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *VeloMessage) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *VeloMessage) GetAuthState() VeloMessage_AuthorizationState {
	if x != nil {
		return x.AuthState
	}
	return VeloMessage_UNAUTHENTICATED
}

func (x *VeloMessage) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *VeloMessage) GetFlowStats() *FlowStats {
	if x != nil {
		return x.FlowStats
	}
	return nil
}

func (x *VeloMessage) GetStatus() *VeloStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VeloMessage) GetForemanCheckin() *proto.ForemanCheckin {
	if x != nil {
		return x.ForemanCheckin
	}
	return nil
}

func (x *VeloMessage) GetFileBuffer() *proto.FileBuffer {
	if x != nil {
		return x.FileBuffer
	}
	return nil
}

func (x *VeloMessage) GetCSR() *Certificate {
	if x != nil {
		return x.CSR
	}
	return nil
}

func (x *VeloMessage) GetVQLResponse() *proto.VQLResponse {
	if x != nil {
		return x.VQLResponse
	}
	return nil
}

func (x *VeloMessage) GetLogMessage() *LogMessage {
	if x != nil {
		return x.LogMessage
	}
	return nil
}

func (x *VeloMessage) GetPing() *Cancel {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *VeloMessage) GetUpdateEventTable() *proto.VQLEventTable {
	if x != nil {
		return x.UpdateEventTable
	}
	return nil
}

func (x *VeloMessage) GetVQLClientAction() *proto.VQLCollectorArgs {
	if x != nil {
		return x.VQLClientAction
	}
	return nil
}

func (x *VeloMessage) GetFlowRequest() *FlowRequest {
	if x != nil {
		return x.FlowRequest
	}
	return nil
}

func (x *VeloMessage) GetCancel() *Cancel {
	if x != nil {
		return x.Cancel
	}
	return nil
}

func (x *VeloMessage) GetUpdateForeman() *proto.ForemanCheckin {
	if x != nil {
		return x.UpdateForeman
	}
	return nil
}

func (x *VeloMessage) GetKillKillKill() *Cancel {
	if x != nil {
		return x.KillKillKill
	}
	return nil
}

func (x *VeloMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VeloMessage) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *VeloMessage) GetArgsRdfName() string {
	if x != nil {
		return x.ArgsRdfName
	}
	return ""
}

func (x *VeloMessage) GetType() VeloMessage_Type {
	if x != nil {
		return x.Type
	}
	return VeloMessage_MESSAGE
}

type Cancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
}

func (x *Cancel) Reset() {
	*x = Cancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cancel) ProtoMessage() {}

func (x *Cancel) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cancel.ProtoReflect.Descriptor instead.
func (*Cancel) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{2}
}

func (x *Cancel) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

// Certificates are exchanged with this.
type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Certificate_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.Certificate_Type" json:"type,omitempty"`
	Pem  []byte           `protobuf:"bytes,2,opt,name=pem,proto3" json:"pem,omitempty"`
	Cn   string           `protobuf:"bytes,3,opt,name=cn,proto3" json:"cn,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{3}
}

func (x *Certificate) GetType() Certificate_Type {
	if x != nil {
		return x.Type
	}
	return Certificate_CSR
}

func (x *Certificate) GetPem() []byte {
	if x != nil {
		return x.Pem
	}
	return nil
}

func (x *Certificate) GetCn() string {
	if x != nil {
		return x.Cn
	}
	return ""
}

// A periodic message sent from the client to the server to update the
// server about the flow progress.
type FlowStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalUploadedFiles         uint64        `protobuf:"varint,1,opt,name=total_uploaded_files,json=totalUploadedFiles,proto3" json:"total_uploaded_files,omitempty"`
	TotalExpectedUploadedBytes uint64        `protobuf:"varint,2,opt,name=total_expected_uploaded_bytes,json=totalExpectedUploadedBytes,proto3" json:"total_expected_uploaded_bytes,omitempty"`
	TotalUploadedBytes         uint64        `protobuf:"varint,3,opt,name=total_uploaded_bytes,json=totalUploadedBytes,proto3" json:"total_uploaded_bytes,omitempty"`
	TotalCollectedRows         uint64        `protobuf:"varint,4,opt,name=total_collected_rows,json=totalCollectedRows,proto3" json:"total_collected_rows,omitempty"`
	TotalLogs                  uint64        `protobuf:"varint,5,opt,name=total_logs,json=totalLogs,proto3" json:"total_logs,omitempty"`
	Timestamp                  uint64        `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NamesWithResponse          []string      `protobuf:"bytes,9,rep,name=names_with_response,json=namesWithResponse,proto3" json:"names_with_response,omitempty"`
	QueryStatus                []*VeloStatus `protobuf:"bytes,7,rep,name=query_status,json=queryStatus,proto3" json:"query_status,omitempty"`
	// When this is true, the flow is considered complete. It is
	// guaranteed to only fire once.
	FlowComplete bool `protobuf:"varint,8,opt,name=flow_complete,json=flowComplete,proto3" json:"flow_complete,omitempty"`
}

func (x *FlowStats) Reset() {
	*x = FlowStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowStats) ProtoMessage() {}

func (x *FlowStats) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowStats.ProtoReflect.Descriptor instead.
func (*FlowStats) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{4}
}

func (x *FlowStats) GetTotalUploadedFiles() uint64 {
	if x != nil {
		return x.TotalUploadedFiles
	}
	return 0
}

func (x *FlowStats) GetTotalExpectedUploadedBytes() uint64 {
	if x != nil {
		return x.TotalExpectedUploadedBytes
	}
	return 0
}

func (x *FlowStats) GetTotalUploadedBytes() uint64 {
	if x != nil {
		return x.TotalUploadedBytes
	}
	return 0
}

func (x *FlowStats) GetTotalCollectedRows() uint64 {
	if x != nil {
		return x.TotalCollectedRows
	}
	return 0
}

func (x *FlowStats) GetTotalLogs() uint64 {
	if x != nil {
		return x.TotalLogs
	}
	return 0
}

func (x *FlowStats) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FlowStats) GetNamesWithResponse() []string {
	if x != nil {
		return x.NamesWithResponse
	}
	return nil
}

func (x *FlowStats) GetQueryStatus() []*VeloStatus {
	if x != nil {
		return x.QueryStatus
	}
	return nil
}

func (x *FlowStats) GetFlowComplete() bool {
	if x != nil {
		return x.FlowComplete
	}
	return false
}

// This is a status response that is sent for each complete
// query. Velociraptor collections consist of multiple queries (for
// example collecting multiple artifacts or artifacts with multiple
// sources). Each query request ellicits a status message when
// finished to indicate the query's success status and send stats
// about it.
type VeloStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       VeloStatus_ReturnedStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.VeloStatus_ReturnedStatus" json:"status,omitempty"`
	ErrorMessage string                    `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Backtrace    string                    `protobuf:"bytes,3,opt,name=backtrace,proto3" json:"backtrace,omitempty"`
	// Total duration the query took to run on the client.
	Duration    int64  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	LastActive  uint64 `protobuf:"varint,14,opt,name=last_active,json=lastActive,proto3" json:"last_active,omitempty"`
	FirstActive uint64 `protobuf:"varint,15,opt,name=first_active,json=firstActive,proto3" json:"first_active,omitempty"`
	// A List of artifacts that had some results.
	NamesWithResponse []string `protobuf:"bytes,5,rep,name=names_with_response,json=namesWithResponse,proto3" json:"names_with_response,omitempty"`
	// The artifact that this status refers to
	Artifact string `protobuf:"bytes,10,opt,name=Artifact,proto3" json:"Artifact,omitempty"`
	// How many log rows we generated
	LogRows int64 `protobuf:"varint,6,opt,name=log_rows,json=logRows,proto3" json:"log_rows,omitempty"`
	// How many files were uploaded in this query.
	UploadedFiles         int64 `protobuf:"varint,11,opt,name=uploaded_files,json=uploadedFiles,proto3" json:"uploaded_files,omitempty"`
	UploadedBytes         int64 `protobuf:"varint,12,opt,name=uploaded_bytes,json=uploadedBytes,proto3" json:"uploaded_bytes,omitempty"`
	ExpectedUploadedBytes int64 `protobuf:"varint,13,opt,name=expected_uploaded_bytes,json=expectedUploadedBytes,proto3" json:"expected_uploaded_bytes,omitempty"`
	ResultRows            int64 `protobuf:"varint,7,opt,name=result_rows,json=resultRows,proto3" json:"result_rows,omitempty"`
	// This status corresponds to this query number out of the total
	// in this collection.
	QueryId      int64 `protobuf:"varint,8,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	TotalQueries int64 `protobuf:"varint,9,opt,name=total_queries,json=totalQueries,proto3" json:"total_queries,omitempty"`
}

func (x *VeloStatus) Reset() {
	*x = VeloStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VeloStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VeloStatus) ProtoMessage() {}

func (x *VeloStatus) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VeloStatus.ProtoReflect.Descriptor instead.
func (*VeloStatus) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{5}
}

func (x *VeloStatus) GetStatus() VeloStatus_ReturnedStatus {
	if x != nil {
		return x.Status
	}
	return VeloStatus_OK
}

func (x *VeloStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *VeloStatus) GetBacktrace() string {
	if x != nil {
		return x.Backtrace
	}
	return ""
}

func (x *VeloStatus) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VeloStatus) GetLastActive() uint64 {
	if x != nil {
		return x.LastActive
	}
	return 0
}

func (x *VeloStatus) GetFirstActive() uint64 {
	if x != nil {
		return x.FirstActive
	}
	return 0
}

func (x *VeloStatus) GetNamesWithResponse() []string {
	if x != nil {
		return x.NamesWithResponse
	}
	return nil
}

func (x *VeloStatus) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *VeloStatus) GetLogRows() int64 {
	if x != nil {
		return x.LogRows
	}
	return 0
}

func (x *VeloStatus) GetUploadedFiles() int64 {
	if x != nil {
		return x.UploadedFiles
	}
	return 0
}

func (x *VeloStatus) GetUploadedBytes() int64 {
	if x != nil {
		return x.UploadedBytes
	}
	return 0
}

func (x *VeloStatus) GetExpectedUploadedBytes() int64 {
	if x != nil {
		return x.ExpectedUploadedBytes
	}
	return 0
}

func (x *VeloStatus) GetResultRows() int64 {
	if x != nil {
		return x.ResultRows
	}
	return 0
}

func (x *VeloStatus) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *VeloStatus) GetTotalQueries() int64 {
	if x != nil {
		return x.TotalQueries
	}
	return 0
}

// This is a list of job messages.
type MessageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job []*VeloMessage `protobuf:"bytes,1,rep,name=job,proto3" json:"job,omitempty"`
}

func (x *MessageList) Reset() {
	*x = MessageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageList) ProtoMessage() {}

func (x *MessageList) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageList.ProtoReflect.Descriptor instead.
func (*MessageList) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{6}
}

func (x *MessageList) GetJob() []*VeloMessage {
	if x != nil {
		return x.Job
	}
	return nil
}

// This is the protobuf which is transmitted on the wire
type PackedMessageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How the message_list element is compressed.
	Compression PackedMessageList_CompressionType `protobuf:"varint,4,opt,name=compression,proto3,enum=proto.PackedMessageList_CompressionType" json:"compression,omitempty"`
	// A serialized and compressed MessageList for signing
	MessageList [][]byte `protobuf:"bytes,1,rep,name=message_list,json=messageList,proto3" json:"message_list,omitempty"`
	Timestamp   uint64   `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce       string   `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *PackedMessageList) Reset() {
	*x = PackedMessageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackedMessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedMessageList) ProtoMessage() {}

func (x *PackedMessageList) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedMessageList.ProtoReflect.Descriptor instead.
func (*PackedMessageList) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{7}
}

func (x *PackedMessageList) GetCompression() PackedMessageList_CompressionType {
	if x != nil {
		return x.Compression
	}
	return PackedMessageList_UNCOMPRESSED
}

func (x *PackedMessageList) GetMessageList() [][]byte {
	if x != nil {
		return x.MessageList
	}
	return nil
}

func (x *PackedMessageList) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PackedMessageList) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

// A cacheable object carrying key material that is reused between
// packets. Can be re-verified on demand but it is retransmitted on
// each packet and cached on each end.
type CipherProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// This IV is used to encrypt the cipher metadata block. Note: Both the
	// CipherProperties() and the CipherMetadata() protobufs do not change for all
	// messages in this session.
	MetadataIv []byte `protobuf:"bytes,3,opt,name=metadata_iv,json=metadataIv,proto3" json:"metadata_iv,omitempty"`
	// The key used for the hmac.
	HmacKey []byte `protobuf:"bytes,5,opt,name=hmac_key,json=hmacKey,proto3" json:"hmac_key,omitempty"`
	// The API version of the cipher.
	HmacType CipherProperties_HMACType `protobuf:"varint,6,opt,name=hmac_type,json=hmacType,proto3,enum=proto.CipherProperties_HMACType" json:"hmac_type,omitempty"`
}

func (x *CipherProperties) Reset() {
	*x = CipherProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CipherProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CipherProperties) ProtoMessage() {}

func (x *CipherProperties) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CipherProperties.ProtoReflect.Descriptor instead.
func (*CipherProperties) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{8}
}

func (x *CipherProperties) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CipherProperties) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CipherProperties) GetMetadataIv() []byte {
	if x != nil {
		return x.MetadataIv
	}
	return nil
}

func (x *CipherProperties) GetHmacKey() []byte {
	if x != nil {
		return x.HmacKey
	}
	return nil
}

func (x *CipherProperties) GetHmacType() CipherProperties_HMACType {
	if x != nil {
		return x.HmacType
	}
	return CipherProperties_SIMPLE_HMAC
}

type CipherMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// The signature of the encrypted cipher block.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CipherMetadata) Reset() {
	*x = CipherMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CipherMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CipherMetadata) ProtoMessage() {}

func (x *CipherMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CipherMetadata.ProtoReflect.Descriptor instead.
func (*CipherMetadata) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{9}
}

func (x *CipherMetadata) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CipherMetadata) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// The protobuf actually sent in the POST request (or received in the GET).
// Next field: 11
type ClientCommunication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This message is a serialized PackedMessageList() protobuf, encrypted using
	// the session key (Encrypted inside field 2) and the per-packet IV (field 8).
	Encrypted []byte `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// This is a CipherProperties() protobuf encrypted with the public key of the
	// receiver. Contains the session key and iv, as well as hmac key. This IV
	// does not change for the duration of the session. It is used to decrypt the
	// CipherMetadata() (field 9).
	EncryptedCipher []byte `protobuf:"bytes,2,opt,name=encrypted_cipher,json=encryptedCipher,proto3" json:"encrypted_cipher,omitempty"`
	// A serialized CipherMetadata() protobuf, encrypted with the session
	// key. Contains the RSA signature of the digest of the serialized
	// CipherProperties() above, signed with the sender's private key.
	EncryptedCipherMetadata []byte `protobuf:"bytes,9,opt,name=encrypted_cipher_metadata,json=encryptedCipherMetadata,proto3" json:"encrypted_cipher_metadata,omitempty"`
	// This iv is used to encrypt the encrypted field (No. 1). This IV changes for
	// each packet.
	PacketIv []byte                     `protobuf:"bytes,8,opt,name=packet_iv,json=packetIv,proto3" json:"packet_iv,omitempty"`
	Status   ClientCommunication_Status `protobuf:"varint,5,opt,name=status,proto3,enum=proto.ClientCommunication_Status" json:"status,omitempty"`
	// Communication version:
	// 3 - All versions before release 0.6.8
	// 4 - Release 0.6.8
	ApiVersion uint32 `protobuf:"varint,6,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// This is the FULL_HMAC. It covers:
	// 1) the "encrypted" field,
	// 2) The "encrypted_cipher" field.
	// 3) The encrypted_cipher_metadata field
	// 4) The packet iv
	// 5) the api_version.
	FullHmac []byte `protobuf:"bytes,10,opt,name=full_hmac,json=fullHmac,proto3" json:"full_hmac,omitempty"`
	// While the message is being processed, we send padding
	// periodically to the client to kep the client connection up and
	// keep the client waiting for the message to be processed. This
	// padding can be ignored.
	Padding []uint64 `protobuf:"varint,11,rep,packed,name=padding,proto3" json:"padding,omitempty"`
}

func (x *ClientCommunication) Reset() {
	*x = ClientCommunication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCommunication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCommunication) ProtoMessage() {}

func (x *ClientCommunication) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCommunication.ProtoReflect.Descriptor instead.
func (*ClientCommunication) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{10}
}

func (x *ClientCommunication) GetEncrypted() []byte {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (x *ClientCommunication) GetEncryptedCipher() []byte {
	if x != nil {
		return x.EncryptedCipher
	}
	return nil
}

func (x *ClientCommunication) GetEncryptedCipherMetadata() []byte {
	if x != nil {
		return x.EncryptedCipherMetadata
	}
	return nil
}

func (x *ClientCommunication) GetPacketIv() []byte {
	if x != nil {
		return x.PacketIv
	}
	return nil
}

func (x *ClientCommunication) GetStatus() ClientCommunication_Status {
	if x != nil {
		return x.Status
	}
	return ClientCommunication_UNSET
}

func (x *ClientCommunication) GetApiVersion() uint32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (x *ClientCommunication) GetFullHmac() []byte {
	if x != nil {
		return x.FullHmac
	}
	return nil
}

func (x *ClientCommunication) GetPadding() []uint64 {
	if x != nil {
		return x.Padding
	}
	return nil
}

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An incremental ID of the first log message
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// Total number of rows encoded in the jsonl field.
	NumberOfRows uint64 `protobuf:"varint,6,opt,name=number_of_rows,json=numberOfRows,proto3" json:"number_of_rows,omitempty"`
	// A JSONL encoded list of log messages
	Jsonl string `protobuf:"bytes,7,opt,name=jsonl,proto3" json:"jsonl,omitempty"`
	// If any of the messages in jsonl are at error level the first is
	// captured in this string.
	ErrorMessage string `protobuf:"bytes,8,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Deprecated: The fields below are used by older clients and can
	// still be processed by the server but newer clients batch log
	// messages in the jsonl field above.
	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The artifact name that we were running at the time.
	Artifact string `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// DEFAULT, ERROR, DEBUG
	Level string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{11}
}

func (x *LogMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogMessage) GetNumberOfRows() uint64 {
	if x != nil {
		return x.NumberOfRows
	}
	return 0
}

func (x *LogMessage) GetJsonl() string {
	if x != nil {
		return x.Jsonl
	}
	return ""
}

func (x *LogMessage) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *LogMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogMessage) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LogMessage) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *LogMessage) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

// Message written to the data store with the PEM of the client's
// public key.
type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pem []byte `protobuf:"bytes,1,opt,name=pem,proto3" json:"pem,omitempty"`
	// The timestamp when the key was saved (the client
	// enrolled). This is used to deduce the first_seen_time.
	EnrollTime uint64 `protobuf:"varint,2,opt,name=enroll_time,json=enrollTime,proto3" json:"enroll_time,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{12}
}

func (x *PublicKey) GetPem() []byte {
	if x != nil {
		return x.Pem
	}
	return nil
}

func (x *PublicKey) GetEnrollTime() uint64 {
	if x != nil {
		return x.EnrollTime
	}
	return 0
}

var File_jobs_proto protoreflect.FileDescriptor

var file_jobs_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x96, 0x02, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x10, 0x56, 0x51, 0x4c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x51, 0x4c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x10, 0x56, 0x51, 0x4c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x6c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x51, 0x4c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0xab, 0x0c, 0x0a, 0x0b, 0x56,
	0x65, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40,
	0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x3a, 0x12, 0x38, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c,
	0x6f, 0x77, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x2e,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x56, 0xe2, 0xfc, 0xe3, 0xc4,
	0x01, 0x50, 0x12, 0x4e, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x28, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x31,
	0x29, 0x2e, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75,
	0x72, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3c, 0xe2, 0xfc, 0xe3, 0xc4,
	0x01, 0x36, 0x12, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x31, 0x2e, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6c, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d,
	0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x0e, 0x46,
	0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x31, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x03, 0x43, 0x53, 0x52, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x03, 0x43, 0x53, 0x52, 0x12, 0x34, 0x0a, 0x0b, 0x56, 0x51, 0x4c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0b, 0x56, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x40, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x51, 0x4c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x56, 0x51, 0x4c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x51, 0x4c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0f, 0x56, 0x51, 0x4c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x06, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x69, 0x6e, 0x52, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x4b, 0x69, 0x6c, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x4b, 0x69, 0x6c,
	0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x0c, 0x4b, 0x69, 0x6c, 0x6c, 0x4b, 0x69, 0x6c, 0x6c,
	0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x8d, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x79, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x73, 0x12, 0x71, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x73, 0x65, 0x74, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x73,
	0x5f, 0x72, 0x64, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x72, 0x67, 0x73, 0x52, 0x64, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x12, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x1f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x22, 0x26, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x22, 0x7e, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x63, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x6e, 0x22, 0x20,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x52, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x52, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x41, 0x10, 0x02,
	0x22, 0xac, 0x03, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0xf2, 0x04, 0x0a, 0x0a, 0x56, 0x65, 0x6c, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x0e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x0a, 0x22, 0x33, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xf0, 0x05, 0x0a, 0x11, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x4e, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x48, 0x0a, 0x0b, 0x52, 0x44, 0x46, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x2e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0xc6, 0x03, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xaf, 0x03, 0xe2,
	0xfc, 0xe3, 0xc4, 0x01, 0xa8, 0x03, 0x12, 0xa5, 0x03, 0x41, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x20, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x20, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6d,
	0x61, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
	0x79, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x20, 0x4e, 0x4f, 0x54, 0x45, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x77, 0x65, 0x61, 0x6b, 0x20, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x20, 0x2d, 0x20, 0x61, 0x6e, 0x79, 0x6f, 0x6e, 0x65, 0x20, 0x77, 0x68, 0x6f,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20,
	0x69, 0x74, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x69, 0x74, 0x20, 0x61, 0x20, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6a,
	0x6f, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x72, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x20, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4f,
	0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0xa4, 0x02, 0x0a,
	0x10, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x15, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x0f, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x76, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x15, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x0f, 0x0a, 0x0d, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x76, 0x12, 0x30, 0x0a, 0x08, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x15, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x0f,
	0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x07, 0x68, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x68, 0x6d, 0x61, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x48, 0x4d, 0x41, 0x43, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68,
	0x6d, 0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2a, 0x0a, 0x08, 0x48, 0x4d, 0x41, 0x43, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x48, 0x4d,
	0x41, 0x43, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x48, 0x4d, 0x41,
	0x43, 0x10, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x49, 0x0a, 0x06,
	0x52, 0x44, 0x46, 0x55, 0x52, 0x4e, 0x12, 0x3f, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x2e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa4, 0x03,
	0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x15, 0xe2,
	0xfc, 0xe3, 0xc4, 0x01, 0x0f, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x76, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x48, 0x6d, 0x61, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x22, 0x41, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0xc8, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x90,
	0x03, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x96, 0x03, 0x22, 0xd2, 0x02, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x73, 0x6f,
	0x6e, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x24, 0x12, 0x22, 0x54,
	0x68, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65,
	0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3d, 0xe2,
	0xfc, 0xe3, 0xc4, 0x01, 0x37, 0x0a, 0x0b, 0x52, 0x44, 0x46, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x77, 0x61,
	0x73, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3e, 0x0a, 0x09, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x77, 0x77, 0x77,
	0x2e, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x72, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jobs_proto_rawDescOnce sync.Once
	file_jobs_proto_rawDescData = file_jobs_proto_rawDesc
)

func file_jobs_proto_rawDescGZIP() []byte {
	file_jobs_proto_rawDescOnce.Do(func() {
		file_jobs_proto_rawDescData = protoimpl.X.CompressGZIP(file_jobs_proto_rawDescData)
	})
	return file_jobs_proto_rawDescData
}

var file_jobs_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_jobs_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_jobs_proto_goTypes = []interface{}{
	(VeloMessage_AuthorizationState)(0),    // 0: proto.VeloMessage.AuthorizationState
	(VeloMessage_Type)(0),                  // 1: proto.VeloMessage.Type
	(Certificate_Type)(0),                  // 2: proto.Certificate.Type
	(VeloStatus_ReturnedStatus)(0),         // 3: proto.VeloStatus.ReturnedStatus
	(PackedMessageList_CompressionType)(0), // 4: proto.PackedMessageList.CompressionType
	(CipherProperties_HMACType)(0),         // 5: proto.CipherProperties.HMACType
	(ClientCommunication_Status)(0),        // 6: proto.ClientCommunication.Status
	(*FlowRequest)(nil),                    // 7: proto.FlowRequest
	(*VeloMessage)(nil),                    // 8: proto.VeloMessage
	(*Cancel)(nil),                         // 9: proto.Cancel
	(*Certificate)(nil),                    // 10: proto.Certificate
	(*FlowStats)(nil),                      // 11: proto.FlowStats
	(*VeloStatus)(nil),                     // 12: proto.VeloStatus
	(*MessageList)(nil),                    // 13: proto.MessageList
	(*PackedMessageList)(nil),              // 14: proto.PackedMessageList
	(*CipherProperties)(nil),               // 15: proto.CipherProperties
	(*CipherMetadata)(nil),                 // 16: proto.CipherMetadata
	(*ClientCommunication)(nil),            // 17: proto.ClientCommunication
	(*LogMessage)(nil),                     // 18: proto.LogMessage
	(*PublicKey)(nil),                      // 19: proto.PublicKey
	(*proto.VQLCollectorArgs)(nil),         // 20: proto.VQLCollectorArgs
	(*proto.ForemanCheckin)(nil),           // 21: proto.ForemanCheckin
	(*proto.FileBuffer)(nil),               // 22: proto.FileBuffer
	(*proto.VQLResponse)(nil),              // 23: proto.VQLResponse
	(*proto.VQLEventTable)(nil),            // 24: proto.VQLEventTable
}
var file_jobs_proto_depIdxs = []int32{
	20, // 0: proto.FlowRequest.VQLClientActions:type_name -> proto.VQLCollectorArgs
	20, // 1: proto.FlowRequest.trace:type_name -> proto.VQLCollectorArgs
	0,  // 2: proto.VeloMessage.auth_state:type_name -> proto.VeloMessage.AuthorizationState
	11, // 3: proto.VeloMessage.flow_stats:type_name -> proto.FlowStats
	12, // 4: proto.VeloMessage.status:type_name -> proto.VeloStatus
	21, // 5: proto.VeloMessage.ForemanCheckin:type_name -> proto.ForemanCheckin
	22, // 6: proto.VeloMessage.FileBuffer:type_name -> proto.FileBuffer
	10, // 7: proto.VeloMessage.CSR:type_name -> proto.Certificate
	23, // 8: proto.VeloMessage.VQLResponse:type_name -> proto.VQLResponse
	18, // 9: proto.VeloMessage.LogMessage:type_name -> proto.LogMessage
	9,  // 10: proto.VeloMessage.Ping:type_name -> proto.Cancel
	24, // 11: proto.VeloMessage.UpdateEventTable:type_name -> proto.VQLEventTable
	20, // 12: proto.VeloMessage.VQLClientAction:type_name -> proto.VQLCollectorArgs
	7,  // 13: proto.VeloMessage.FlowRequest:type_name -> proto.FlowRequest
	9,  // 14: proto.VeloMessage.Cancel:type_name -> proto.Cancel
	21, // 15: proto.VeloMessage.UpdateForeman:type_name -> proto.ForemanCheckin
	9,  // 16: proto.VeloMessage.KillKillKill:type_name -> proto.Cancel
	1,  // 17: proto.VeloMessage.type:type_name -> proto.VeloMessage.Type
	2,  // 18: proto.Certificate.type:type_name -> proto.Certificate.Type
	12, // 19: proto.FlowStats.query_status:type_name -> proto.VeloStatus
	3,  // 20: proto.VeloStatus.status:type_name -> proto.VeloStatus.ReturnedStatus
	8,  // 21: proto.MessageList.job:type_name -> proto.VeloMessage
	4,  // 22: proto.PackedMessageList.compression:type_name -> proto.PackedMessageList.CompressionType
	5,  // 23: proto.CipherProperties.hmac_type:type_name -> proto.CipherProperties.HMACType
	6,  // 24: proto.ClientCommunication.status:type_name -> proto.ClientCommunication.Status
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_jobs_proto_init() }
func file_jobs_proto_init() {
	if File_jobs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jobs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VeloMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VeloStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackedMessageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CipherProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CipherMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCommunication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jobs_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jobs_proto_goTypes,
		DependencyIndexes: file_jobs_proto_depIdxs,
		EnumInfos:         file_jobs_proto_enumTypes,
		MessageInfos:      file_jobs_proto_msgTypes,
	}.Build()
	File_jobs_proto = out.File
	file_jobs_proto_rawDesc = nil
	file_jobs_proto_goTypes = nil
	file_jobs_proto_depIdxs = nil
}
