// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jobs.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	proto1 "www.velocidex.com/golang/velociraptor/actions/proto"
	_ "www.velocidex.com/golang/velociraptor/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This is done because signing is done on a group of messages as they arrive
// over the POST, but after decryption and unpacking, messages are queued
// individually and therefore need to retain their authenticated status.
type GrrMessage_AuthorizationState int32

const (
	GrrMessage_UNAUTHENTICATED GrrMessage_AuthorizationState = 0
	GrrMessage_AUTHENTICATED   GrrMessage_AuthorizationState = 1
	// This indicates that clocks are out of sync and this message may be a
	// replay.
	GrrMessage_DESYNCHRONIZED GrrMessage_AuthorizationState = 2
)

var GrrMessage_AuthorizationState_name = map[int32]string{
	0: "UNAUTHENTICATED",
	1: "AUTHENTICATED",
	2: "DESYNCHRONIZED",
}

var GrrMessage_AuthorizationState_value = map[string]int32{
	"UNAUTHENTICATED": 0,
	"AUTHENTICATED":   1,
	"DESYNCHRONIZED":  2,
}

func (x GrrMessage_AuthorizationState) String() string {
	return proto.EnumName(GrrMessage_AuthorizationState_name, int32(x))
}

func (GrrMessage_AuthorizationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{0, 0}
}

// DEPRECATED: Status messages just carry the GrrStatus member.
type GrrMessage_Type int32

const (
	GrrMessage_MESSAGE GrrMessage_Type = 0
	GrrMessage_STATUS  GrrMessage_Type = 1
)

var GrrMessage_Type_name = map[int32]string{
	0: "MESSAGE",
	1: "STATUS",
}

var GrrMessage_Type_value = map[string]int32{
	"MESSAGE": 0,
	"STATUS":  1,
}

func (x GrrMessage_Type) String() string {
	return proto.EnumName(GrrMessage_Type_name, int32(x))
}

func (GrrMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{0, 1}
}

type Certificate_Type int32

const (
	Certificate_CSR Certificate_Type = 0
	Certificate_CRT Certificate_Type = 1
	Certificate_CA  Certificate_Type = 2
)

var Certificate_Type_name = map[int32]string{
	0: "CSR",
	1: "CRT",
	2: "CA",
}

var Certificate_Type_value = map[string]int32{
	"CSR": 0,
	"CRT": 1,
	"CA":  2,
}

func (x Certificate_Type) String() string {
	return proto.EnumName(Certificate_Type_name, int32(x))
}

func (Certificate_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{2, 0}
}

// Velociraptor only uses OK and GENERIC_ERROR right now.
type GrrStatus_ReturnedStatus int32

const (
	GrrStatus_OK            GrrStatus_ReturnedStatus = 0
	GrrStatus_GENERIC_ERROR GrrStatus_ReturnedStatus = 10
)

var GrrStatus_ReturnedStatus_name = map[int32]string{
	0:  "OK",
	10: "GENERIC_ERROR",
}

var GrrStatus_ReturnedStatus_value = map[string]int32{
	"OK":            0,
	"GENERIC_ERROR": 10,
}

func (x GrrStatus_ReturnedStatus) String() string {
	return proto.EnumName(GrrStatus_ReturnedStatus_name, int32(x))
}

func (GrrStatus_ReturnedStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{3, 0}
}

// Currently Velociraptor always compresses all message lists.
type PackedMessageList_CompressionType int32

const (
	PackedMessageList_UNCOMPRESSED PackedMessageList_CompressionType = 0
	// Compressed using the zlib.compress() function.
	PackedMessageList_ZCOMPRESSION PackedMessageList_CompressionType = 1
)

var PackedMessageList_CompressionType_name = map[int32]string{
	0: "UNCOMPRESSED",
	1: "ZCOMPRESSION",
}

var PackedMessageList_CompressionType_value = map[string]int32{
	"UNCOMPRESSED": 0,
	"ZCOMPRESSION": 1,
}

func (x PackedMessageList_CompressionType) String() string {
	return proto.EnumName(PackedMessageList_CompressionType_name, int32(x))
}

func (PackedMessageList_CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{5, 0}
}

type CipherProperties_HMACType int32

const (
	// DEPRECATED: Older clients use a HMAC only on the encrypted message.
	CipherProperties_SIMPLE_HMAC CipherProperties_HMACType = 0
	// Newer clients also include the encrypted cipher and API version in the
	// hmac.
	CipherProperties_FULL_HMAC CipherProperties_HMACType = 1
)

var CipherProperties_HMACType_name = map[int32]string{
	0: "SIMPLE_HMAC",
	1: "FULL_HMAC",
}

var CipherProperties_HMACType_value = map[string]int32{
	"SIMPLE_HMAC": 0,
	"FULL_HMAC":   1,
}

func (x CipherProperties_HMACType) String() string {
	return proto.EnumName(CipherProperties_HMACType_name, int32(x))
}

func (CipherProperties_HMACType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{6, 0}
}

// This status code applies for the entire communication.
type ClientCommunication_Status int32

const (
	ClientCommunication_UNSET        ClientCommunication_Status = 0
	ClientCommunication_OK           ClientCommunication_Status = 200
	ClientCommunication_BAD_REQUEST  ClientCommunication_Status = 400
	ClientCommunication_CIPHER_ERROR ClientCommunication_Status = 406
)

var ClientCommunication_Status_name = map[int32]string{
	0:   "UNSET",
	200: "OK",
	400: "BAD_REQUEST",
	406: "CIPHER_ERROR",
}

var ClientCommunication_Status_value = map[string]int32{
	"UNSET":        0,
	"OK":           200,
	"BAD_REQUEST":  400,
	"CIPHER_ERROR": 406,
}

func (x ClientCommunication_Status) String() string {
	return proto.EnumName(ClientCommunication_Status_name, int32(x))
}

func (ClientCommunication_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{8, 0}
}

// This message is sent between the client and the server.
// Next field: 24
type GrrMessage struct {
	SessionId  string                        `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RequestId  uint64                        `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResponseId uint64                        `protobuf:"varint,3,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	Source     string                        `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	AuthState  GrrMessage_AuthorizationState `protobuf:"varint,7,opt,name=auth_state,json=authState,proto3,enum=proto.GrrMessage_AuthorizationState" json:"auth_state,omitempty"`
	// The id of this message in the scheduler. Based on the
	// timestamp. If this is 0 then the task is not scheduled.
	TaskId uint64 `protobuf:"varint,15,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Generally only one of the following will be set.
	// Client to server:
	Status         *GrrStatus             `protobuf:"bytes,25,opt,name=status,proto3" json:"status,omitempty"`
	ForemanCheckin *proto1.ForemanCheckin `protobuf:"bytes,27,opt,name=ForemanCheckin,proto3" json:"ForemanCheckin,omitempty"`
	FileBuffer     *proto1.FileBuffer     `protobuf:"bytes,28,opt,name=FileBuffer,proto3" json:"FileBuffer,omitempty"`
	CSR            *Certificate           `protobuf:"bytes,29,opt,name=CSR,proto3" json:"CSR,omitempty"`
	VQLResponse    *proto1.VQLResponse    `protobuf:"bytes,33,opt,name=VQLResponse,proto3" json:"VQLResponse,omitempty"`
	LogMessage     *LogMessage            `protobuf:"bytes,34,opt,name=LogMessage,proto3" json:"LogMessage,omitempty"`
	// Server to client:
	UpdateEventTable *proto1.VQLEventTable    `protobuf:"bytes,31,opt,name=UpdateEventTable,proto3" json:"UpdateEventTable,omitempty"`
	VQLClientAction  *proto1.VQLCollectorArgs `protobuf:"bytes,30,opt,name=VQLClientAction,proto3" json:"VQLClientAction,omitempty"`
	Cancel           *Cancel                  `protobuf:"bytes,32,opt,name=Cancel,proto3" json:"Cancel,omitempty"`
	UpdateForeman    *proto1.ForemanCheckin   `protobuf:"bytes,35,opt,name=UpdateForeman,proto3" json:"UpdateForeman,omitempty"`
	// DEPRECATED: The following fields were used as part of the old
	// GrrMessage communication protocol. These fields were replaced
	// by the messages above.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// DEPRECATED: This field contains an encoded rdfvalue. The type of
	// this value is in args_rdf_name.
	Args []byte `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
	// DEPRECATED:
	// The rdfvalue class of the args.
	ArgsRdfName string `protobuf:"bytes,14,opt,name=args_rdf_name,json=argsRdfName,proto3" json:"args_rdf_name,omitempty"`
	// DEPRECATED:
	// The final response to a request carries this type which indicates it is a
	// status message.
	Type                 GrrMessage_Type `protobuf:"varint,8,opt,name=type,proto3,enum=proto.GrrMessage_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GrrMessage) Reset()         { *m = GrrMessage{} }
func (m *GrrMessage) String() string { return proto.CompactTextString(m) }
func (*GrrMessage) ProtoMessage()    {}
func (*GrrMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{0}
}

func (m *GrrMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrrMessage.Unmarshal(m, b)
}
func (m *GrrMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrrMessage.Marshal(b, m, deterministic)
}
func (m *GrrMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrrMessage.Merge(m, src)
}
func (m *GrrMessage) XXX_Size() int {
	return xxx_messageInfo_GrrMessage.Size(m)
}
func (m *GrrMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GrrMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GrrMessage proto.InternalMessageInfo

func (m *GrrMessage) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *GrrMessage) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *GrrMessage) GetResponseId() uint64 {
	if m != nil {
		return m.ResponseId
	}
	return 0
}

func (m *GrrMessage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *GrrMessage) GetAuthState() GrrMessage_AuthorizationState {
	if m != nil {
		return m.AuthState
	}
	return GrrMessage_UNAUTHENTICATED
}

func (m *GrrMessage) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *GrrMessage) GetStatus() *GrrStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GrrMessage) GetForemanCheckin() *proto1.ForemanCheckin {
	if m != nil {
		return m.ForemanCheckin
	}
	return nil
}

func (m *GrrMessage) GetFileBuffer() *proto1.FileBuffer {
	if m != nil {
		return m.FileBuffer
	}
	return nil
}

func (m *GrrMessage) GetCSR() *Certificate {
	if m != nil {
		return m.CSR
	}
	return nil
}

func (m *GrrMessage) GetVQLResponse() *proto1.VQLResponse {
	if m != nil {
		return m.VQLResponse
	}
	return nil
}

func (m *GrrMessage) GetLogMessage() *LogMessage {
	if m != nil {
		return m.LogMessage
	}
	return nil
}

func (m *GrrMessage) GetUpdateEventTable() *proto1.VQLEventTable {
	if m != nil {
		return m.UpdateEventTable
	}
	return nil
}

func (m *GrrMessage) GetVQLClientAction() *proto1.VQLCollectorArgs {
	if m != nil {
		return m.VQLClientAction
	}
	return nil
}

func (m *GrrMessage) GetCancel() *Cancel {
	if m != nil {
		return m.Cancel
	}
	return nil
}

func (m *GrrMessage) GetUpdateForeman() *proto1.ForemanCheckin {
	if m != nil {
		return m.UpdateForeman
	}
	return nil
}

func (m *GrrMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GrrMessage) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *GrrMessage) GetArgsRdfName() string {
	if m != nil {
		return m.ArgsRdfName
	}
	return ""
}

func (m *GrrMessage) GetType() GrrMessage_Type {
	if m != nil {
		return m.Type
	}
	return GrrMessage_MESSAGE
}

type Cancel struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cancel) Reset()         { *m = Cancel{} }
func (m *Cancel) String() string { return proto.CompactTextString(m) }
func (*Cancel) ProtoMessage()    {}
func (*Cancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{1}
}

func (m *Cancel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cancel.Unmarshal(m, b)
}
func (m *Cancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cancel.Marshal(b, m, deterministic)
}
func (m *Cancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cancel.Merge(m, src)
}
func (m *Cancel) XXX_Size() int {
	return xxx_messageInfo_Cancel.Size(m)
}
func (m *Cancel) XXX_DiscardUnknown() {
	xxx_messageInfo_Cancel.DiscardUnknown(m)
}

var xxx_messageInfo_Cancel proto.InternalMessageInfo

// Certificates are exchanged with this.
type Certificate struct {
	Type                 Certificate_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.Certificate_Type" json:"type,omitempty"`
	Pem                  []byte           `protobuf:"bytes,2,opt,name=pem,proto3" json:"pem,omitempty"`
	Cn                   string           `protobuf:"bytes,3,opt,name=cn,proto3" json:"cn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{2}
}

func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetType() Certificate_Type {
	if m != nil {
		return m.Type
	}
	return Certificate_CSR
}

func (m *Certificate) GetPem() []byte {
	if m != nil {
		return m.Pem
	}
	return nil
}

func (m *Certificate) GetCn() string {
	if m != nil {
		return m.Cn
	}
	return ""
}

// This is a status response that is sent for each complete
// transaction. It is always the last message in the transaction.
type GrrStatus struct {
	Status               GrrStatus_ReturnedStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.GrrStatus_ReturnedStatus" json:"status,omitempty"`
	ErrorMessage         string                   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Backtrace            string                   `protobuf:"bytes,3,opt,name=backtrace,proto3" json:"backtrace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GrrStatus) Reset()         { *m = GrrStatus{} }
func (m *GrrStatus) String() string { return proto.CompactTextString(m) }
func (*GrrStatus) ProtoMessage()    {}
func (*GrrStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{3}
}

func (m *GrrStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrrStatus.Unmarshal(m, b)
}
func (m *GrrStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrrStatus.Marshal(b, m, deterministic)
}
func (m *GrrStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrrStatus.Merge(m, src)
}
func (m *GrrStatus) XXX_Size() int {
	return xxx_messageInfo_GrrStatus.Size(m)
}
func (m *GrrStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GrrStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GrrStatus proto.InternalMessageInfo

func (m *GrrStatus) GetStatus() GrrStatus_ReturnedStatus {
	if m != nil {
		return m.Status
	}
	return GrrStatus_OK
}

func (m *GrrStatus) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GrrStatus) GetBacktrace() string {
	if m != nil {
		return m.Backtrace
	}
	return ""
}

// This is a list of job messages.
type MessageList struct {
	Job                  []*GrrMessage `protobuf:"bytes,1,rep,name=job,proto3" json:"job,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MessageList) Reset()         { *m = MessageList{} }
func (m *MessageList) String() string { return proto.CompactTextString(m) }
func (*MessageList) ProtoMessage()    {}
func (*MessageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{4}
}

func (m *MessageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageList.Unmarshal(m, b)
}
func (m *MessageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageList.Marshal(b, m, deterministic)
}
func (m *MessageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageList.Merge(m, src)
}
func (m *MessageList) XXX_Size() int {
	return xxx_messageInfo_MessageList.Size(m)
}
func (m *MessageList) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageList.DiscardUnknown(m)
}

var xxx_messageInfo_MessageList proto.InternalMessageInfo

func (m *MessageList) GetJob() []*GrrMessage {
	if m != nil {
		return m.Job
	}
	return nil
}

// This is the protobuf which is transmitted on the wire
type PackedMessageList struct {
	// How the message_list element is compressed.
	Compression PackedMessageList_CompressionType `protobuf:"varint,4,opt,name=compression,proto3,enum=proto.PackedMessageList_CompressionType" json:"compression,omitempty"`
	// A serialized and compressed MessageList for signing
	MessageList          [][]byte `protobuf:"bytes,1,rep,name=message_list,json=messageList,proto3" json:"message_list,omitempty"`
	Source               string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Timestamp            uint64   `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce                string   `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackedMessageList) Reset()         { *m = PackedMessageList{} }
func (m *PackedMessageList) String() string { return proto.CompactTextString(m) }
func (*PackedMessageList) ProtoMessage()    {}
func (*PackedMessageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{5}
}

func (m *PackedMessageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackedMessageList.Unmarshal(m, b)
}
func (m *PackedMessageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackedMessageList.Marshal(b, m, deterministic)
}
func (m *PackedMessageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackedMessageList.Merge(m, src)
}
func (m *PackedMessageList) XXX_Size() int {
	return xxx_messageInfo_PackedMessageList.Size(m)
}
func (m *PackedMessageList) XXX_DiscardUnknown() {
	xxx_messageInfo_PackedMessageList.DiscardUnknown(m)
}

var xxx_messageInfo_PackedMessageList proto.InternalMessageInfo

func (m *PackedMessageList) GetCompression() PackedMessageList_CompressionType {
	if m != nil {
		return m.Compression
	}
	return PackedMessageList_UNCOMPRESSED
}

func (m *PackedMessageList) GetMessageList() [][]byte {
	if m != nil {
		return m.MessageList
	}
	return nil
}

func (m *PackedMessageList) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PackedMessageList) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PackedMessageList) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

// A cacheable object carrying key material that is reused between
// packets. Can be re-verified on demand but it is retransmitted on
// each packet and cached on each end.
type CipherProperties struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// This IV is used to encrypt the cipher metadata block. Note: Both the
	// CipherProperties() and the CipherMetadata() protobufs do not change for all
	// messages in this session.
	MetadataIv []byte `protobuf:"bytes,3,opt,name=metadata_iv,json=metadataIv,proto3" json:"metadata_iv,omitempty"`
	// The key used for the hmac.
	HmacKey []byte `protobuf:"bytes,5,opt,name=hmac_key,json=hmacKey,proto3" json:"hmac_key,omitempty"`
	// The API version of the cipher.
	HmacType             CipherProperties_HMACType `protobuf:"varint,6,opt,name=hmac_type,json=hmacType,proto3,enum=proto.CipherProperties_HMACType" json:"hmac_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CipherProperties) Reset()         { *m = CipherProperties{} }
func (m *CipherProperties) String() string { return proto.CompactTextString(m) }
func (*CipherProperties) ProtoMessage()    {}
func (*CipherProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{6}
}

func (m *CipherProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CipherProperties.Unmarshal(m, b)
}
func (m *CipherProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CipherProperties.Marshal(b, m, deterministic)
}
func (m *CipherProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CipherProperties.Merge(m, src)
}
func (m *CipherProperties) XXX_Size() int {
	return xxx_messageInfo_CipherProperties.Size(m)
}
func (m *CipherProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_CipherProperties.DiscardUnknown(m)
}

var xxx_messageInfo_CipherProperties proto.InternalMessageInfo

func (m *CipherProperties) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CipherProperties) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CipherProperties) GetMetadataIv() []byte {
	if m != nil {
		return m.MetadataIv
	}
	return nil
}

func (m *CipherProperties) GetHmacKey() []byte {
	if m != nil {
		return m.HmacKey
	}
	return nil
}

func (m *CipherProperties) GetHmacType() CipherProperties_HMACType {
	if m != nil {
		return m.HmacType
	}
	return CipherProperties_SIMPLE_HMAC
}

type CipherMetadata struct {
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// The signature of the encrypted cipher block.
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CipherMetadata) Reset()         { *m = CipherMetadata{} }
func (m *CipherMetadata) String() string { return proto.CompactTextString(m) }
func (*CipherMetadata) ProtoMessage()    {}
func (*CipherMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{7}
}

func (m *CipherMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CipherMetadata.Unmarshal(m, b)
}
func (m *CipherMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CipherMetadata.Marshal(b, m, deterministic)
}
func (m *CipherMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CipherMetadata.Merge(m, src)
}
func (m *CipherMetadata) XXX_Size() int {
	return xxx_messageInfo_CipherMetadata.Size(m)
}
func (m *CipherMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CipherMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CipherMetadata proto.InternalMessageInfo

func (m *CipherMetadata) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *CipherMetadata) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// The protobuf actually sent in the POST request (or received in the GET).
// Next field: 11
type ClientCommunication struct {
	// This message is a serialized PackedMessageList() protobuf, encrypted using
	// the session key (Encrypted inside field 2) and the per-packet IV (field 8).
	Encrypted []byte `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// This is a CipherProperties() protobuf encrypted with the public key of the
	// receiver. Contains the session key and iv, as well as hmac key. This IV
	// does not change for the duration of the session. It is used to decrypt the
	// CipherMetadata() (field 9).
	EncryptedCipher []byte `protobuf:"bytes,2,opt,name=encrypted_cipher,json=encryptedCipher,proto3" json:"encrypted_cipher,omitempty"`
	// A serialized CipherMetadata() protobuf, encrypted with the session
	// key. Contains the RSA signature of the digest of the serialized
	// CipherProperties() above, signed with the sender's private key.
	EncryptedCipherMetadata []byte `protobuf:"bytes,9,opt,name=encrypted_cipher_metadata,json=encryptedCipherMetadata,proto3" json:"encrypted_cipher_metadata,omitempty"`
	// This iv is used to encrypt the encrypted field (No. 1). This IV changes for
	// each packet.
	PacketIv   []byte                     `protobuf:"bytes,8,opt,name=packet_iv,json=packetIv,proto3" json:"packet_iv,omitempty"`
	Status     ClientCommunication_Status `protobuf:"varint,5,opt,name=status,proto3,enum=proto.ClientCommunication_Status" json:"status,omitempty"`
	ApiVersion uint32                     `protobuf:"varint,6,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// This is the FULL_HMAC. It covers:
	// 1) the "encrypted" field,
	// 2) The "encrypted_cipher" field.
	// 3) The encrypted_cipher_metadata field
	// 4) The packet iv
	// 5) the api_version.
	FullHmac []byte `protobuf:"bytes,10,opt,name=full_hmac,json=fullHmac,proto3" json:"full_hmac,omitempty"`
	// While the message is being processed, we send padding
	// periodically to the client to kep the client connection up and
	// keep the client waiting for the message to be processed. This
	// padding can be ignored.
	Padding              []uint64 `protobuf:"varint,11,rep,packed,name=padding,proto3" json:"padding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientCommunication) Reset()         { *m = ClientCommunication{} }
func (m *ClientCommunication) String() string { return proto.CompactTextString(m) }
func (*ClientCommunication) ProtoMessage()    {}
func (*ClientCommunication) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{8}
}

func (m *ClientCommunication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientCommunication.Unmarshal(m, b)
}
func (m *ClientCommunication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientCommunication.Marshal(b, m, deterministic)
}
func (m *ClientCommunication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientCommunication.Merge(m, src)
}
func (m *ClientCommunication) XXX_Size() int {
	return xxx_messageInfo_ClientCommunication.Size(m)
}
func (m *ClientCommunication) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientCommunication.DiscardUnknown(m)
}

var xxx_messageInfo_ClientCommunication proto.InternalMessageInfo

func (m *ClientCommunication) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *ClientCommunication) GetEncryptedCipher() []byte {
	if m != nil {
		return m.EncryptedCipher
	}
	return nil
}

func (m *ClientCommunication) GetEncryptedCipherMetadata() []byte {
	if m != nil {
		return m.EncryptedCipherMetadata
	}
	return nil
}

func (m *ClientCommunication) GetPacketIv() []byte {
	if m != nil {
		return m.PacketIv
	}
	return nil
}

func (m *ClientCommunication) GetStatus() ClientCommunication_Status {
	if m != nil {
		return m.Status
	}
	return ClientCommunication_UNSET
}

func (m *ClientCommunication) GetApiVersion() uint32 {
	if m != nil {
		return m.ApiVersion
	}
	return 0
}

func (m *ClientCommunication) GetFullHmac() []byte {
	if m != nil {
		return m.FullHmac
	}
	return nil
}

func (m *ClientCommunication) GetPadding() []uint64 {
	if m != nil {
		return m.Padding
	}
	return nil
}

type LogMessage struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp            uint64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogMessage) Reset()         { *m = LogMessage{} }
func (m *LogMessage) String() string { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()    {}
func (*LogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{9}
}

func (m *LogMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogMessage.Unmarshal(m, b)
}
func (m *LogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogMessage.Marshal(b, m, deterministic)
}
func (m *LogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessage.Merge(m, src)
}
func (m *LogMessage) XXX_Size() int {
	return xxx_messageInfo_LogMessage.Size(m)
}
func (m *LogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessage proto.InternalMessageInfo

func (m *LogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LogMessage) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Message written to the data store with the PEM of the client's
// public key.
type PublicKey struct {
	Pem                  []byte   `protobuf:"bytes,1,opt,name=pem,proto3" json:"pem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_45644d4410f878a7, []int{10}
}

func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKey.Unmarshal(m, b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
}
func (m *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(m, src)
}
func (m *PublicKey) XXX_Size() int {
	return xxx_messageInfo_PublicKey.Size(m)
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetPem() []byte {
	if m != nil {
		return m.Pem
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.GrrMessage_AuthorizationState", GrrMessage_AuthorizationState_name, GrrMessage_AuthorizationState_value)
	proto.RegisterEnum("proto.GrrMessage_Type", GrrMessage_Type_name, GrrMessage_Type_value)
	proto.RegisterEnum("proto.Certificate_Type", Certificate_Type_name, Certificate_Type_value)
	proto.RegisterEnum("proto.GrrStatus_ReturnedStatus", GrrStatus_ReturnedStatus_name, GrrStatus_ReturnedStatus_value)
	proto.RegisterEnum("proto.PackedMessageList_CompressionType", PackedMessageList_CompressionType_name, PackedMessageList_CompressionType_value)
	proto.RegisterEnum("proto.CipherProperties_HMACType", CipherProperties_HMACType_name, CipherProperties_HMACType_value)
	proto.RegisterEnum("proto.ClientCommunication_Status", ClientCommunication_Status_name, ClientCommunication_Status_value)
	proto.RegisterType((*GrrMessage)(nil), "proto.GrrMessage")
	proto.RegisterType((*Cancel)(nil), "proto.Cancel")
	proto.RegisterType((*Certificate)(nil), "proto.Certificate")
	proto.RegisterType((*GrrStatus)(nil), "proto.GrrStatus")
	proto.RegisterType((*MessageList)(nil), "proto.MessageList")
	proto.RegisterType((*PackedMessageList)(nil), "proto.PackedMessageList")
	proto.RegisterType((*CipherProperties)(nil), "proto.CipherProperties")
	proto.RegisterType((*CipherMetadata)(nil), "proto.CipherMetadata")
	proto.RegisterType((*ClientCommunication)(nil), "proto.ClientCommunication")
	proto.RegisterType((*LogMessage)(nil), "proto.LogMessage")
	proto.RegisterType((*PublicKey)(nil), "proto.PublicKey")
}

func init() {
	proto.RegisterFile("jobs.proto", fileDescriptor_45644d4410f878a7)
}

var fileDescriptor_45644d4410f878a7 = []byte{
	// 1951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x57, 0xdd, 0x72, 0x1b, 0x49,
	0x15, 0x8e, 0x2c, 0x5b, 0xb6, 0x8e, 0xfc, 0xa3, 0xf4, 0xee, 0x92, 0x49, 0x36, 0x21, 0x9d, 0x49,
	0x28, 0x94, 0x2c, 0x28, 0xac, 0x09, 0xfb, 0x07, 0x29, 0x56, 0x96, 0xe5, 0x58, 0xc4, 0x96, 0x9d,
	0x96, 0x6c, 0x8a, 0x50, 0x94, 0xaa, 0x35, 0xd3, 0x96, 0x26, 0x1e, 0x4d, 0x4f, 0xba, 0x7b, 0xac,
	0x88, 0x0b, 0x2e, 0xb8, 0xa7, 0x8a, 0x2b, 0x78, 0x81, 0xa5, 0x8a, 0xbb, 0xbd, 0xe1, 0x09, 0x28,
	0x8a, 0xe2, 0x39, 0xe0, 0x35, 0xb8, 0xa0, 0xfa, 0xcc, 0x8c, 0x24, 0xdb, 0x45, 0xae, 0x66, 0xe6,
	0xfc, 0xf7, 0xf9, 0xf9, 0x4e, 0x0f, 0xc0, 0x1b, 0x39, 0xd0, 0xf5, 0x58, 0x49, 0x23, 0xc9, 0x0a,
	0x3e, 0xee, 0x7c, 0x88, 0x8f, 0xa7, 0x5a, 0x8c, 0x79, 0x64, 0x02, 0x2f, 0x65, 0xde, 0xb9, 0xcd,
	0x3d, 0x13, 0xc8, 0x48, 0x3f, 0x4d, 0xb9, 0xa3, 0x24, 0x32, 0x99, 0xde, 0x9d, 0x7b, 0x97, 0x59,
	0x46, 0xf1, 0x48, 0xc7, 0x52, 0x99, 0x8c, 0x7d, 0xeb, 0x32, 0xfb, 0xe2, 0x6d, 0x98, 0x32, 0xdc,
	0xdf, 0x57, 0x00, 0x5e, 0x28, 0x75, 0x28, 0xb4, 0xe6, 0x43, 0x41, 0xfa, 0x00, 0x5a, 0x68, 0x1d,
	0xc8, 0xa8, 0x1f, 0xf8, 0x4e, 0x81, 0x16, 0x6a, 0xe5, 0x9d, 0xaf, 0xff, 0xfd, 0xdf, 0xff, 0xfc,
	0xa3, 0xf0, 0x15, 0xf9, 0xa2, 0x37, 0x12, 0x34, 0xe3, 0xd2, 0xc0, 0xa7, 0xf2, 0x8c, 0x9a, 0x91,
	0xa0, 0x67, 0xa1, 0x9c, 0x50, 0x33, 0xe2, 0x86, 0x9a, 0x51, 0xa0, 0xe9, 0x38, 0xb5, 0x44, 0x07,
	0x22, 0x94, 0xd1, 0x50, 0x53, 0x23, 0xeb, 0xac, 0x9c, 0x69, 0xb5, 0x7d, 0x92, 0x00, 0x28, 0xf1,
	0x36, 0x11, 0xda, 0x58, 0x07, 0x4b, 0xb4, 0x50, 0x5b, 0xde, 0x39, 0x45, 0x07, 0xc7, 0xa4, 0x63,
	0x1d, 0xe4, 0xfa, 0x81, 0xa6, 0x41, 0x44, 0x95, 0xd0, 0xb1, 0x8c, 0xb4, 0xa0, 0x46, 0xa6, 0xe6,
	0x33, 0x65, 0x1a, 0x25, 0xe3, 0x81, 0x50, 0xb4, 0x96, 0x7d, 0x5b, 0x61, 0x4f, 0x89, 0xb1, 0x88,
	0x0c, 0x3d, 0x53, 0x72, 0x4c, 0x3f, 0x7d, 0x5c, 0x67, 0xe5, 0x8c, 0xd9, 0xf6, 0xc9, 0x6f, 0xa0,
	0x92, 0x9b, 0xb2, 0x7e, 0x8b, 0xe8, 0xf7, 0x67, 0xe8, 0xf7, 0x33, 0xf2, 0x8c, 0x65, 0x2c, 0x4d,
	0xcf, 0xa4, 0xa2, 0x82, 0x7b, 0xa3, 0x99, 0x1f, 0xae, 0x04, 0xe5, 0xa1, 0x96, 0x99, 0x43, 0xe1,
	0x67, 0xe6, 0xeb, 0x0c, 0x72, 0x83, 0x6d, 0x9f, 0xf8, 0x50, 0xd2, 0x32, 0x51, 0x9e, 0x70, 0x4a,
	0x98, 0xb2, 0x03, 0xb4, 0xbc, 0x47, 0x76, 0x9b, 0x61, 0x60, 0x43, 0x8a, 0xf8, 0x58, 0xd0, 0xc9,
	0x48, 0x28, 0x81, 0x29, 0xcb, 0xcf, 0xe8, 0x59, 0x32, 0xda, 0xab, 0xed, 0x05, 0x61, 0x28, 0x7c,
	0x7b, 0xe4, 0xc1, 0x34, 0x4d, 0xab, 0x92, 0x91, 0x11, 0x91, 0xff, 0xb8, 0xce, 0x32, 0xdb, 0xa4,
	0x09, 0xc0, 0x13, 0x33, 0xea, 0x6b, 0xc3, 0x8d, 0x70, 0x56, 0x69, 0xa1, 0xb6, 0xb9, 0xfd, 0x28,
	0xad, 0x63, 0x7d, 0x5e, 0xc3, 0x7a, 0x23, 0x31, 0x23, 0xa9, 0x82, 0xdf, 0x72, 0x5b, 0xf1, 0xae,
	0x95, 0x65, 0x65, 0xab, 0x87, 0xaf, 0xe4, 0x16, 0xac, 0x1a, 0xae, 0xcf, 0x6d, 0x16, 0xb6, 0x6c,
	0x16, 0x58, 0xc9, 0x7e, 0xb6, 0x7d, 0x52, 0x83, 0x92, 0x35, 0x9c, 0x68, 0xe7, 0x36, 0x2d, 0xd4,
	0x2a, 0xdb, 0xd5, 0xb9, 0xe5, 0x2e, 0xd2, 0x59, 0xc6, 0x27, 0xcf, 0x61, 0x73, 0x4f, 0x2a, 0xdb,
	0x9a, 0xcd, 0x91, 0xf0, 0xce, 0x83, 0xc8, 0xf9, 0x18, 0x35, 0x3e, 0xca, 0x34, 0x2e, 0x33, 0xd9,
	0x15, 0x61, 0xf2, 0x29, 0xc0, 0x5e, 0x10, 0x8a, 0x9d, 0xe4, 0xec, 0x4c, 0x28, 0xe7, 0x2e, 0xaa,
	0xde, 0xcc, 0x55, 0x67, 0x0c, 0xb6, 0x20, 0x44, 0x1e, 0x41, 0xb1, 0xd9, 0x65, 0xce, 0x3d, 0x94,
	0x25, 0x99, 0x6c, 0x53, 0x28, 0x13, 0x9c, 0x05, 0x9e, 0x3d, 0xa0, 0x65, 0x93, 0x67, 0x50, 0x39,
	0x7d, 0x75, 0x90, 0x17, 0xd3, 0x79, 0x70, 0x49, 0x7a, 0x81, 0xc3, 0x16, 0xc5, 0x6c, 0x38, 0x07,
	0x72, 0x98, 0x25, 0xcf, 0x71, 0x2f, 0x85, 0x33, 0x67, 0xb0, 0x05, 0x21, 0xf2, 0x35, 0x54, 0x4f,
	0x62, 0x9f, 0x1b, 0xd1, 0xba, 0x10, 0x91, 0xe9, 0xf1, 0x41, 0x28, 0x9c, 0xfb, 0xa8, 0xf8, 0xe1,
	0xdc, 0xdb, 0x9c, 0xc7, 0xae, 0x49, 0x93, 0x06, 0x6c, 0x9d, 0xbe, 0x3a, 0x48, 0xbb, 0xa3, 0x81,
	0xa3, 0xe9, 0x7c, 0x17, 0x0d, 0xdc, 0x9a, 0x1b, 0x68, 0xca, 0x30, 0x14, 0x9e, 0x91, 0xaa, 0xa1,
	0x86, 0x9a, 0x5d, 0x95, 0x27, 0xdf, 0x83, 0x52, 0x93, 0x47, 0x9e, 0x08, 0x1d, 0x8a, 0x9a, 0x1b,
	0x79, 0x5a, 0x90, 0xc8, 0x32, 0x26, 0xf9, 0x29, 0x6c, 0xa4, 0xde, 0xb3, 0x2a, 0x38, 0x0f, 0xdf,
	0x57, 0xab, 0xcb, 0xb2, 0xe4, 0x0f, 0x05, 0x58, 0xb6, 0xbd, 0xeb, 0x2c, 0x63, 0x5b, 0x4f, 0xb1,
	0xad, 0x35, 0x79, 0xdb, 0xb3, 0xa3, 0x18, 0x68, 0x6c, 0x54, 0xec, 0xed, 0x0c, 0x0b, 0xbc, 0xb4,
	0xdd, 0x53, 0xb0, 0x49, 0x41, 0x61, 0x12, 0x84, 0x21, 0x1d, 0x08, 0x2a, 0xde, 0x09, 0x2f, 0x31,
	0xc2, 0xaf, 0xd3, 0xb6, 0xb1, 0xaa, 0x5a, 0x98, 0x59, 0xab, 0x5b, 0x04, 0xe1, 0x91, 0x6f, 0xc9,
	0xb9, 0x58, 0xce, 0x4b, 0x2d, 0xd6, 0x19, 0x86, 0x41, 0x08, 0x2c, 0x73, 0x35, 0xd4, 0xce, 0x0a,
	0x2d, 0xd4, 0xd6, 0x19, 0xbe, 0x13, 0x17, 0x36, 0xec, 0xb3, 0xaf, 0xfc, 0xb3, 0x3e, 0xc6, 0xba,
	0x69, 0x63, 0x65, 0x15, 0x4b, 0x64, 0xfe, 0x59, 0xc7, 0xea, 0x3d, 0x81, 0x65, 0x33, 0x8d, 0x85,
	0xb3, 0x86, 0x33, 0xf3, 0x9d, 0xeb, 0x33, 0xd3, 0x9b, 0xc6, 0x82, 0xa1, 0x8c, 0x7b, 0x0c, 0xe4,
	0xfa, 0x04, 0x91, 0x0f, 0x60, 0xeb, 0xa4, 0xd3, 0x38, 0xe9, 0xed, 0xb7, 0x3a, 0xbd, 0x76, 0xb3,
	0xd1, 0x6b, 0xed, 0x56, 0x6f, 0x90, 0x9b, 0xb0, 0x71, 0x99, 0x54, 0x20, 0x04, 0x36, 0x77, 0x5b,
	0xdd, 0x5f, 0x75, 0x9a, 0xfb, 0xec, 0xa8, 0xd3, 0x7e, 0xdd, 0xda, 0xad, 0x2e, 0xb9, 0xf7, 0x61,
	0xd9, 0xda, 0x27, 0x15, 0x58, 0x3d, 0x6c, 0x75, 0xbb, 0x8d, 0x17, 0xad, 0xea, 0x0d, 0x02, 0x50,
	0xea, 0xf6, 0x1a, 0xbd, 0x93, 0x6e, 0xb5, 0xe0, 0xae, 0xe5, 0xa5, 0x74, 0x7f, 0x07, 0x95, 0x85,
	0xb6, 0x26, 0x9f, 0x64, 0x71, 0x17, 0x30, 0xee, 0x5b, 0xd7, 0x1b, 0x7f, 0x21, 0x70, 0x52, 0x85,
	0x62, 0x2c, 0xc6, 0x88, 0xa9, 0xeb, 0xcc, 0xbe, 0x92, 0x4d, 0x58, 0xf2, 0x22, 0x04, 0xbb, 0x32,
	0x5b, 0xf2, 0x22, 0x97, 0x66, 0x81, 0xac, 0xe2, 0x38, 0x55, 0x6f, 0xe0, 0x0b, 0xeb, 0x55, 0x0b,
	0xa4, 0x04, 0x4b, 0xcd, 0x46, 0x75, 0xc9, 0xfd, 0x5b, 0x01, 0xca, 0xb3, 0x81, 0x27, 0x9f, 0xcf,
	0x20, 0x21, 0x0d, 0xe0, 0xfe, 0x55, 0x48, 0xa8, 0x33, 0x61, 0x12, 0x15, 0x09, 0xff, 0x0a, 0x42,
	0x3c, 0x84, 0x0d, 0xa1, 0x94, 0x54, 0xfd, 0x0c, 0xe9, 0x30, 0xa8, 0x32, 0x5b, 0x47, 0x62, 0x3e,
	0x45, 0x77, 0xa1, 0x3c, 0xe0, 0xde, 0xb9, 0x51, 0xdc, 0x13, 0x59, 0x90, 0x73, 0x82, 0xfb, 0x09,
	0x6c, 0x5e, 0x36, 0x6e, 0x63, 0x3c, 0x7a, 0x99, 0x66, 0xfd, 0x45, 0xab, 0xd3, 0x62, 0xed, 0x66,
	0xbf, 0xc5, 0xd8, 0x11, 0xab, 0x82, 0xbb, 0x0d, 0x95, 0xcc, 0xea, 0x41, 0xa0, 0x0d, 0x79, 0x08,
	0xc5, 0x37, 0x72, 0xe0, 0x14, 0x68, 0x71, 0x61, 0x96, 0xe7, 0xd5, 0x66, 0x96, 0xeb, 0xfe, 0xbd,
	0x04, 0x37, 0x8f, 0xb9, 0x77, 0x2e, 0xfc, 0x45, 0xd5, 0x5f, 0x40, 0xc5, 0x93, 0xe3, 0x58, 0xa5,
	0x0b, 0x0b, 0xfb, 0x7e, 0x73, 0xbb, 0x96, 0x99, 0xb8, 0x26, 0x5e, 0x6f, 0xce, 0x65, 0xb1, 0x12,
	0x8b, 0xca, 0xe4, 0x01, 0xac, 0x67, 0xe7, 0xef, 0x87, 0x81, 0x36, 0x18, 0xcf, 0x3a, 0xab, 0x8c,
	0x17, 0xdc, 0x1d, 0xcf, 0x16, 0x07, 0x26, 0x60, 0xe7, 0x0b, 0x9c, 0xb0, 0x6d, 0x28, 0xb1, 0xdd,
	0xbd, 0x13, 0xd6, 0x21, 0x35, 0xdc, 0xb9, 0x28, 0x31, 0xdb, 0x1f, 0x0b, 0x4b, 0x76, 0xb6, 0x40,
	0xe6, 0x4b, 0x22, 0x84, 0xb2, 0x09, 0xc6, 0x42, 0x1b, 0x3e, 0x8e, 0x71, 0x1b, 0x2d, 0xef, 0x74,
	0xd0, 0xe8, 0x3e, 0x54, 0xd8, 0xee, 0xde, 0x2e, 0x37, 0xc2, 0xf2, 0xc9, 0x97, 0xbd, 0xf9, 0xbc,
	0x6a, 0x11, 0xf9, 0x9a, 0x06, 0x46, 0xd3, 0x99, 0xaa, 0x5d, 0xb8, 0xb1, 0x12, 0x16, 0xb1, 0xa8,
	0x12, 0x71, 0xc8, 0xa7, 0x94, 0x1b, 0xc3, 0xbd, 0x73, 0x5d, 0x67, 0x73, 0x07, 0xe4, 0x9f, 0x45,
	0x58, 0x89, 0x64, 0xe4, 0xa5, 0xeb, 0xa8, 0xbc, 0xf3, 0x6d, 0x11, 0x7d, 0xfd, 0xb5, 0x48, 0xfe,
	0x52, 0x6c, 0x50, 0x3d, 0xe2, 0x76, 0x63, 0xa2, 0x00, 0x1d, 0x08, 0x33, 0x11, 0x22, 0xc2, 0xa9,
	0xd6, 0x42, 0x5d, 0x08, 0x85, 0x33, 0x9f, 0x85, 0x30, 0x19, 0x05, 0xde, 0x88, 0x8e, 0x13, 0x6d,
	0x2c, 0x58, 0x0c, 0x83, 0x0b, 0x11, 0x5d, 0x81, 0x00, 0xda, 0x9b, 0x2b, 0x26, 0x76, 0x57, 0x63,
	0x26, 0x8c, 0xa4, 0x22, 0xd2, 0x49, 0xb6, 0x58, 0x33, 0x63, 0xf3, 0xbb, 0x47, 0xea, 0xcd, 0x66,
	0xc9, 0x17, 0x71, 0x28, 0xa7, 0x78, 0x41, 0xe0, 0x7a, 0x21, 0x88, 0x3a, 0xfd, 0x65, 0x60, 0x46,
	0x32, 0xc9, 0xae, 0x2f, 0x9e, 0x05, 0x42, 0xca, 0xa3, 0x69, 0x6e, 0x6b, 0xcc, 0xa7, 0xd4, 0x93,
	0x51, 0x24, 0x3c, 0x63, 0xed, 0x59, 0x4e, 0xae, 0xd8, 0x39, 0xea, 0xb5, 0x52, 0xad, 0x40, 0x53,
	0x4e, 0x27, 0x82, 0x9f, 0x67, 0xfa, 0x3f, 0xb4, 0x72, 0x32, 0xb2, 0x35, 0x93, 0x14, 0x5b, 0x42,
	0x8e, 0x03, 0x1b, 0x33, 0xcf, 0xcd, 0x06, 0x51, 0xaa, 0xb9, 0x10, 0x96, 0xf5, 0x24, 0xde, 0xd9,
	0xee, 0xcf, 0x62, 0x49, 0xf3, 0x86, 0x49, 0x9a, 0x07, 0x80, 0xa0, 0x9a, 0x46, 0xf0, 0x03, 0x3a,
	0x48, 0x0c, 0x0d, 0xac, 0xe6, 0xb9, 0xb0, 0xf5, 0xa3, 0x9c, 0x86, 0x81, 0x31, 0xa1, 0xa0, 0x23,
	0xae, 0x7c, 0xa1, 0xac, 0xfc, 0x1b, 0x19, 0x44, 0x94, 0xd3, 0x53, 0x11, 0x4a, 0x2f, 0x50, 0x3c,
	0x36, 0x52, 0x2d, 0x38, 0xad, 0xb3, 0xb4, 0x7c, 0xee, 0x4f, 0x60, 0xeb, 0x4a, 0x2f, 0x93, 0x2a,
	0xac, 0x9f, 0x74, 0x9a, 0x47, 0x87, 0xc7, 0xac, 0xd5, 0xed, 0x22, 0xde, 0x55, 0x61, 0xfd, 0x75,
	0x4e, 0x68, 0x1f, 0x75, 0xaa, 0x05, 0xf7, 0x9b, 0x25, 0xa8, 0x36, 0x83, 0x78, 0x24, 0xd4, 0xb1,
	0x92, 0xb1, 0xc5, 0x25, 0xa1, 0x2d, 0x4a, 0x23, 0x10, 0xe3, 0xf5, 0x31, 0x43, 0xee, 0xef, 0x43,
	0xf1, 0x5c, 0x4c, 0x53, 0x70, 0xda, 0xf9, 0x08, 0x9b, 0x64, 0x0b, 0x36, 0x5a, 0x91, 0xa7, 0xa6,
	0xb1, 0x45, 0xd9, 0x97, 0x62, 0xca, 0xac, 0x04, 0xf9, 0x0c, 0x2a, 0x63, 0x61, 0xb8, 0xcf, 0x0d,
	0xef, 0x07, 0x17, 0x38, 0x16, 0xff, 0x57, 0x01, 0x72, 0xc9, 0xf6, 0x05, 0xf9, 0x11, 0xac, 0x8d,
	0xc6, 0xdc, 0xeb, 0x5b, 0x2f, 0x2b, 0xef, 0x53, 0x5a, 0xb5, 0x62, 0x2f, 0xc5, 0x94, 0x3c, 0x87,
	0x32, 0x6a, 0x20, 0xc2, 0x96, 0x70, 0xd0, 0x69, 0x8e, 0xb0, 0x57, 0x8e, 0x54, 0xdf, 0x3f, 0x6c,
	0x34, 0x71, 0xc0, 0xd1, 0x89, 0x7d, 0x73, 0x9f, 0xc0, 0x5a, 0x4e, 0x25, 0x5b, 0x50, 0xe9, 0xb6,
	0x0f, 0x8f, 0x0f, 0x5a, 0x7d, 0x4b, 0xaa, 0xde, 0x20, 0x1b, 0x50, 0xde, 0x3b, 0x39, 0x38, 0x48,
	0x3f, 0x0b, 0xee, 0x9f, 0x0b, 0xb0, 0x99, 0xda, 0x3c, 0xcc, 0x22, 0x26, 0xc3, 0xd9, 0xe4, 0xa7,
	0xb7, 0xec, 0x23, 0x8c, 0xb6, 0x3d, 0x9b, 0xfc, 0x9f, 0xe3, 0x7c, 0xca, 0xf1, 0x58, 0x46, 0xe9,
	0x8a, 0x4d, 0xdb, 0x13, 0x8d, 0x50, 0x3d, 0x92, 0x49, 0xe8, 0xdb, 0x49, 0x49, 0xb4, 0xf0, 0x6d,
	0x99, 0xad, 0x64, 0x12, 0xe1, 0x4e, 0xa0, 0x93, 0xc0, 0x8c, 0xe6, 0x80, 0x70, 0x17, 0xca, 0x3a,
	0x18, 0x46, 0xdc, 0x24, 0x4a, 0x64, 0xcb, 0x61, 0x4e, 0x70, 0xbf, 0x29, 0xc2, 0x07, 0xe9, 0xb5,
	0xa2, 0x39, 0xb3, 0x60, 0xb1, 0xeb, 0x2e, 0x94, 0x45, 0x9a, 0x36, 0x91, 0xfe, 0x07, 0xac, 0xb3,
	0x39, 0x81, 0x3c, 0x86, 0xea, 0xec, 0xa3, 0x9f, 0xc6, 0x94, 0x99, 0xde, 0x9a, 0xd1, 0xd3, 0xf3,
	0x92, 0xaf, 0xe0, 0xf6, 0x55, 0xd1, 0x7e, 0x5e, 0x36, 0xa7, 0x8c, 0x3a, 0xb7, 0xae, 0xe8, 0xcc,
	0x72, 0xb4, 0x0d, 0xe5, 0xd8, 0x42, 0xae, 0xb1, 0x9d, 0xb0, 0xf6, 0xbe, 0xa2, 0xae, 0xa5, 0x72,
	0xed, 0x0b, 0xf2, 0xe5, 0x6c, 0x67, 0xad, 0x60, 0x49, 0x1f, 0xe4, 0x25, 0xbd, 0x7e, 0xc8, 0xfa,
	0x95, 0xad, 0x75, 0x1f, 0x2a, 0x3c, 0x0e, 0xfa, 0x17, 0x42, 0x21, 0xf6, 0xdb, 0x96, 0xd8, 0x60,
	0xc0, 0xe3, 0xe0, 0x34, 0xa5, 0x90, 0x8f, 0xa1, 0x7c, 0x96, 0x84, 0x61, 0xdf, 0xf6, 0x80, 0x03,
	0x18, 0xfb, 0x9a, 0x25, 0xec, 0x8f, 0xb9, 0x47, 0x1c, 0x58, 0x8d, 0xb9, 0xef, 0x07, 0xd1, 0xd0,
	0xa9, 0xd0, 0x62, 0x6d, 0x99, 0xe5, 0x9f, 0x6e, 0x03, 0x4a, 0xd9, 0x0a, 0x2b, 0xc3, 0xca, 0x49,
	0xa7, 0xdb, 0xea, 0xe1, 0xea, 0xb5, 0xdb, 0xec, 0x5f, 0x05, 0x52, 0x85, 0xca, 0x4e, 0x63, 0xb7,
	0xcf, 0x5a, 0xaf, 0x4e, 0x5a, 0xdd, 0x5e, 0xf5, 0x8f, 0x45, 0x72, 0x13, 0xd6, 0x9b, 0xed, 0xe3,
	0xfd, 0x16, 0xcb, 0xf6, 0xdb, 0x9f, 0x8a, 0xee, 0xb7, 0x85, 0xc5, 0x5b, 0x2a, 0xd9, 0x85, 0xd5,
	0x7c, 0xb3, 0xa6, 0xdd, 0xf3, 0x04, 0xd3, 0xf2, 0x88, 0xb8, 0x8b, 0xbf, 0x50, 0x46, 0x22, 0xb2,
	0xcf, 0x60, 0x30, 0x85, 0x2d, 0x96, 0xab, 0x92, 0x5f, 0x2f, 0xae, 0x8a, 0xf4, 0x57, 0xec, 0x39,
	0xda, 0xf9, 0xfc, 0xf2, 0xaa, 0xc0, 0x25, 0x64, 0xdf, 0xec, 0x0a, 0x8a, 0x2e, 0xfd, 0xc1, 0x4c,
	0xb8, 0xa6, 0x43, 0x11, 0x09, 0xc5, 0xed, 0xd5, 0x6e, 0x61, 0x33, 0xb8, 0xf7, 0xa0, 0x7c, 0x9c,
	0x0c, 0xc2, 0x00, 0x47, 0x2d, 0xbb, 0x9a, 0x14, 0x66, 0x57, 0x93, 0x9d, 0x67, 0xaf, 0xb7, 0x27,
	0x93, 0x49, 0xfd, 0x02, 0x61, 0xc9, 0x17, 0xef, 0xea, 0x9e, 0x1c, 0x3f, 0x1d, 0xca, 0x90, 0x47,
	0xc3, 0xa7, 0x17, 0x0b, 0x58, 0xf5, 0x14, 0xab, 0x2c, 0xd3, 0xff, 0xd6, 0x41, 0x09, 0x1f, 0x3f,
	0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xde, 0xa0, 0x65, 0x7e, 0x32, 0x0f, 0x00, 0x00,
}
