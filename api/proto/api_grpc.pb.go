// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto2 "www.velocidex.com/golang/velociraptor/actions/proto"
	proto1 "www.velocidex.com/golang/velociraptor/artifacts/proto"
	proto "www.velocidex.com/golang/velociraptor/flows/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// Hunts
	CreateHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*StartFlowResponse, error)
	ListHunts(ctx context.Context, in *ListHuntsRequest, opts ...grpc.CallOption) (*ListHuntsResponse, error)
	GetHunt(ctx context.Context, in *GetHuntRequest, opts ...grpc.CallOption) (*Hunt, error)
	ModifyHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*empty.Empty, error)
	GetHuntFlows(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	GetHuntResults(ctx context.Context, in *GetHuntResultsRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	// Clients.
	NotifyClients(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	LabelClients(ctx context.Context, in *LabelClientsRequest, opts ...grpc.CallOption) (*APIResponse, error)
	ListClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*SearchClientsResponse, error)
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ApiClient, error)
	GetClientMetadata(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ClientMetadata, error)
	SetClientMetadata(ctx context.Context, in *ClientMetadata, opts ...grpc.CallOption) (*empty.Empty, error)
	GetClientFlows(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowResponse, error)
	// Users
	GetUserUITraits(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ApiGrrUser, error)
	SetGUIOptions(ctx context.Context, in *SetGUIOptionsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error)
	GetUserNotificationCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserNotificationCount, error)
	// List all the GUI users known on this server.
	GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error)
	// VFS
	VFSListDirectory(ctx context.Context, in *proto.VFSListRequest, opts ...grpc.CallOption) (*proto.VFSListResponse, error)
	VFSRefreshDirectory(ctx context.Context, in *VFSRefreshDirectoryRequest, opts ...grpc.CallOption) (*proto.ArtifactCollectorResponse, error)
	VFSStatDirectory(ctx context.Context, in *proto.VFSListRequest, opts ...grpc.CallOption) (*proto.VFSListResponse, error)
	VFSStatDownload(ctx context.Context, in *proto.VFSStatDownloadRequest, opts ...grpc.CallOption) (*proto.VFSDownloadInfo, error)
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	// Flows
	CollectArtifact(ctx context.Context, in *proto.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto.ArtifactCollectorResponse, error)
	CancelFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error)
	ArchiveFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error)
	GetFlowDetails(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*FlowDetails, error)
	GetFlowRequests(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowRequestDetails, error)
	GetKeywordCompletions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KeywordCompletions, error)
	// Artifacts
	GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*proto1.ArtifactDescriptors, error)
	GetArtifactFile(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error)
	SetArtifactFile(ctx context.Context, in *SetArtifactRequest, opts ...grpc.CallOption) (*APIResponse, error)
	LoadArtifactPack(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*LoadArtifactPackResponse, error)
	// Tools
	GetToolInfo(ctx context.Context, in *proto1.Tool, opts ...grpc.CallOption) (*proto1.Tool, error)
	SetToolInfo(ctx context.Context, in *proto1.Tool, opts ...grpc.CallOption) (*proto1.Tool, error)
	// Reporting and post processing.
	GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service..
	GetServerMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto.ArtifactCollectorArgs, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service.
	SetServerMonitoringState(ctx context.Context, in *proto.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto.ArtifactCollectorArgs, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	GetClientMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto.ClientEventTable, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	SetClientMonitoringState(ctx context.Context, in *proto.ClientEventTable, opts ...grpc.CallOption) (*empty.Empty, error)
	ListAvailableEventResults(ctx context.Context, in *ListAvailableEventResultsRequest, opts ...grpc.CallOption) (*ListAvailableEventResultsResponse, error)
	// Schedule downloads.
	CreateDownloadFile(ctx context.Context, in *CreateDownloadRequest, opts ...grpc.CallOption) (*CreateDownloadResponse, error)
	// Notebook management
	GetNotebooks(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*Notebooks, error)
	NewNotebook(ctx context.Context, in *NotebookMetadata, opts ...grpc.CallOption) (*NotebookMetadata, error)
	UpdateNotebook(ctx context.Context, in *NotebookMetadata, opts ...grpc.CallOption) (*NotebookMetadata, error)
	NewNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookMetadata, error)
	GetNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookCell, error)
	UpdateNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookCell, error)
	CancelNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateNotebookDownloadFile(ctx context.Context, in *NotebookExportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UploadNotebookAttachment(ctx context.Context, in *NotebookFileUploadRequest, opts ...grpc.CallOption) (*NotebookFileUploadResponse, error)
	ExportNotebook(ctx context.Context, in *NotebookExportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This can be used by API clients to fetch file content.
	VFSGetBuffer(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*VFSFileBuffer, error)
	// Streaming free form VQL.
	Query(ctx context.Context, in *proto2.VQLCollectorArgs, opts ...grpc.CallOption) (API_QueryClient, error)
	// Push monitoring event to the server.
	WriteEvent(ctx context.Context, in *proto2.VQLResponse, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CreateHunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListHunts(ctx context.Context, in *ListHuntsRequest, opts ...grpc.CallOption) (*ListHuntsResponse, error) {
	out := new(ListHuntsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ListHunts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetHunt(ctx context.Context, in *GetHuntRequest, opts ...grpc.CallOption) (*Hunt, error) {
	out := new(Hunt)
	err := c.cc.Invoke(ctx, "/proto.API/GetHunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ModifyHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/ModifyHunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetHuntFlows(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetHuntFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetHuntResults(ctx context.Context, in *GetHuntResultsRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetHuntResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NotifyClients(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/NotifyClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LabelClients(ctx context.Context, in *LabelClientsRequest, opts ...grpc.CallOption) (*APIResponse, error) {
	out := new(APIResponse)
	err := c.cc.Invoke(ctx, "/proto.API/LabelClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*SearchClientsResponse, error) {
	out := new(SearchClientsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ListClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ApiClient, error) {
	out := new(ApiClient)
	err := c.cc.Invoke(ctx, "/proto.API/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClientMetadata(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ClientMetadata, error) {
	out := new(ClientMetadata)
	err := c.cc.Invoke(ctx, "/proto.API/GetClientMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetClientMetadata(ctx context.Context, in *ClientMetadata, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/SetClientMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClientFlows(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowResponse, error) {
	out := new(ApiFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetClientFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserUITraits(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ApiGrrUser, error) {
	out := new(ApiGrrUser)
	err := c.cc.Invoke(ctx, "/proto.API/GetUserUITraits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGUIOptions(ctx context.Context, in *SetGUIOptionsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/SetGUIOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error) {
	out := new(GetUserNotificationsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetUserNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserNotificationCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserNotificationCount, error) {
	out := new(UserNotificationCount)
	err := c.cc.Invoke(ctx, "/proto.API/GetUserNotificationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/proto.API/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSListDirectory(ctx context.Context, in *proto.VFSListRequest, opts ...grpc.CallOption) (*proto.VFSListResponse, error) {
	out := new(proto.VFSListResponse)
	err := c.cc.Invoke(ctx, "/proto.API/VFSListDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSRefreshDirectory(ctx context.Context, in *VFSRefreshDirectoryRequest, opts ...grpc.CallOption) (*proto.ArtifactCollectorResponse, error) {
	out := new(proto.ArtifactCollectorResponse)
	err := c.cc.Invoke(ctx, "/proto.API/VFSRefreshDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSStatDirectory(ctx context.Context, in *proto.VFSListRequest, opts ...grpc.CallOption) (*proto.VFSListResponse, error) {
	out := new(proto.VFSListResponse)
	err := c.cc.Invoke(ctx, "/proto.API/VFSStatDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSStatDownload(ctx context.Context, in *proto.VFSStatDownloadRequest, opts ...grpc.CallOption) (*proto.VFSDownloadInfo, error) {
	out := new(proto.VFSDownloadInfo)
	err := c.cc.Invoke(ctx, "/proto.API/VFSStatDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CollectArtifact(ctx context.Context, in *proto.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto.ArtifactCollectorResponse, error) {
	out := new(proto.ArtifactCollectorResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CollectArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CancelFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CancelFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ArchiveFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ArchiveFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFlowDetails(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*FlowDetails, error) {
	out := new(FlowDetails)
	err := c.cc.Invoke(ctx, "/proto.API/GetFlowDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFlowRequests(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowRequestDetails, error) {
	out := new(ApiFlowRequestDetails)
	err := c.cc.Invoke(ctx, "/proto.API/GetFlowRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetKeywordCompletions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KeywordCompletions, error) {
	out := new(KeywordCompletions)
	err := c.cc.Invoke(ctx, "/proto.API/GetKeywordCompletions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*proto1.ArtifactDescriptors, error) {
	out := new(proto1.ArtifactDescriptors)
	err := c.cc.Invoke(ctx, "/proto.API/GetArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetArtifactFile(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error) {
	out := new(GetArtifactResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetArtifactFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetArtifactFile(ctx context.Context, in *SetArtifactRequest, opts ...grpc.CallOption) (*APIResponse, error) {
	out := new(APIResponse)
	err := c.cc.Invoke(ctx, "/proto.API/SetArtifactFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LoadArtifactPack(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*LoadArtifactPackResponse, error) {
	out := new(LoadArtifactPackResponse)
	err := c.cc.Invoke(ctx, "/proto.API/LoadArtifactPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetToolInfo(ctx context.Context, in *proto1.Tool, opts ...grpc.CallOption) (*proto1.Tool, error) {
	out := new(proto1.Tool)
	err := c.cc.Invoke(ctx, "/proto.API/GetToolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetToolInfo(ctx context.Context, in *proto1.Tool, opts ...grpc.CallOption) (*proto1.Tool, error) {
	out := new(proto1.Tool)
	err := c.cc.Invoke(ctx, "/proto.API/SetToolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error) {
	out := new(GetReportResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetServerMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto.ArtifactCollectorArgs, error) {
	out := new(proto.ArtifactCollectorArgs)
	err := c.cc.Invoke(ctx, "/proto.API/GetServerMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetServerMonitoringState(ctx context.Context, in *proto.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto.ArtifactCollectorArgs, error) {
	out := new(proto.ArtifactCollectorArgs)
	err := c.cc.Invoke(ctx, "/proto.API/SetServerMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClientMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto.ClientEventTable, error) {
	out := new(proto.ClientEventTable)
	err := c.cc.Invoke(ctx, "/proto.API/GetClientMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetClientMonitoringState(ctx context.Context, in *proto.ClientEventTable, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/SetClientMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListAvailableEventResults(ctx context.Context, in *ListAvailableEventResultsRequest, opts ...grpc.CallOption) (*ListAvailableEventResultsResponse, error) {
	out := new(ListAvailableEventResultsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ListAvailableEventResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateDownloadFile(ctx context.Context, in *CreateDownloadRequest, opts ...grpc.CallOption) (*CreateDownloadResponse, error) {
	out := new(CreateDownloadResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CreateDownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetNotebooks(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*Notebooks, error) {
	out := new(Notebooks)
	err := c.cc.Invoke(ctx, "/proto.API/GetNotebooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewNotebook(ctx context.Context, in *NotebookMetadata, opts ...grpc.CallOption) (*NotebookMetadata, error) {
	out := new(NotebookMetadata)
	err := c.cc.Invoke(ctx, "/proto.API/NewNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateNotebook(ctx context.Context, in *NotebookMetadata, opts ...grpc.CallOption) (*NotebookMetadata, error) {
	out := new(NotebookMetadata)
	err := c.cc.Invoke(ctx, "/proto.API/UpdateNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookMetadata, error) {
	out := new(NotebookMetadata)
	err := c.cc.Invoke(ctx, "/proto.API/NewNotebookCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookCell, error) {
	out := new(NotebookCell)
	err := c.cc.Invoke(ctx, "/proto.API/GetNotebookCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookCell, error) {
	out := new(NotebookCell)
	err := c.cc.Invoke(ctx, "/proto.API/UpdateNotebookCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CancelNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/CancelNotebookCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateNotebookDownloadFile(ctx context.Context, in *NotebookExportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/CreateNotebookDownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UploadNotebookAttachment(ctx context.Context, in *NotebookFileUploadRequest, opts ...grpc.CallOption) (*NotebookFileUploadResponse, error) {
	out := new(NotebookFileUploadResponse)
	err := c.cc.Invoke(ctx, "/proto.API/UploadNotebookAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ExportNotebook(ctx context.Context, in *NotebookExportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/ExportNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSGetBuffer(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*VFSFileBuffer, error) {
	out := new(VFSFileBuffer)
	err := c.cc.Invoke(ctx, "/proto.API/VFSGetBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Query(ctx context.Context, in *proto2.VQLCollectorArgs, opts ...grpc.CallOption) (API_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], "/proto.API/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_QueryClient interface {
	Recv() (*proto2.VQLResponse, error)
	grpc.ClientStream
}

type aPIQueryClient struct {
	grpc.ClientStream
}

func (x *aPIQueryClient) Recv() (*proto2.VQLResponse, error) {
	m := new(proto2.VQLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) WriteEvent(ctx context.Context, in *proto2.VQLResponse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/WriteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	// Hunts
	CreateHunt(context.Context, *Hunt) (*StartFlowResponse, error)
	ListHunts(context.Context, *ListHuntsRequest) (*ListHuntsResponse, error)
	GetHunt(context.Context, *GetHuntRequest) (*Hunt, error)
	ModifyHunt(context.Context, *Hunt) (*empty.Empty, error)
	GetHuntFlows(context.Context, *GetTableRequest) (*GetTableResponse, error)
	GetHuntResults(context.Context, *GetHuntResultsRequest) (*GetTableResponse, error)
	// Clients.
	NotifyClients(context.Context, *NotificationRequest) (*empty.Empty, error)
	LabelClients(context.Context, *LabelClientsRequest) (*APIResponse, error)
	ListClients(context.Context, *SearchClientsRequest) (*SearchClientsResponse, error)
	GetClient(context.Context, *GetClientRequest) (*ApiClient, error)
	GetClientMetadata(context.Context, *GetClientRequest) (*ClientMetadata, error)
	SetClientMetadata(context.Context, *ClientMetadata) (*empty.Empty, error)
	GetClientFlows(context.Context, *ApiFlowRequest) (*ApiFlowResponse, error)
	// Users
	GetUserUITraits(context.Context, *empty.Empty) (*ApiGrrUser, error)
	SetGUIOptions(context.Context, *SetGUIOptionsRequest) (*empty.Empty, error)
	GetUserNotifications(context.Context, *GetUserNotificationsRequest) (*GetUserNotificationsResponse, error)
	GetUserNotificationCount(context.Context, *empty.Empty) (*UserNotificationCount, error)
	// List all the GUI users known on this server.
	GetUsers(context.Context, *empty.Empty) (*Users, error)
	// VFS
	VFSListDirectory(context.Context, *proto.VFSListRequest) (*proto.VFSListResponse, error)
	VFSRefreshDirectory(context.Context, *VFSRefreshDirectoryRequest) (*proto.ArtifactCollectorResponse, error)
	VFSStatDirectory(context.Context, *proto.VFSListRequest) (*proto.VFSListResponse, error)
	VFSStatDownload(context.Context, *proto.VFSStatDownloadRequest) (*proto.VFSDownloadInfo, error)
	GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error)
	// Flows
	CollectArtifact(context.Context, *proto.ArtifactCollectorArgs) (*proto.ArtifactCollectorResponse, error)
	CancelFlow(context.Context, *ApiFlowRequest) (*StartFlowResponse, error)
	ArchiveFlow(context.Context, *ApiFlowRequest) (*StartFlowResponse, error)
	GetFlowDetails(context.Context, *ApiFlowRequest) (*FlowDetails, error)
	GetFlowRequests(context.Context, *ApiFlowRequest) (*ApiFlowRequestDetails, error)
	GetKeywordCompletions(context.Context, *empty.Empty) (*KeywordCompletions, error)
	// Artifacts
	GetArtifacts(context.Context, *GetArtifactsRequest) (*proto1.ArtifactDescriptors, error)
	GetArtifactFile(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error)
	SetArtifactFile(context.Context, *SetArtifactRequest) (*APIResponse, error)
	LoadArtifactPack(context.Context, *VFSFileBuffer) (*LoadArtifactPackResponse, error)
	// Tools
	GetToolInfo(context.Context, *proto1.Tool) (*proto1.Tool, error)
	SetToolInfo(context.Context, *proto1.Tool) (*proto1.Tool, error)
	// Reporting and post processing.
	GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service..
	GetServerMonitoringState(context.Context, *empty.Empty) (*proto.ArtifactCollectorArgs, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service.
	SetServerMonitoringState(context.Context, *proto.ArtifactCollectorArgs) (*proto.ArtifactCollectorArgs, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	GetClientMonitoringState(context.Context, *empty.Empty) (*proto.ClientEventTable, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	SetClientMonitoringState(context.Context, *proto.ClientEventTable) (*empty.Empty, error)
	ListAvailableEventResults(context.Context, *ListAvailableEventResultsRequest) (*ListAvailableEventResultsResponse, error)
	// Schedule downloads.
	CreateDownloadFile(context.Context, *CreateDownloadRequest) (*CreateDownloadResponse, error)
	// Notebook management
	GetNotebooks(context.Context, *NotebookCellRequest) (*Notebooks, error)
	NewNotebook(context.Context, *NotebookMetadata) (*NotebookMetadata, error)
	UpdateNotebook(context.Context, *NotebookMetadata) (*NotebookMetadata, error)
	NewNotebookCell(context.Context, *NotebookCellRequest) (*NotebookMetadata, error)
	GetNotebookCell(context.Context, *NotebookCellRequest) (*NotebookCell, error)
	UpdateNotebookCell(context.Context, *NotebookCellRequest) (*NotebookCell, error)
	CancelNotebookCell(context.Context, *NotebookCellRequest) (*empty.Empty, error)
	CreateNotebookDownloadFile(context.Context, *NotebookExportRequest) (*empty.Empty, error)
	UploadNotebookAttachment(context.Context, *NotebookFileUploadRequest) (*NotebookFileUploadResponse, error)
	ExportNotebook(context.Context, *NotebookExportRequest) (*empty.Empty, error)
	// This can be used by API clients to fetch file content.
	VFSGetBuffer(context.Context, *VFSFileBuffer) (*VFSFileBuffer, error)
	// Streaming free form VQL.
	Query(*proto2.VQLCollectorArgs, API_QueryServer) error
	// Push monitoring event to the server.
	WriteEvent(context.Context, *proto2.VQLResponse) (*empty.Empty, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) CreateHunt(context.Context, *Hunt) (*StartFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHunt not implemented")
}
func (UnimplementedAPIServer) ListHunts(context.Context, *ListHuntsRequest) (*ListHuntsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHunts not implemented")
}
func (UnimplementedAPIServer) GetHunt(context.Context, *GetHuntRequest) (*Hunt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHunt not implemented")
}
func (UnimplementedAPIServer) ModifyHunt(context.Context, *Hunt) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyHunt not implemented")
}
func (UnimplementedAPIServer) GetHuntFlows(context.Context, *GetTableRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntFlows not implemented")
}
func (UnimplementedAPIServer) GetHuntResults(context.Context, *GetHuntResultsRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntResults not implemented")
}
func (UnimplementedAPIServer) NotifyClients(context.Context, *NotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyClients not implemented")
}
func (UnimplementedAPIServer) LabelClients(context.Context, *LabelClientsRequest) (*APIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelClients not implemented")
}
func (UnimplementedAPIServer) ListClients(context.Context, *SearchClientsRequest) (*SearchClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedAPIServer) GetClient(context.Context, *GetClientRequest) (*ApiClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (UnimplementedAPIServer) GetClientMetadata(context.Context, *GetClientRequest) (*ClientMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientMetadata not implemented")
}
func (UnimplementedAPIServer) SetClientMetadata(context.Context, *ClientMetadata) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientMetadata not implemented")
}
func (UnimplementedAPIServer) GetClientFlows(context.Context, *ApiFlowRequest) (*ApiFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientFlows not implemented")
}
func (UnimplementedAPIServer) GetUserUITraits(context.Context, *empty.Empty) (*ApiGrrUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserUITraits not implemented")
}
func (UnimplementedAPIServer) SetGUIOptions(context.Context, *SetGUIOptionsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGUIOptions not implemented")
}
func (UnimplementedAPIServer) GetUserNotifications(context.Context, *GetUserNotificationsRequest) (*GetUserNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifications not implemented")
}
func (UnimplementedAPIServer) GetUserNotificationCount(context.Context, *empty.Empty) (*UserNotificationCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotificationCount not implemented")
}
func (UnimplementedAPIServer) GetUsers(context.Context, *empty.Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAPIServer) VFSListDirectory(context.Context, *proto.VFSListRequest) (*proto.VFSListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSListDirectory not implemented")
}
func (UnimplementedAPIServer) VFSRefreshDirectory(context.Context, *VFSRefreshDirectoryRequest) (*proto.ArtifactCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSRefreshDirectory not implemented")
}
func (UnimplementedAPIServer) VFSStatDirectory(context.Context, *proto.VFSListRequest) (*proto.VFSListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSStatDirectory not implemented")
}
func (UnimplementedAPIServer) VFSStatDownload(context.Context, *proto.VFSStatDownloadRequest) (*proto.VFSDownloadInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSStatDownload not implemented")
}
func (UnimplementedAPIServer) GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedAPIServer) CollectArtifact(context.Context, *proto.ArtifactCollectorArgs) (*proto.ArtifactCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectArtifact not implemented")
}
func (UnimplementedAPIServer) CancelFlow(context.Context, *ApiFlowRequest) (*StartFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFlow not implemented")
}
func (UnimplementedAPIServer) ArchiveFlow(context.Context, *ApiFlowRequest) (*StartFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveFlow not implemented")
}
func (UnimplementedAPIServer) GetFlowDetails(context.Context, *ApiFlowRequest) (*FlowDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowDetails not implemented")
}
func (UnimplementedAPIServer) GetFlowRequests(context.Context, *ApiFlowRequest) (*ApiFlowRequestDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowRequests not implemented")
}
func (UnimplementedAPIServer) GetKeywordCompletions(context.Context, *empty.Empty) (*KeywordCompletions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeywordCompletions not implemented")
}
func (UnimplementedAPIServer) GetArtifacts(context.Context, *GetArtifactsRequest) (*proto1.ArtifactDescriptors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (UnimplementedAPIServer) GetArtifactFile(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactFile not implemented")
}
func (UnimplementedAPIServer) SetArtifactFile(context.Context, *SetArtifactRequest) (*APIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArtifactFile not implemented")
}
func (UnimplementedAPIServer) LoadArtifactPack(context.Context, *VFSFileBuffer) (*LoadArtifactPackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadArtifactPack not implemented")
}
func (UnimplementedAPIServer) GetToolInfo(context.Context, *proto1.Tool) (*proto1.Tool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToolInfo not implemented")
}
func (UnimplementedAPIServer) SetToolInfo(context.Context, *proto1.Tool) (*proto1.Tool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetToolInfo not implemented")
}
func (UnimplementedAPIServer) GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedAPIServer) GetServerMonitoringState(context.Context, *empty.Empty) (*proto.ArtifactCollectorArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMonitoringState not implemented")
}
func (UnimplementedAPIServer) SetServerMonitoringState(context.Context, *proto.ArtifactCollectorArgs) (*proto.ArtifactCollectorArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServerMonitoringState not implemented")
}
func (UnimplementedAPIServer) GetClientMonitoringState(context.Context, *empty.Empty) (*proto.ClientEventTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientMonitoringState not implemented")
}
func (UnimplementedAPIServer) SetClientMonitoringState(context.Context, *proto.ClientEventTable) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientMonitoringState not implemented")
}
func (UnimplementedAPIServer) ListAvailableEventResults(context.Context, *ListAvailableEventResultsRequest) (*ListAvailableEventResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableEventResults not implemented")
}
func (UnimplementedAPIServer) CreateDownloadFile(context.Context, *CreateDownloadRequest) (*CreateDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownloadFile not implemented")
}
func (UnimplementedAPIServer) GetNotebooks(context.Context, *NotebookCellRequest) (*Notebooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotebooks not implemented")
}
func (UnimplementedAPIServer) NewNotebook(context.Context, *NotebookMetadata) (*NotebookMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewNotebook not implemented")
}
func (UnimplementedAPIServer) UpdateNotebook(context.Context, *NotebookMetadata) (*NotebookMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotebook not implemented")
}
func (UnimplementedAPIServer) NewNotebookCell(context.Context, *NotebookCellRequest) (*NotebookMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewNotebookCell not implemented")
}
func (UnimplementedAPIServer) GetNotebookCell(context.Context, *NotebookCellRequest) (*NotebookCell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotebookCell not implemented")
}
func (UnimplementedAPIServer) UpdateNotebookCell(context.Context, *NotebookCellRequest) (*NotebookCell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotebookCell not implemented")
}
func (UnimplementedAPIServer) CancelNotebookCell(context.Context, *NotebookCellRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelNotebookCell not implemented")
}
func (UnimplementedAPIServer) CreateNotebookDownloadFile(context.Context, *NotebookExportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotebookDownloadFile not implemented")
}
func (UnimplementedAPIServer) UploadNotebookAttachment(context.Context, *NotebookFileUploadRequest) (*NotebookFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadNotebookAttachment not implemented")
}
func (UnimplementedAPIServer) ExportNotebook(context.Context, *NotebookExportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportNotebook not implemented")
}
func (UnimplementedAPIServer) VFSGetBuffer(context.Context, *VFSFileBuffer) (*VFSFileBuffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSGetBuffer not implemented")
}
func (UnimplementedAPIServer) Query(*proto2.VQLCollectorArgs, API_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedAPIServer) WriteEvent(context.Context, *proto2.VQLResponse) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteEvent not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_CreateHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hunt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateHunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateHunt(ctx, req.(*Hunt))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListHunts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListHunts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ListHunts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListHunts(ctx, req.(*ListHuntsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetHunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetHunt(ctx, req.(*GetHuntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ModifyHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hunt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ModifyHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ModifyHunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ModifyHunt(ctx, req.(*Hunt))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetHuntFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetHuntFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetHuntFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetHuntFlows(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetHuntResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetHuntResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetHuntResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetHuntResults(ctx, req.(*GetHuntResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NotifyClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NotifyClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/NotifyClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NotifyClients(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LabelClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LabelClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/LabelClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LabelClients(ctx, req.(*LabelClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListClients(ctx, req.(*SearchClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClientMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClientMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClientMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClientMetadata(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetClientMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetClientMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetClientMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetClientMetadata(ctx, req.(*ClientMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClientFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClientFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClientFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClientFlows(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserUITraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserUITraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUserUITraits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserUITraits(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGUIOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGUIOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGUIOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetGUIOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGUIOptions(ctx, req.(*SetGUIOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUserNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserNotifications(ctx, req.(*GetUserNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserNotificationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserNotificationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUserNotificationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserNotificationCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.VFSListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSListDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSListDirectory(ctx, req.(*proto.VFSListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSRefreshDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VFSRefreshDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSRefreshDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSRefreshDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSRefreshDirectory(ctx, req.(*VFSRefreshDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSStatDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.VFSListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSStatDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSStatDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSStatDirectory(ctx, req.(*proto.VFSListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSStatDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.VFSStatDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSStatDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSStatDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSStatDownload(ctx, req.(*proto.VFSStatDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CollectArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.ArtifactCollectorArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CollectArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CollectArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CollectArtifact(ctx, req.(*proto.ArtifactCollectorArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CancelFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CancelFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CancelFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CancelFlow(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ArchiveFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ArchiveFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ArchiveFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ArchiveFlow(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFlowDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFlowDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetFlowDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFlowDetails(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFlowRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFlowRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetFlowRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFlowRequests(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetKeywordCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetKeywordCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetKeywordCompletions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetKeywordCompletions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetArtifacts(ctx, req.(*GetArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetArtifactFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetArtifactFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetArtifactFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetArtifactFile(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetArtifactFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetArtifactFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetArtifactFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetArtifactFile(ctx, req.(*SetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LoadArtifactPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VFSFileBuffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LoadArtifactPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/LoadArtifactPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LoadArtifactPack(ctx, req.(*VFSFileBuffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetToolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Tool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetToolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetToolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetToolInfo(ctx, req.(*proto1.Tool))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetToolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Tool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetToolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetToolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetToolInfo(ctx, req.(*proto1.Tool))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetReport(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetServerMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetServerMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetServerMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetServerMonitoringState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetServerMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.ArtifactCollectorArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetServerMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetServerMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetServerMonitoringState(ctx, req.(*proto.ArtifactCollectorArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClientMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClientMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClientMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClientMonitoringState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetClientMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.ClientEventTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetClientMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetClientMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetClientMonitoringState(ctx, req.(*proto.ClientEventTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListAvailableEventResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableEventResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListAvailableEventResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ListAvailableEventResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListAvailableEventResults(ctx, req.(*ListAvailableEventResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateDownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateDownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateDownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateDownloadFile(ctx, req.(*CreateDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetNotebooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetNotebooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetNotebooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetNotebooks(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/NewNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewNotebook(ctx, req.(*NotebookMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/UpdateNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateNotebook(ctx, req.(*NotebookMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewNotebookCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewNotebookCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/NewNotebookCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewNotebookCell(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetNotebookCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetNotebookCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetNotebookCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetNotebookCell(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateNotebookCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateNotebookCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/UpdateNotebookCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateNotebookCell(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CancelNotebookCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CancelNotebookCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CancelNotebookCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CancelNotebookCell(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateNotebookDownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateNotebookDownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateNotebookDownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateNotebookDownloadFile(ctx, req.(*NotebookExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UploadNotebookAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UploadNotebookAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/UploadNotebookAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UploadNotebookAttachment(ctx, req.(*NotebookFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ExportNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ExportNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ExportNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ExportNotebook(ctx, req.(*NotebookExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSGetBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VFSFileBuffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSGetBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSGetBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSGetBuffer(ctx, req.(*VFSFileBuffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto2.VQLCollectorArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Query(m, &aPIQueryServer{stream})
}

type API_QueryServer interface {
	Send(*proto2.VQLResponse) error
	grpc.ServerStream
}

type aPIQueryServer struct {
	grpc.ServerStream
}

func (x *aPIQueryServer) Send(m *proto2.VQLResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_WriteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto2.VQLResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).WriteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/WriteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).WriteEvent(ctx, req.(*proto2.VQLResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHunt",
			Handler:    _API_CreateHunt_Handler,
		},
		{
			MethodName: "ListHunts",
			Handler:    _API_ListHunts_Handler,
		},
		{
			MethodName: "GetHunt",
			Handler:    _API_GetHunt_Handler,
		},
		{
			MethodName: "ModifyHunt",
			Handler:    _API_ModifyHunt_Handler,
		},
		{
			MethodName: "GetHuntFlows",
			Handler:    _API_GetHuntFlows_Handler,
		},
		{
			MethodName: "GetHuntResults",
			Handler:    _API_GetHuntResults_Handler,
		},
		{
			MethodName: "NotifyClients",
			Handler:    _API_NotifyClients_Handler,
		},
		{
			MethodName: "LabelClients",
			Handler:    _API_LabelClients_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _API_ListClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _API_GetClient_Handler,
		},
		{
			MethodName: "GetClientMetadata",
			Handler:    _API_GetClientMetadata_Handler,
		},
		{
			MethodName: "SetClientMetadata",
			Handler:    _API_SetClientMetadata_Handler,
		},
		{
			MethodName: "GetClientFlows",
			Handler:    _API_GetClientFlows_Handler,
		},
		{
			MethodName: "GetUserUITraits",
			Handler:    _API_GetUserUITraits_Handler,
		},
		{
			MethodName: "SetGUIOptions",
			Handler:    _API_SetGUIOptions_Handler,
		},
		{
			MethodName: "GetUserNotifications",
			Handler:    _API_GetUserNotifications_Handler,
		},
		{
			MethodName: "GetUserNotificationCount",
			Handler:    _API_GetUserNotificationCount_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _API_GetUsers_Handler,
		},
		{
			MethodName: "VFSListDirectory",
			Handler:    _API_VFSListDirectory_Handler,
		},
		{
			MethodName: "VFSRefreshDirectory",
			Handler:    _API_VFSRefreshDirectory_Handler,
		},
		{
			MethodName: "VFSStatDirectory",
			Handler:    _API_VFSStatDirectory_Handler,
		},
		{
			MethodName: "VFSStatDownload",
			Handler:    _API_VFSStatDownload_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _API_GetTable_Handler,
		},
		{
			MethodName: "CollectArtifact",
			Handler:    _API_CollectArtifact_Handler,
		},
		{
			MethodName: "CancelFlow",
			Handler:    _API_CancelFlow_Handler,
		},
		{
			MethodName: "ArchiveFlow",
			Handler:    _API_ArchiveFlow_Handler,
		},
		{
			MethodName: "GetFlowDetails",
			Handler:    _API_GetFlowDetails_Handler,
		},
		{
			MethodName: "GetFlowRequests",
			Handler:    _API_GetFlowRequests_Handler,
		},
		{
			MethodName: "GetKeywordCompletions",
			Handler:    _API_GetKeywordCompletions_Handler,
		},
		{
			MethodName: "GetArtifacts",
			Handler:    _API_GetArtifacts_Handler,
		},
		{
			MethodName: "GetArtifactFile",
			Handler:    _API_GetArtifactFile_Handler,
		},
		{
			MethodName: "SetArtifactFile",
			Handler:    _API_SetArtifactFile_Handler,
		},
		{
			MethodName: "LoadArtifactPack",
			Handler:    _API_LoadArtifactPack_Handler,
		},
		{
			MethodName: "GetToolInfo",
			Handler:    _API_GetToolInfo_Handler,
		},
		{
			MethodName: "SetToolInfo",
			Handler:    _API_SetToolInfo_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _API_GetReport_Handler,
		},
		{
			MethodName: "GetServerMonitoringState",
			Handler:    _API_GetServerMonitoringState_Handler,
		},
		{
			MethodName: "SetServerMonitoringState",
			Handler:    _API_SetServerMonitoringState_Handler,
		},
		{
			MethodName: "GetClientMonitoringState",
			Handler:    _API_GetClientMonitoringState_Handler,
		},
		{
			MethodName: "SetClientMonitoringState",
			Handler:    _API_SetClientMonitoringState_Handler,
		},
		{
			MethodName: "ListAvailableEventResults",
			Handler:    _API_ListAvailableEventResults_Handler,
		},
		{
			MethodName: "CreateDownloadFile",
			Handler:    _API_CreateDownloadFile_Handler,
		},
		{
			MethodName: "GetNotebooks",
			Handler:    _API_GetNotebooks_Handler,
		},
		{
			MethodName: "NewNotebook",
			Handler:    _API_NewNotebook_Handler,
		},
		{
			MethodName: "UpdateNotebook",
			Handler:    _API_UpdateNotebook_Handler,
		},
		{
			MethodName: "NewNotebookCell",
			Handler:    _API_NewNotebookCell_Handler,
		},
		{
			MethodName: "GetNotebookCell",
			Handler:    _API_GetNotebookCell_Handler,
		},
		{
			MethodName: "UpdateNotebookCell",
			Handler:    _API_UpdateNotebookCell_Handler,
		},
		{
			MethodName: "CancelNotebookCell",
			Handler:    _API_CancelNotebookCell_Handler,
		},
		{
			MethodName: "CreateNotebookDownloadFile",
			Handler:    _API_CreateNotebookDownloadFile_Handler,
		},
		{
			MethodName: "UploadNotebookAttachment",
			Handler:    _API_UploadNotebookAttachment_Handler,
		},
		{
			MethodName: "ExportNotebook",
			Handler:    _API_ExportNotebook_Handler,
		},
		{
			MethodName: "VFSGetBuffer",
			Handler:    _API_VFSGetBuffer_Handler,
		},
		{
			MethodName: "WriteEvent",
			Handler:    _API_WriteEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _API_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
