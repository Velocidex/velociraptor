// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: hunts.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	proto "www.velocidex.com/golang/velociraptor/flows/proto"
	_ "www.velocidex.com/golang/velociraptor/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HuntOsCondition_OS int32

const (
	HuntOsCondition_ALL     HuntOsCondition_OS = 0
	HuntOsCondition_WINDOWS HuntOsCondition_OS = 1
	HuntOsCondition_LINUX   HuntOsCondition_OS = 2
	HuntOsCondition_OSX     HuntOsCondition_OS = 3
)

// Enum value maps for HuntOsCondition_OS.
var (
	HuntOsCondition_OS_name = map[int32]string{
		0: "ALL",
		1: "WINDOWS",
		2: "LINUX",
		3: "OSX",
	}
	HuntOsCondition_OS_value = map[string]int32{
		"ALL":     0,
		"WINDOWS": 1,
		"LINUX":   2,
		"OSX":     3,
	}
)

func (x HuntOsCondition_OS) Enum() *HuntOsCondition_OS {
	p := new(HuntOsCondition_OS)
	*p = x
	return p
}

func (x HuntOsCondition_OS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HuntOsCondition_OS) Descriptor() protoreflect.EnumDescriptor {
	return file_hunts_proto_enumTypes[0].Descriptor()
}

func (HuntOsCondition_OS) Type() protoreflect.EnumType {
	return &file_hunts_proto_enumTypes[0]
}

func (x HuntOsCondition_OS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HuntOsCondition_OS.Descriptor instead.
func (HuntOsCondition_OS) EnumDescriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{1, 0}
}

type Hunt_State int32

const (
	Hunt_UNSET    Hunt_State = 0
	Hunt_PAUSED   Hunt_State = 1
	Hunt_RUNNING  Hunt_State = 2
	Hunt_STOPPED  Hunt_State = 3
	Hunt_ARCHIVED Hunt_State = 4
)

// Enum value maps for Hunt_State.
var (
	Hunt_State_name = map[int32]string{
		0: "UNSET",
		1: "PAUSED",
		2: "RUNNING",
		3: "STOPPED",
		4: "ARCHIVED",
	}
	Hunt_State_value = map[string]int32{
		"UNSET":    0,
		"PAUSED":   1,
		"RUNNING":  2,
		"STOPPED":  3,
		"ARCHIVED": 4,
	}
)

func (x Hunt_State) Enum() *Hunt_State {
	p := new(Hunt_State)
	*p = x
	return p
}

func (x Hunt_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hunt_State) Descriptor() protoreflect.EnumDescriptor {
	return file_hunts_proto_enumTypes[1].Descriptor()
}

func (Hunt_State) Type() protoreflect.EnumType {
	return &file_hunts_proto_enumTypes[1]
}

func (x Hunt_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hunt_State.Descriptor instead.
func (Hunt_State) EnumDescriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{4, 0}
}

type HuntLabelCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label []string `protobuf:"bytes,1,rep,name=label,proto3" json:"label,omitempty"`
}

func (x *HuntLabelCondition) Reset() {
	*x = HuntLabelCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hunts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuntLabelCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntLabelCondition) ProtoMessage() {}

func (x *HuntLabelCondition) ProtoReflect() protoreflect.Message {
	mi := &file_hunts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntLabelCondition.ProtoReflect.Descriptor instead.
func (*HuntLabelCondition) Descriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{0}
}

func (x *HuntLabelCondition) GetLabel() []string {
	if x != nil {
		return x.Label
	}
	return nil
}

type HuntOsCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Os HuntOsCondition_OS `protobuf:"varint,1,opt,name=os,proto3,enum=proto.HuntOsCondition_OS" json:"os,omitempty"`
}

func (x *HuntOsCondition) Reset() {
	*x = HuntOsCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hunts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuntOsCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntOsCondition) ProtoMessage() {}

func (x *HuntOsCondition) ProtoReflect() protoreflect.Message {
	mi := &file_hunts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntOsCondition.ProtoReflect.Descriptor instead.
func (*HuntOsCondition) Descriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{1}
}

func (x *HuntOsCondition) GetOs() HuntOsCondition_OS {
	if x != nil {
		return x.Os
	}
	return HuntOsCondition_ALL
}

type HuntCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludedLabels *HuntLabelCondition `protobuf:"bytes,4,opt,name=excluded_labels,json=excludedLabels,proto3" json:"excluded_labels,omitempty"`
	// Types that are assignable to UnionField:
	//	*HuntCondition_Labels
	//	*HuntCondition_Os
	UnionField isHuntCondition_UnionField `protobuf_oneof:"union_field"`
}

func (x *HuntCondition) Reset() {
	*x = HuntCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hunts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuntCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntCondition) ProtoMessage() {}

func (x *HuntCondition) ProtoReflect() protoreflect.Message {
	mi := &file_hunts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntCondition.ProtoReflect.Descriptor instead.
func (*HuntCondition) Descriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{2}
}

func (x *HuntCondition) GetExcludedLabels() *HuntLabelCondition {
	if x != nil {
		return x.ExcludedLabels
	}
	return nil
}

func (m *HuntCondition) GetUnionField() isHuntCondition_UnionField {
	if m != nil {
		return m.UnionField
	}
	return nil
}

func (x *HuntCondition) GetLabels() *HuntLabelCondition {
	if x, ok := x.GetUnionField().(*HuntCondition_Labels); ok {
		return x.Labels
	}
	return nil
}

func (x *HuntCondition) GetOs() *HuntOsCondition {
	if x, ok := x.GetUnionField().(*HuntCondition_Os); ok {
		return x.Os
	}
	return nil
}

type isHuntCondition_UnionField interface {
	isHuntCondition_UnionField()
}

type HuntCondition_Labels struct {
	Labels *HuntLabelCondition `protobuf:"bytes,2,opt,name=labels,proto3,oneof"`
}

type HuntCondition_Os struct {
	Os *HuntOsCondition `protobuf:"bytes,3,opt,name=os,proto3,oneof"`
}

func (*HuntCondition_Labels) isHuntCondition_UnionField() {}

func (*HuntCondition_Os) isHuntCondition_UnionField() {}

type HuntStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalClientsScheduled      uint64              `protobuf:"varint,9,opt,name=total_clients_scheduled,json=totalClientsScheduled,proto3" json:"total_clients_scheduled,omitempty"`
	TotalClientsWithResults    uint64              `protobuf:"varint,14,opt,name=total_clients_with_results,json=totalClientsWithResults,proto3" json:"total_clients_with_results,omitempty"`
	TotalClientsWithoutResults uint64              `protobuf:"varint,16,opt,name=total_clients_without_results,json=totalClientsWithoutResults,proto3" json:"total_clients_without_results,omitempty"`
	TotalClientsWithErrors     uint64              `protobuf:"varint,15,opt,name=total_clients_with_errors,json=totalClientsWithErrors,proto3" json:"total_clients_with_errors,omitempty"`
	Stopped                    bool                `protobuf:"varint,1,opt,name=stopped,proto3" json:"stopped,omitempty"`
	AvailableDownloads         *AvailableDownloads `protobuf:"bytes,2,opt,name=available_downloads,json=availableDownloads,proto3" json:"available_downloads,omitempty"`
}

func (x *HuntStats) Reset() {
	*x = HuntStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hunts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuntStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntStats) ProtoMessage() {}

func (x *HuntStats) ProtoReflect() protoreflect.Message {
	mi := &file_hunts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntStats.ProtoReflect.Descriptor instead.
func (*HuntStats) Descriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{3}
}

func (x *HuntStats) GetTotalClientsScheduled() uint64 {
	if x != nil {
		return x.TotalClientsScheduled
	}
	return 0
}

func (x *HuntStats) GetTotalClientsWithResults() uint64 {
	if x != nil {
		return x.TotalClientsWithResults
	}
	return 0
}

func (x *HuntStats) GetTotalClientsWithoutResults() uint64 {
	if x != nil {
		return x.TotalClientsWithoutResults
	}
	return 0
}

func (x *HuntStats) GetTotalClientsWithErrors() uint64 {
	if x != nil {
		return x.TotalClientsWithErrors
	}
	return 0
}

func (x *HuntStats) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

func (x *HuntStats) GetAvailableDownloads() *AvailableDownloads {
	if x != nil {
		return x.AvailableDownloads
	}
	return nil
}

type Hunt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntId          string                       `protobuf:"bytes,1,opt,name=hunt_id,json=huntId,proto3" json:"hunt_id,omitempty"`
	CreateTime      uint64                       `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Creator         string                       `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
	StartTime       uint64                       `protobuf:"varint,21,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Expires         uint64                       `protobuf:"varint,10,opt,name=expires,proto3" json:"expires,omitempty"`
	HuntDescription string                       `protobuf:"bytes,11,opt,name=hunt_description,json=huntDescription,proto3" json:"hunt_description,omitempty"`
	StartRequest    *proto.ArtifactCollectorArgs `protobuf:"bytes,16,opt,name=start_request,json=startRequest,proto3" json:"start_request,omitempty"`
	Condition       *HuntCondition               `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	ClientLimit     uint64                       `protobuf:"varint,6,opt,name=client_limit,json=clientLimit,proto3" json:"client_limit,omitempty"`
	Stats           *HuntStats                   `protobuf:"bytes,18,opt,name=stats,proto3" json:"stats,omitempty"`
	Artifacts       []string                     `protobuf:"bytes,17,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	ArtifactSources []string                     `protobuf:"bytes,19,rep,name=artifact_sources,json=artifactSources,proto3" json:"artifact_sources,omitempty"`
	State           Hunt_State                   `protobuf:"varint,8,opt,name=state,proto3,enum=proto.Hunt_State" json:"state,omitempty"`
}

func (x *Hunt) Reset() {
	*x = Hunt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hunts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hunt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hunt) ProtoMessage() {}

func (x *Hunt) ProtoReflect() protoreflect.Message {
	mi := &file_hunts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hunt.ProtoReflect.Descriptor instead.
func (*Hunt) Descriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{4}
}

func (x *Hunt) GetHuntId() string {
	if x != nil {
		return x.HuntId
	}
	return ""
}

func (x *Hunt) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Hunt) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Hunt) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Hunt) GetExpires() uint64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *Hunt) GetHuntDescription() string {
	if x != nil {
		return x.HuntDescription
	}
	return ""
}

func (x *Hunt) GetStartRequest() *proto.ArtifactCollectorArgs {
	if x != nil {
		return x.StartRequest
	}
	return nil
}

func (x *Hunt) GetCondition() *HuntCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Hunt) GetClientLimit() uint64 {
	if x != nil {
		return x.ClientLimit
	}
	return 0
}

func (x *Hunt) GetStats() *HuntStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Hunt) GetArtifacts() []string {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *Hunt) GetArtifactSources() []string {
	if x != nil {
		return x.ArtifactSources
	}
	return nil
}

func (x *Hunt) GetState() Hunt_State {
	if x != nil {
		return x.State
	}
	return Hunt_UNSET
}

type ListHuntsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset          uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Count           uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	IncludeArchived bool   `protobuf:"varint,3,opt,name=include_archived,json=includeArchived,proto3" json:"include_archived,omitempty"`
}

func (x *ListHuntsRequest) Reset() {
	*x = ListHuntsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hunts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHuntsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntsRequest) ProtoMessage() {}

func (x *ListHuntsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hunts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntsRequest.ProtoReflect.Descriptor instead.
func (*ListHuntsRequest) Descriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{5}
}

func (x *ListHuntsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListHuntsRequest) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListHuntsRequest) GetIncludeArchived() bool {
	if x != nil {
		return x.IncludeArchived
	}
	return false
}

type ListHuntsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Hunt `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListHuntsResponse) Reset() {
	*x = ListHuntsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hunts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHuntsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHuntsResponse) ProtoMessage() {}

func (x *ListHuntsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hunts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHuntsResponse.ProtoReflect.Descriptor instead.
func (*ListHuntsResponse) Descriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{6}
}

func (x *ListHuntsResponse) GetItems() []*Hunt {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetHuntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HuntId string `protobuf:"bytes,1,opt,name=hunt_id,json=huntId,proto3" json:"hunt_id,omitempty"`
}

func (x *GetHuntRequest) Reset() {
	*x = GetHuntRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hunts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHuntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHuntRequest) ProtoMessage() {}

func (x *GetHuntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hunts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHuntRequest.ProtoReflect.Descriptor instead.
func (*GetHuntRequest) Descriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{7}
}

func (x *GetHuntRequest) GetHuntId() string {
	if x != nil {
		return x.HuntId
	}
	return ""
}

type GetHuntResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset   uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Count    uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	HuntId   string `protobuf:"bytes,3,opt,name=hunt_id,json=huntId,proto3" json:"hunt_id,omitempty"`
	Artifact string `protobuf:"bytes,4,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *GetHuntResultsRequest) Reset() {
	*x = GetHuntResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hunts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHuntResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHuntResultsRequest) ProtoMessage() {}

func (x *GetHuntResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hunts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHuntResultsRequest.ProtoReflect.Descriptor instead.
func (*GetHuntResultsRequest) Descriptor() ([]byte, []int) {
	return file_hunts_proto_rawDescGZIP(), []int{8}
}

func (x *GetHuntResultsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetHuntResultsRequest) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetHuntResultsRequest) GetHuntId() string {
	if x != nil {
		return x.HuntId
	}
	return ""
}

func (x *GetHuntResultsRequest) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

var File_hunts_proto protoreflect.FileDescriptor

var file_hunts_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a,
	0x12, 0x48, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x6c, 0x0a, 0x0f, 0x48, 0x75, 0x6e,
	0x74, 0x4f, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x75, 0x6e, 0x74, 0x4f, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x53, 0x52, 0x02, 0x6f, 0x73, 0x22, 0x2e, 0x0a, 0x02, 0x4f, 0x53, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x53, 0x58, 0x10, 0x03, 0x22, 0xa8, 0x02, 0x0a, 0x0d, 0x48, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4b, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x10,
	0x22, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x62, 0x79, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x75, 0x6e, 0x74, 0x4f, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x18,
	0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x12, 0x22, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x73, 0x3a, 0x33,
	0xda, 0xfc, 0xe3, 0xc4, 0x01, 0x2d, 0x0a, 0x2b, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x68, 0x75,
	0x6e, 0x74, 0x2e, 0x42, 0x0d, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x88, 0x06, 0x0a, 0x09, 0x48, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x8f, 0x01, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x57, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x51, 0x12, 0x3e, 0x54, 0x68, 0x65, 0x20,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x68, 0x75, 0x6e, 0x74, 0x2e, 0x22, 0x0f, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x49, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x43, 0x12,
	0x25, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x22, 0x1a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x1d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x50, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x4a, 0x12, 0x29, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x22, 0x1d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x47, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x41, 0x12, 0x24, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x2e, 0x22, 0x19, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x16,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x79, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5f, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x59, 0x12,
	0x57, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x75, 0x6e, 0x74, 0x20,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xf6, 0x0a,
	0x0a, 0x04, 0x48, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x09, 0x22,
	0x07, 0x48, 0x75, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x52, 0x06, 0x68, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x60, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3f, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x39, 0x0a, 0x0b, 0x52,
	0x44, 0x46, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x57, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x68, 0x75, 0x6e, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x22, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x17, 0x12, 0x15, 0x57, 0x68, 0x6f,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x75, 0x6e,
	0x74, 0x3f, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x45, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x3f, 0x0a, 0x0b, 0x52, 0x44, 0x46, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x68, 0x75, 0x6e, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c,
	0x79, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x22, 0x0a, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x57, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x3d, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x37, 0x0a, 0x0b, 0x52, 0x44, 0x46, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x6f,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x68, 0x75, 0x6e, 0x74, 0x20, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x3f, 0x22, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x20, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x14, 0x12, 0x12, 0x48, 0x75,
	0x6e, 0x74, 0x27, 0x73, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x42, 0x45, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x3f, 0x12,
	0x3d, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8e, 0x01, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x5a, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x54, 0x12, 0x42,
	0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x75, 0x6e,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x2e, 0x22, 0x0e, 0x48, 0x75, 0x6e, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x36, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x30, 0x12, 0x2e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x68, 0x75, 0x6e, 0x74, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x6f, 0x6e, 0x2e, 0x52, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x4d, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x2f, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x29, 0x12, 0x27, 0x41, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x68, 0x75, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x73, 0x2e, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x61, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x42, 0x36, 0xe2, 0xfc, 0xe3, 0xc4, 0x01,
	0x30, 0x12, 0x2e, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x68, 0x75, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x71, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x48, 0xe2, 0xfc, 0xe3, 0xc4, 0x01, 0x42, 0x12, 0x40, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x68, 0x75, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x55, 0x49, 0x2e, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x48, 0x0a, 0x06, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x3c, 0xea, 0xb9, 0xcb, 0xb9, 0x01, 0x36, 0x48, 0x75,
	0x6e, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x62, 0x75, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x2e, 0x12, 0x2d, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x1a, 0x20, 0xea, 0xb9, 0xcb, 0xb9, 0x01, 0x1a, 0x48, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x2e, 0x12, 0x24, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03,
	0x1a, 0x17, 0xea, 0xb9, 0xcb, 0xb9, 0x01, 0x11, 0x48, 0x75, 0x6e, 0x74, 0x20, 0x68, 0x61, 0x73,
	0x20, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x12, 0x2b, 0x0a, 0x08, 0x41, 0x52, 0x43,
	0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x1d, 0xea, 0xb9, 0xcb, 0xb9, 0x01, 0x17, 0x48,
	0x75, 0x6e, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x22, 0x6b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x29, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x42, 0x31, 0x5a, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x72, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hunts_proto_rawDescOnce sync.Once
	file_hunts_proto_rawDescData = file_hunts_proto_rawDesc
)

func file_hunts_proto_rawDescGZIP() []byte {
	file_hunts_proto_rawDescOnce.Do(func() {
		file_hunts_proto_rawDescData = protoimpl.X.CompressGZIP(file_hunts_proto_rawDescData)
	})
	return file_hunts_proto_rawDescData
}

var file_hunts_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hunts_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_hunts_proto_goTypes = []interface{}{
	(HuntOsCondition_OS)(0),             // 0: proto.HuntOsCondition.OS
	(Hunt_State)(0),                     // 1: proto.Hunt.State
	(*HuntLabelCondition)(nil),          // 2: proto.HuntLabelCondition
	(*HuntOsCondition)(nil),             // 3: proto.HuntOsCondition
	(*HuntCondition)(nil),               // 4: proto.HuntCondition
	(*HuntStats)(nil),                   // 5: proto.HuntStats
	(*Hunt)(nil),                        // 6: proto.Hunt
	(*ListHuntsRequest)(nil),            // 7: proto.ListHuntsRequest
	(*ListHuntsResponse)(nil),           // 8: proto.ListHuntsResponse
	(*GetHuntRequest)(nil),              // 9: proto.GetHuntRequest
	(*GetHuntResultsRequest)(nil),       // 10: proto.GetHuntResultsRequest
	(*AvailableDownloads)(nil),          // 11: proto.AvailableDownloads
	(*proto.ArtifactCollectorArgs)(nil), // 12: proto.ArtifactCollectorArgs
}
var file_hunts_proto_depIdxs = []int32{
	0,  // 0: proto.HuntOsCondition.os:type_name -> proto.HuntOsCondition.OS
	2,  // 1: proto.HuntCondition.excluded_labels:type_name -> proto.HuntLabelCondition
	2,  // 2: proto.HuntCondition.labels:type_name -> proto.HuntLabelCondition
	3,  // 3: proto.HuntCondition.os:type_name -> proto.HuntOsCondition
	11, // 4: proto.HuntStats.available_downloads:type_name -> proto.AvailableDownloads
	12, // 5: proto.Hunt.start_request:type_name -> proto.ArtifactCollectorArgs
	4,  // 6: proto.Hunt.condition:type_name -> proto.HuntCondition
	5,  // 7: proto.Hunt.stats:type_name -> proto.HuntStats
	1,  // 8: proto.Hunt.state:type_name -> proto.Hunt.State
	6,  // 9: proto.ListHuntsResponse.items:type_name -> proto.Hunt
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_hunts_proto_init() }
func file_hunts_proto_init() {
	if File_hunts_proto != nil {
		return
	}
	file_flows_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hunts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuntLabelCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hunts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuntOsCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hunts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuntCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hunts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuntStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hunts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hunt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hunts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHuntsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hunts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHuntsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hunts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHuntRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hunts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHuntResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hunts_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*HuntCondition_Labels)(nil),
		(*HuntCondition_Os)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hunts_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hunts_proto_goTypes,
		DependencyIndexes: file_hunts_proto_depIdxs,
		EnumInfos:         file_hunts_proto_enumTypes,
		MessageInfos:      file_hunts_proto_msgTypes,
	}.Build()
	File_hunts_proto = out.File
	file_hunts_proto_rawDesc = nil
	file_hunts_proto_goTypes = nil
	file_hunts_proto_depIdxs = nil
}
