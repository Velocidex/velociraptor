syntax = "proto3";

import "proto/semantic.proto";

package proto;

option go_package = "www.velocidex.com/golang/velociraptor/api/proto";

// GRR uses an int for client_version which is difficult to use
// semantic versioning. We use a string instead which represents the
// commit number.
message AgentInformation {
    string version = 1;
    string name = 2;
    string build_time = 3;
}

// Describe a client. We fill in some metadata about the client but
// this is by no means exhaustive.
message ApiClient {
    string client_id = 1 [(sem_type) = {
            type: "ApiClientId",
            description: "The client id",
        }];
    AgentInformation agent_information = 2;
    Uname os_info = 3;

    uint64 first_seen_at = 6 [(sem_type) = {
            type: "RDFDatetime",
            description: "When the client was first seen (i.e. when it was enrolled)."
        }];
    uint64 last_seen_at = 7 [(sem_type) = {
            type: "RDFDatetime",
            description: "Last time when client checked in."
        }];
    uint64 last_booted_at = 8 [(sem_type) = {
            type: "RDFDatetime",
            description: "Last boot time."
        }];
    uint64 last_clock = 9 [(sem_type) = {
            type: "RDFDatetime",
            description: "Client clocks value during latest checkin."
        }];
    uint64 last_crash_at = 10 [(sem_type) = {
            type: "RDFDatetime",
            description: "Last crash time."
        }];

    string last_ip = 16 [(sem_type) = {
            description: "The last seen remote API address"
        }];

    string last_interrogate_flow_id = 19;

    enum IPAddressClass {
        UNKNOWN = 0;
        INTERNAL = 1;
        EXTERNAL = 2;
        VPN = 3;
    }

    IPAddressClass last_ip_class = 17;

    repeated string labels = 18;
}

message SearchClientsRequest {
    uint64 offset = 1;
    uint64 limit = 2;
    string query = 3;
    bool name_only = 4;

    enum QueryType {
        VALUE = 0; // Returns all values that match query.
        KEY = 1;   // Returns all keys that match query.
    }
    QueryType type = 5;

    enum SortingSense {
        UNSORTED = 0;
        SORT_UP = 1;
        SORT_DOWN = 2;
    }
    SortingSense sort = 6;

    // Post filter results to only see clients that are currently
    // online
    enum Filters {
        UNFILTERED = 0;
        ONLINE = 1;
    }
    Filters filter = 7;
}

message SearchClientsResponse {
    repeated ApiClient items = 1;
    repeated string names = 2 [(sem_type) = {
            description: "If name_only is specified in the request we only "
            "return the names here.",
        }];
}

message GetClientRequest {
    string client_id = 1;

    bool lightweight = 2 [(sem_type) = {
            description: "If set only collect some information.",
        }];
}

message LabelClientsRequest {
    repeated string client_ids = 1;
    repeated string labels = 2;
    string operation = 3;
}

message ClientLabels {
    // When was the labeling record last updated.
    uint64 timestamp = 1;

    repeated string label = 2;
}

message ClientMetadataItem {
    string key = 1;

    // A Json blob of unstructured data.
    string value = 2;
}

message ClientMetadata {
    repeated ClientMetadataItem items = 1;
    string client_id = 2;
}



// Message to carry uname information.
message Uname {
   string system = 1 [(sem_type) = {
      description: "The system platform (Windows|Darwin|Linux).",
    }];
   string node = 2 [(sem_type) = {
      description: "The hostname of this system.",
    }];
   string release = 3 [(sem_type) = {
      description: "The OS release identifier e.g. 7, OSX, debian.",
    }];
   string version = 4 [(sem_type) = {
      description: "The OS version ID e.g. 6.1.7601SP1, 10.9.2, 14.04.",
    }];
   string machine = 5 [(sem_type) = {
      description: "The system architecture e.g. AMD64, x86_64.",
    }];
   string kernel = 6 [(sem_type) = {
      description: "The kernel version string e.g. 6.1.7601, 13.1.0, 3.15-rc2.",
    }];
   string fqdn = 7 [(sem_type) = {
      description: "The system's fully qualified domain name.",
    }];

   uint64 install_date = 8 [(sem_type) = {
      type: "RDFDatetime",
      description: "When system was installed."
    }];

   string libc_ver = 9 [(sem_type) = {
      description: "The C library version",
    }];

   string architecture = 10 [(sem_type) = {
      description: "The architecture of this binary. (Note this can be "
      "different from the machine architecture in the case of a 32 bit binary "
      "running on a 64 bit system)",
    }];
};
