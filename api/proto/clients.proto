syntax = "proto3";

import "proto/semantic.proto";

package proto;

option go_package = "www.velocidex.com/golang/velociraptor/api/proto";

// GRR uses an int for client_version which is difficult to use
// semantic versioning. We use a string instead which represents the
// commit number.
message AgentInformation {
    string version = 1;
    string name = 2;
    string build_time = 3;
    string build_url = 4;
}

// Describe a client. We fill in some metadata about the client but
// this is by no means exhaustive.

// TODO: This is an older protobuf that is now largely supeceeded by
// actions_proto.ClientInfo. We need to replace use of this protobuf
// by ClientInfo.
message ApiClient {
    string client_id = 1 [(sem_type) = {
            type: "ApiClientId",
            description: "The client id",
        }];
    AgentInformation agent_information = 2;
    Uname os_info = 3;

    uint64 first_seen_at = 6 [(sem_type) = {
            type: "RDFDatetime",
            description: "When the client was first seen (i.e. when it was enrolled)."
        }];
    uint64 last_seen_at = 7 [(sem_type) = {
            type: "RDFDatetime",
            description: "Last time when client checked in."
        }];

    string last_ip = 16 [(sem_type) = {
            description: "The last seen remote API address"
        }];

    string last_interrogate_flow_id = 19;
    string last_interrogate_artifact_name = 21;

    repeated string labels = 18;

    uint64 last_hunt_timestamp = 22;
    uint64 last_event_table_version = 23;

    // Last time the labels on this client were updated.
    uint64 last_label_timestamp = 24;
}

message SearchClientsRequest {
    uint64 offset = 1;
    uint64 limit = 2;
    string query = 3;

    // Retrieves only the names of matching search terms (used for
    // suggestion box). If this is false, we return the entire client
    // record of matching clients.
    bool name_only = 4;

    enum SortingSense {
        UNSORTED = 0;
        SORT_UP = 1;
        SORT_DOWN = 2;
    }
    SortingSense sort = 6;

    // Post filter results to only see clients that are currently
    // online
    enum Filters {
        UNFILTERED = 0;
        ONLINE = 1;
    }
    Filters filter = 7;
}

message SearchClientsResponse {
    repeated ApiClient items = 1;
    repeated string names = 2 [(sem_type) = {
            description: "If name_only is specified in the request we only "
            "return the names here.",
        }];
}

message GetClientRequest {
    string client_id = 1;

    bool lightweight = 2 [(sem_type) = {
            description: "If set only collect some information.",
        }];

    // If true we also update the MRU for this client.
    bool update_mru = 3;
}

message LabelClientsRequest {
    repeated string client_ids = 1;
    repeated string labels = 2;
    string operation = 3;
}

message ClientLabels {
    // When was the labeling record last updated.
    uint64 timestamp = 1;

    repeated string label = 2;
}

message ClientMetadataItem {
    string key = 1;

    // A Json blob of unstructured data.
    string value = 2;
}

message ClientMetadata {
    repeated ClientMetadataItem items = 1;
    string client_id = 2;
}

message SetClientMetadataRequest {
    repeated ClientMetadataItem add = 1;

    // A list of keys to remove
    repeated string remove = 2;
    string client_id = 3;
}



// Message to carry uname information.
message Uname {
   string system = 1 [(sem_type) = {
      description: "The system platform (Windows|Darwin|Linux).",
    }];
   string hostname = 2 [(sem_type) = {
      description: "The hostname of this system.",
    }];
   string release = 3 [(sem_type) = {
      description: "The OS release identifier e.g. 7, OSX, debian.",
    }];
   string machine = 5 [(sem_type) = {
      description: "The system architecture e.g. AMD64, x86_64.",
    }];
   string fqdn = 7 [(sem_type) = {
      description: "The system's fully qualified domain name.",
    }];

    repeated string mac_addresses = 11;
};


message IndexRecord {
    // Usually client id
    string entity = 1;

    // The term under which we indexed the entity.
    string term = 2;
}