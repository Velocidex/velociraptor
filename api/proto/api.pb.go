// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	proto3 "www.velocidex.com/golang/velociraptor/actions/proto"
	proto2 "www.velocidex.com/golang/velociraptor/artifacts/proto"
	proto1 "www.velocidex.com/golang/velociraptor/flows/proto"
	_ "www.velocidex.com/golang/velociraptor/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StartFlowResponse struct {
	FlowId               string   `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartFlowResponse) Reset()         { *m = StartFlowResponse{} }
func (m *StartFlowResponse) String() string { return proto.CompactTextString(m) }
func (*StartFlowResponse) ProtoMessage()    {}
func (*StartFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *StartFlowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartFlowResponse.Unmarshal(m, b)
}
func (m *StartFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartFlowResponse.Marshal(b, m, deterministic)
}
func (m *StartFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartFlowResponse.Merge(m, src)
}
func (m *StartFlowResponse) XXX_Size() int {
	return xxx_messageInfo_StartFlowResponse.Size(m)
}
func (m *StartFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartFlowResponse proto.InternalMessageInfo

func (m *StartFlowResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

type Approval struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Approval) Reset()         { *m = Approval{} }
func (m *Approval) String() string { return proto.CompactTextString(m) }
func (*Approval) ProtoMessage()    {}
func (*Approval) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Approval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Approval.Unmarshal(m, b)
}
func (m *Approval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Approval.Marshal(b, m, deterministic)
}
func (m *Approval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Approval.Merge(m, src)
}
func (m *Approval) XXX_Size() int {
	return xxx_messageInfo_Approval.Size(m)
}
func (m *Approval) XXX_DiscardUnknown() {
	xxx_messageInfo_Approval.DiscardUnknown(m)
}

var xxx_messageInfo_Approval proto.InternalMessageInfo

func (m *Approval) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ApprovalList struct {
	Items                []*Approval `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ApprovalList) Reset()         { *m = ApprovalList{} }
func (m *ApprovalList) String() string { return proto.CompactTextString(m) }
func (*ApprovalList) ProtoMessage()    {}
func (*ApprovalList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *ApprovalList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApprovalList.Unmarshal(m, b)
}
func (m *ApprovalList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApprovalList.Marshal(b, m, deterministic)
}
func (m *ApprovalList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovalList.Merge(m, src)
}
func (m *ApprovalList) XXX_Size() int {
	return xxx_messageInfo_ApprovalList.Size(m)
}
func (m *ApprovalList) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovalList.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovalList proto.InternalMessageInfo

func (m *ApprovalList) GetItems() []*Approval {
	if m != nil {
		return m.Items
	}
	return nil
}

type VFSRefreshDirectoryRequest struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	VfsPath              string   `protobuf:"bytes,2,opt,name=vfs_path,json=vfsPath,proto3" json:"vfs_path,omitempty"`
	Depth                uint64   `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VFSRefreshDirectoryRequest) Reset()         { *m = VFSRefreshDirectoryRequest{} }
func (m *VFSRefreshDirectoryRequest) String() string { return proto.CompactTextString(m) }
func (*VFSRefreshDirectoryRequest) ProtoMessage()    {}
func (*VFSRefreshDirectoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *VFSRefreshDirectoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VFSRefreshDirectoryRequest.Unmarshal(m, b)
}
func (m *VFSRefreshDirectoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VFSRefreshDirectoryRequest.Marshal(b, m, deterministic)
}
func (m *VFSRefreshDirectoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VFSRefreshDirectoryRequest.Merge(m, src)
}
func (m *VFSRefreshDirectoryRequest) XXX_Size() int {
	return xxx_messageInfo_VFSRefreshDirectoryRequest.Size(m)
}
func (m *VFSRefreshDirectoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VFSRefreshDirectoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VFSRefreshDirectoryRequest proto.InternalMessageInfo

func (m *VFSRefreshDirectoryRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *VFSRefreshDirectoryRequest) GetVfsPath() string {
	if m != nil {
		return m.VfsPath
	}
	return ""
}

func (m *VFSRefreshDirectoryRequest) GetDepth() uint64 {
	if m != nil {
		return m.Depth
	}
	return 0
}

type VFSFileBuffer struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	VfsPath              string   `protobuf:"bytes,2,opt,name=vfs_path,json=vfsPath,proto3" json:"vfs_path,omitempty"`
	Offset               uint64   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Length               uint32   `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VFSFileBuffer) Reset()         { *m = VFSFileBuffer{} }
func (m *VFSFileBuffer) String() string { return proto.CompactTextString(m) }
func (*VFSFileBuffer) ProtoMessage()    {}
func (*VFSFileBuffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *VFSFileBuffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VFSFileBuffer.Unmarshal(m, b)
}
func (m *VFSFileBuffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VFSFileBuffer.Marshal(b, m, deterministic)
}
func (m *VFSFileBuffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VFSFileBuffer.Merge(m, src)
}
func (m *VFSFileBuffer) XXX_Size() int {
	return xxx_messageInfo_VFSFileBuffer.Size(m)
}
func (m *VFSFileBuffer) XXX_DiscardUnknown() {
	xxx_messageInfo_VFSFileBuffer.DiscardUnknown(m)
}

var xxx_messageInfo_VFSFileBuffer proto.InternalMessageInfo

func (m *VFSFileBuffer) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *VFSFileBuffer) GetVfsPath() string {
	if m != nil {
		return m.VfsPath
	}
	return ""
}

func (m *VFSFileBuffer) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *VFSFileBuffer) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *VFSFileBuffer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type NotificationRequest struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	NotifyAll            bool     `protobuf:"varint,2,opt,name=notify_all,json=notifyAll,proto3" json:"notify_all,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationRequest) Reset()         { *m = NotificationRequest{} }
func (m *NotificationRequest) String() string { return proto.CompactTextString(m) }
func (*NotificationRequest) ProtoMessage()    {}
func (*NotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *NotificationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationRequest.Unmarshal(m, b)
}
func (m *NotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationRequest.Marshal(b, m, deterministic)
}
func (m *NotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationRequest.Merge(m, src)
}
func (m *NotificationRequest) XXX_Size() int {
	return xxx_messageInfo_NotificationRequest.Size(m)
}
func (m *NotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationRequest proto.InternalMessageInfo

func (m *NotificationRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *NotificationRequest) GetNotifyAll() bool {
	if m != nil {
		return m.NotifyAll
	}
	return false
}

func init() {
	proto.RegisterType((*StartFlowResponse)(nil), "proto.StartFlowResponse")
	proto.RegisterType((*Approval)(nil), "proto.Approval")
	proto.RegisterType((*ApprovalList)(nil), "proto.ApprovalList")
	proto.RegisterType((*VFSRefreshDirectoryRequest)(nil), "proto.VFSRefreshDirectoryRequest")
	proto.RegisterType((*VFSFileBuffer)(nil), "proto.VFSFileBuffer")
	proto.RegisterType((*NotificationRequest)(nil), "proto.NotificationRequest")
}

func init() {
	proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c)
}

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1966 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4f, 0x73, 0xdc, 0x48,
	0x15, 0x8f, 0x92, 0xd8, 0xb1, 0xdb, 0x76, 0x26, 0x6e, 0xff, 0x1b, 0x8f, 0xed, 0x58, 0xee, 0x8d,
	0x37, 0xae, 0x25, 0x78, 0xd8, 0xa5, 0xa8, 0xda, 0xda, 0xe2, 0x32, 0xb6, 0x33, 0xb3, 0x86, 0x24,
	0x38, 0x9a, 0xd8, 0x40, 0x60, 0xd7, 0xa5, 0x68, 0x5a, 0x33, 0x62, 0x65, 0xf5, 0x44, 0xea, 0x99,
	0x89, 0xa1, 0x38, 0x10, 0xaa, 0x28, 0x0e, 0xdc, 0x38, 0x51, 0xc5, 0xc7, 0xe0, 0x23, 0xf0, 0x0d,
	0xb8, 0x73, 0x00, 0x3e, 0x06, 0x07, 0xaa, 0xff, 0x49, 0x2d, 0xa9, 0x65, 0x9b, 0xd4, 0x9e, 0xec,
	0x7e, 0xef, 0xf5, 0xef, 0xf7, 0xde, 0xeb, 0xd7, 0xaf, 0x9f, 0x06, 0xcc, 0xba, 0xc3, 0x60, 0x7f,
	0x18, 0x13, 0x4a, 0xe0, 0x14, 0xff, 0xd3, 0x78, 0xe8, 0xc6, 0x34, 0xf0, 0x5d, 0x8f, 0x26, 0x4d,
	0x2e, 0x68, 0xaa, 0xb5, 0x30, 0x6b, 0x3c, 0xf2, 0x43, 0x32, 0x29, 0xea, 0xce, 0x3d, 0x12, 0x86,
	0xd8, 0xa3, 0x24, 0x96, 0x56, 0x2b, 0xba, 0xd5, 0xd8, 0x4f, 0xa4, 0x78, 0x59, 0x08, 0x12, 0x7c,
	0xe1, 0x46, 0x34, 0xf0, 0xa4, 0x74, 0xcd, 0xf5, 0x68, 0x40, 0xa2, 0xd4, 0xfc, 0x6d, 0x28, 0x15,
	0x9b, 0x7d, 0x42, 0xfa, 0x21, 0x6e, 0xba, 0xc3, 0xa0, 0xe9, 0x46, 0x11, 0xa1, 0x2e, 0xb7, 0x93,
	0xda, 0x0d, 0xa9, 0xe5, 0xab, 0x37, 0x23, 0xbf, 0x89, 0x2f, 0x86, 0xf4, 0x52, 0x2a, 0x6b, 0x69,
	0x18, 0x52, 0xb0, 0xe0, 0x85, 0x01, 0x8e, 0xd2, 0xe5, 0xdc, 0x60, 0xa4, 0x2d, 0xb8, 0xb7, 0x6a,
	0x67, 0x44, 0x28, 0x7e, 0x43, 0xc8, 0x37, 0xa9, 0x76, 0x94, 0xe0, 0x58, 0x2d, 0x66, 0xbd, 0x64,
	0x2c, 0xff, 0xbd, 0xdf, 0x23, 0x93, 0x28, 0x24, 0x6e, 0x4f, 0xae, 0x17, 0x3d, 0x72, 0x31, 0x0c,
	0xb1, 0xe6, 0x22, 0x7a, 0x02, 0x16, 0xbb, 0xd4, 0x8d, 0x69, 0x3b, 0x24, 0x13, 0x07, 0x27, 0x43,
	0x12, 0x25, 0x18, 0xae, 0x81, 0x7b, 0x8c, 0xef, 0x3c, 0xe8, 0xd5, 0x2d, 0xdb, 0xda, 0x9b, 0x75,
	0xa6, 0xd9, 0xf2, 0xb8, 0x87, 0x10, 0x98, 0x69, 0x0d, 0x87, 0x31, 0x19, 0xbb, 0x21, 0x5c, 0x05,
	0xd3, 0x31, 0x76, 0x13, 0x12, 0x29, 0x1b, 0xb1, 0x42, 0x3f, 0x00, 0xf3, 0xca, 0xe6, 0x59, 0x90,
	0x50, 0xb8, 0x0b, 0xa6, 0x02, 0x8a, 0x2f, 0x92, 0xba, 0x65, 0xdf, 0xd9, 0x9b, 0xfb, 0xac, 0x26,
	0x88, 0xf7, 0x95, 0x8d, 0x23, 0xb4, 0xe8, 0x9f, 0x16, 0x68, 0x9c, 0xb5, 0xbb, 0x0e, 0xf6, 0x63,
	0x9c, 0x0c, 0x8e, 0x82, 0x98, 0x1f, 0xd6, 0xa5, 0x83, 0xdf, 0x8e, 0x70, 0x42, 0xe1, 0x01, 0x98,
	0x15, 0xe9, 0x49, 0x9d, 0x3a, 0xd8, 0xfd, 0xd7, 0x7f, 0xff, 0xfd, 0x77, 0x6b, 0x1b, 0x4c, 0x3b,
	0x47, 0xed, 0x53, 0xe7, 0x05, 0x84, 0xaf, 0x06, 0xd8, 0x16, 0x46, 0x36, 0x25, 0x76, 0x18, 0x24,
	0xb4, 0x61, 0xdd, 0x76, 0x66, 0x84, 0xe8, 0xb8, 0x07, 0x0f, 0xc0, 0xcc, 0xd8, 0x4f, 0xce, 0x87,
	0x2e, 0x1d, 0xd4, 0x6f, 0x73, 0x88, 0xc7, 0x1c, 0x62, 0x07, 0x6e, 0xb3, 0xad, 0x67, 0xed, 0xae,
	0x7d, 0xe2, 0xd2, 0x81, 0xda, 0x6c, 0xfb, 0x41, 0x88, 0x13, 0x3b, 0x88, 0xec, 0x7d, 0xe7, 0xde,
	0xd8, 0x4f, 0x98, 0x0e, 0x7e, 0x0e, 0xa6, 0x7a, 0x78, 0x48, 0x07, 0xf5, 0x3b, 0xb6, 0xb5, 0x77,
	0xf7, 0x00, 0x71, 0x80, 0x4d, 0xd8, 0x38, 0x62, 0x42, 0x9b, 0xf8, 0x76, 0x4f, 0x79, 0x6e, 0xc7,
	0x22, 0x14, 0x47, 0x6c, 0x40, 0x7f, 0xb3, 0xc0, 0xc2, 0x59, 0xbb, 0xdb, 0x0e, 0x42, 0x7c, 0x30,
	0xf2, 0x7d, 0x1c, 0xc3, 0x8d, 0x52, 0x4c, 0xdf, 0xb2, 0xb3, 0xab, 0x60, 0x9a, 0xf8, 0x7e, 0x82,
	0xa9, 0xf0, 0xd6, 0x91, 0x2b, 0x26, 0x0f, 0x71, 0xd4, 0xa7, 0x83, 0xfa, 0x5d, 0xdb, 0xda, 0x5b,
	0x70, 0xe4, 0x0a, 0x42, 0x70, 0xb7, 0xe7, 0x52, 0xb7, 0x3e, 0x65, 0x5b, 0x7b, 0xf3, 0x0e, 0xff,
	0x1f, 0xbd, 0x04, 0x4b, 0x2f, 0x08, 0x0d, 0xfc, 0xc0, 0xe3, 0xa5, 0xad, 0xce, 0xe3, 0x4a, 0xdf,
	0xb7, 0x00, 0x88, 0xd8, 0x9e, 0xcb, 0x73, 0x37, 0x0c, 0xb9, 0xf7, 0x33, 0xce, 0xac, 0x90, 0xb4,
	0xc2, 0xf0, 0xb3, 0x3f, 0x3c, 0x01, 0x77, 0x5a, 0x27, 0xc7, 0xd0, 0x01, 0xe0, 0x30, 0xc6, 0x2e,
	0xc5, 0x5f, 0x8e, 0x22, 0x0a, 0xe7, 0x64, 0x61, 0xb0, 0x45, 0xa3, 0x2e, 0x17, 0xa5, 0xda, 0x44,
	0x5b, 0xef, 0xff, 0xf1, 0x9f, 0x3f, 0xdf, 0x5e, 0x43, 0x90, 0xdf, 0xb9, 0xf1, 0xa7, 0xcd, 0x0c,
	0xe2, 0x0b, 0xeb, 0x13, 0xf8, 0x73, 0x30, 0xcb, 0xaa, 0x8e, 0x2d, 0x13, 0xb8, 0x26, 0x51, 0x52,
	0x89, 0xf4, 0x3e, 0x85, 0xd7, 0x14, 0x12, 0x7e, 0x9d, 0xc3, 0x2f, 0xc1, 0x45, 0x05, 0x9f, 0xa1,
	0xb5, 0xc1, 0xbd, 0x0e, 0xe6, 0xff, 0xc3, 0x15, 0xb9, 0x5f, 0xae, 0x15, 0xac, 0x1e, 0x02, 0x5a,
	0xe3, 0x48, 0x8b, 0xb0, 0xa6, 0x90, 0xd4, 0xe6, 0x13, 0x00, 0x9e, 0x93, 0x5e, 0xe0, 0x5f, 0x96,
	0xc3, 0x5e, 0xdd, 0x17, 0x1d, 0x63, 0x5f, 0x75, 0x8c, 0xfd, 0xa7, 0xac, 0x63, 0x94, 0x83, 0xce,
	0x00, 0x58, 0xd0, 0x7d, 0x70, 0x3f, 0xf5, 0x24, 0x19, 0x85, 0x34, 0x81, 0x9b, 0x45, 0x07, 0xb9,
	0x58, 0xf9, 0xb9, 0x96, 0x69, 0x5f, 0xb9, 0x6f, 0x42, 0x9c, 0x46, 0xff, 0x90, 0xf3, 0xd4, 0xe1,
	0x6a, 0xc1, 0x67, 0x05, 0xdb, 0x03, 0x0b, 0xbc, 0x18, 0x2e, 0x0f, 0x45, 0xab, 0x82, 0x0d, 0x89,
	0x64, 0x28, 0x91, 0xca, 0x60, 0xb6, 0x39, 0xc9, 0x3a, 0x5a, 0x56, 0x24, 0x3a, 0x24, 0x0b, 0xe7,
	0x1c, 0xcc, 0x3f, 0x73, 0xdf, 0xe0, 0xb0, 0x48, 0xa2, 0x0b, 0x15, 0x09, 0x54, 0xed, 0xe4, 0xe4,
	0x38, 0x8d, 0xa2, 0x44, 0xa0, 0x6f, 0x14, 0xf9, 0x9a, 0x63, 0xc7, 0xaa, 0xf0, 0x37, 0x54, 0xb1,
	0x61, 0x37, 0xf6, 0x06, 0x05, 0x82, 0x4d, 0xb3, 0x32, 0x5f, 0x8d, 0x70, 0x45, 0x51, 0xe5, 0xcc,
	0xe0, 0x57, 0x60, 0xb6, 0x83, 0x25, 0x0f, 0xd4, 0xb2, 0x2e, 0x24, 0x8a, 0xe2, 0x41, 0xda, 0x12,
	0x03, 0xa1, 0x40, 0xbb, 0x1c, 0x76, 0x1b, 0x6e, 0x69, 0xe7, 0x20, 0x54, 0xcd, 0xdf, 0xa4, 0xd7,
	0xee, 0xb7, 0x30, 0x06, 0x8b, 0xa9, 0xe2, 0x39, 0xa6, 0x2e, 0xbb, 0xb0, 0xd5, 0x34, 0xaa, 0x68,
	0xf3, 0xf6, 0xe8, 0xbb, 0x9c, 0xeb, 0x31, 0xdc, 0x2d, 0x71, 0x29, 0x93, 0x1c, 0xe7, 0x00, 0x2c,
	0x76, 0x4b, 0x9c, 0x66, 0xe8, 0xca, 0x0a, 0x78, 0xc4, 0x29, 0x1f, 0xa2, 0xf5, 0x2c, 0x6b, 0x05,
	0x44, 0x76, 0x4a, 0x7f, 0xb1, 0x78, 0x59, 0x0b, 0x05, 0xeb, 0x01, 0x49, 0xca, 0xd3, 0x1a, 0x06,
	0xa2, 0x29, 0xa8, 0x4a, 0x2b, 0x88, 0xe5, 0xe9, 0xfc, 0x8c, 0xf3, 0x38, 0x10, 0x95, 0x42, 0xe3,
	0x70, 0x7a, 0x5c, 0xaf, 0x9f, 0x1c, 0x7c, 0x02, 0xee, 0x7e, 0xf9, 0xb4, 0x75, 0x74, 0x13, 0x6b,
	0xf8, 0x15, 0xa8, 0x75, 0x30, 0x3d, 0x4d, 0x70, 0x7c, 0x7a, 0xfc, 0x2a, 0x76, 0x03, 0x9a, 0xc0,
	0x8a, 0x60, 0x1b, 0x8b, 0x99, 0x73, 0x9d, 0x38, 0x66, 0x5b, 0x54, 0x81, 0xc2, 0x35, 0x8d, 0x29,
	0x87, 0xe5, 0x83, 0x85, 0x2e, 0xa6, 0x9d, 0xd3, 0xe3, 0x9f, 0x0c, 0xf9, 0x63, 0xad, 0x95, 0xa8,
	0x26, 0xbd, 0xee, 0xa2, 0xd9, 0x9c, 0xa6, 0x81, 0xb4, 0xe2, 0xd4, 0x76, 0xb3, 0x14, 0xff, 0xd1,
	0x02, 0xcb, 0x92, 0x5b, 0xbf, 0xc1, 0x09, 0x44, 0x59, 0x11, 0x95, 0x94, 0x8a, 0xf6, 0xa3, 0x2b,
	0x6d, 0xe4, 0x11, 0x3c, 0xe6, 0x3e, 0xec, 0xa0, 0xcd, 0x42, 0xa8, 0x39, 0x6b, 0xe6, 0xca, 0xaf,
	0x41, 0xdd, 0xa0, 0x3a, 0x24, 0xac, 0x47, 0x56, 0xa5, 0x56, 0xdd, 0x4d, 0xe3, 0x2e, 0xb4, 0xc7,
	0xa9, 0x11, 0xb4, 0xaf, 0xa0, 0x16, 0xf8, 0x3f, 0x02, 0x33, 0x52, 0x57, 0x7d, 0x8c, 0xf3, 0x1a,
	0x57, 0x82, 0xea, 0x1c, 0x1b, 0xc2, 0x07, 0x05, 0xec, 0x04, 0x12, 0xf0, 0xe0, 0xac, 0xdd, 0x65,
	0xed, 0x25, 0x9d, 0x61, 0xd2, 0xb2, 0x95, 0x8a, 0x62, 0xd9, 0xa6, 0x62, 0x99, 0xb3, 0x27, 0x1c,
	0xfc, 0x63, 0xf8, 0x48, 0x81, 0x17, 0x01, 0x73, 0xa5, 0xf8, 0xde, 0x02, 0x4b, 0x86, 0xc1, 0x09,
	0xee, 0x64, 0xe8, 0x15, 0x43, 0x55, 0xc3, 0x56, 0xa5, 0x29, 0x27, 0xd1, 0x43, 0x35, 0x23, 0xa7,
	0xae, 0x7c, 0xcc, 0x5d, 0xb1, 0xd1, 0x86, 0xe6, 0x4a, 0x11, 0x8d, 0x9d, 0x9e, 0xc7, 0xa3, 0xee,
	0x52, 0xf7, 0xc3, 0xa3, 0x96, 0xd5, 0x0a, 0xeb, 0x1a, 0x55, 0x1e, 0x30, 0x00, 0x35, 0x25, 0x93,
	0x73, 0x2d, 0xdc, 0xca, 0xc0, 0x74, 0xb9, 0x81, 0x4b, 0xa9, 0x8e, 0x23, 0x9f, 0x94, 0x2f, 0x60,
	0x11, 0xf7, 0x94, 0x57, 0x04, 0x7f, 0x1c, 0xe1, 0x6a, 0xe9, 0xb5, 0xbc, 0xe6, 0x15, 0x35, 0x15,
	0x87, 0x80, 0x1a, 0x81, 0x9a, 0xcc, 0xb1, 0x4a, 0x79, 0xfa, 0x52, 0x97, 0xce, 0xa0, 0x15, 0xf7,
	0x93, 0x1b, 0x9c, 0x10, 0xe2, 0x64, 0x9b, 0x28, 0x0d, 0xa5, 0x40, 0xc0, 0x4e, 0xe7, 0x97, 0x00,
	0x1c, 0xba, 0x91, 0x87, 0x43, 0xd6, 0xc8, 0xaa, 0x9a, 0xe8, 0xff, 0x33, 0x72, 0xa5, 0x60, 0x0c,
	0xfd, 0x6b, 0x30, 0xd7, 0x8a, 0xbd, 0x41, 0x30, 0xc6, 0x1f, 0x06, 0x2f, 0x87, 0x0e, 0xb4, 0xa4,
	0xe0, 0x35, 0x34, 0x86, 0xff, 0x0b, 0xfe, 0x0c, 0xb0, 0xd5, 0x11, 0xa6, 0x6e, 0x10, 0x56, 0x3e,
	0x03, 0x6a, 0x16, 0xd0, 0x4c, 0x8d, 0x13, 0x8d, 0x0e, 0xd5, 0xe7, 0x8d, 0x5c, 0x43, 0xa9, 0x44,
	0xdf, 0x34, 0x8a, 0x15, 0x8f, 0xa9, 0xa5, 0xe7, 0x50, 0xdf, 0x82, 0x95, 0x0e, 0xa6, 0x3f, 0xc6,
	0x97, 0x13, 0x12, 0xf7, 0x0e, 0xb3, 0xef, 0xb0, 0xca, 0x86, 0xb3, 0x2e, 0xf9, 0xca, 0x5b, 0x8c,
	0xe3, 0x81, 0x01, 0xb9, 0x07, 0xe6, 0x3b, 0x38, 0x2d, 0x84, 0x6c, 0x8e, 0xd2, 0x85, 0x2a, 0xba,
	0x46, 0xa1, 0xd0, 0x8e, 0x70, 0xe2, 0xc5, 0xc1, 0x90, 0x92, 0x38, 0x41, 0x9b, 0x9c, 0x6e, 0x15,
	0x2e, 0x6b, 0x74, 0x19, 0x6a, 0xc0, 0x33, 0xa8, 0xd6, 0xec, 0xf3, 0x06, 0xae, 0x97, 0x89, 0x8a,
	0x3c, 0x39, 0x55, 0x7e, 0x6e, 0xcb, 0xe5, 0x30, 0x87, 0xdb, 0x03, 0xb5, 0x6e, 0x05, 0x55, 0xb7,
	0x4c, 0x65, 0x1a, 0x0d, 0x4b, 0xb7, 0xa5, 0x80, 0xc7, 0xea, 0x2d, 0x02, 0x0f, 0x9e, 0x11, 0xb7,
	0xa7, 0xc4, 0x27, 0xae, 0xf7, 0x0d, 0x5c, 0xce, 0x1a, 0x49, 0xf6, 0x01, 0xd7, 0xd8, 0x56, 0x83,
	0x69, 0xc1, 0x3c, 0xa5, 0xfb, 0x88, 0xd3, 0x6d, 0xa1, 0xb4, 0xa7, 0x15, 0x2d, 0x19, 0xdf, 0x11,
	0x98, 0x63, 0x0d, 0x82, 0x90, 0x90, 0xf5, 0xa6, 0xf4, 0x83, 0x80, 0x09, 0x1a, 0xfa, 0x02, 0x6d,
	0x70, 0xb4, 0x15, 0xb8, 0xa4, 0xf7, 0x15, 0xb5, 0xad, 0x03, 0xe6, 0xba, 0x37, 0x42, 0x29, 0x5d,
	0x37, 0x6d, 0x9b, 0x68, 0x16, 0x6c, 0x66, 0x75, 0xf0, 0x90, 0xc4, 0xb9, 0x99, 0x55, 0x48, 0x8a,
	0xd7, 0x59, 0x53, 0xc8, 0x98, 0x65, 0xb5, 0xa0, 0x45, 0xcd, 0x4b, 0x61, 0x92, 0x3d, 0xf3, 0x5d,
	0x1c, 0x8f, 0x71, 0xfc, 0x9c, 0x44, 0x01, 0x25, 0x71, 0x10, 0xf5, 0x59, 0xef, 0xc5, 0xd7, 0x3e,
	0xf3, 0xc6, 0x16, 0x69, 0x7c, 0xe6, 0xcd, 0xf8, 0xbf, 0xb7, 0x40, 0xbd, 0x5b, 0xa5, 0xbc, 0xba,
	0x0f, 0x5f, 0xed, 0xc2, 0x77, 0xb8, 0x0b, 0xbb, 0xc8, 0xd6, 0x52, 0x6a, 0x64, 0x61, 0x19, 0x18,
	0xf1, 0x0c, 0xc8, 0x71, 0xf7, 0x86, 0x19, 0x58, 0xcb, 0xcd, 0xd7, 0x4f, 0xc7, 0x38, 0x12, 0x0f,
	0x8a, 0x31, 0x78, 0x33, 0xf4, 0x3b, 0x1e, 0xbb, 0x59, 0x57, 0x05, 0x5f, 0x39, 0x59, 0x9a, 0x02,
	0x36, 0x42, 0xb3, 0x80, 0xff, 0x6a, 0x81, 0x75, 0xf6, 0xd2, 0xb7, 0xc6, 0x6e, 0x10, 0x32, 0x58,
	0x4e, 0xa0, 0x3e, 0x29, 0x1f, 0x6b, 0x9f, 0xe2, 0x46, 0x0b, 0x55, 0x71, 0x7b, 0xd7, 0x1b, 0xe6,
	0xe7, 0x27, 0xb4, 0xa3, 0x7f, 0xc3, 0x1b, 0xb7, 0x30, 0xf7, 0x28, 0x80, 0xe2, 0x27, 0x04, 0xf5,
	0xf8, 0xf3, 0xbe, 0xa2, 0x0e, 0x3c, 0xaf, 0x52, 0xbe, 0x6c, 0x55, 0x68, 0xa5, 0x03, 0x3b, 0xdc,
	0x81, 0x0d, 0xb4, 0x9a, 0xff, 0x8d, 0x42, 0xd9, 0x31, 0xd6, 0xd7, 0xbc, 0x37, 0xbf, 0x50, 0x3f,
	0xe4, 0xe9, 0x1f, 0xd2, 0x5c, 0x72, 0x88, 0xc3, 0xb0, 0xf8, 0x7d, 0x98, 0x5a, 0x1b, 0x3b, 0x72,
	0x86, 0xf5, 0x35, 0x98, 0x7b, 0x81, 0x27, 0x6a, 0x9d, 0x9e, 0xae, 0x12, 0x5c, 0xfb, 0x79, 0x56,
	0xea, 0x10, 0x1a, 0x1a, 0xf3, 0x1d, 0x83, 0xfb, 0xa7, 0xc3, 0x9e, 0x4b, 0xf1, 0xf5, 0x14, 0x55,
	0x8a, 0x72, 0x8a, 0xf2, 0x88, 0x8c, 0xe6, 0x57, 0xa0, 0xa6, 0x11, 0xb3, 0x84, 0x5c, 0x99, 0xa5,
	0x4a, 0xaa, 0x52, 0xcf, 0x2f, 0xa0, 0x8a, 0xf9, 0xb5, 0xa6, 0xa5, 0xf0, 0x5a, 0xae, 0x25, 0x83,
	0xce, 0xf8, 0x7c, 0xe5, 0x10, 0x43, 0x00, 0xf3, 0x51, 0x7e, 0x18, 0x8f, 0x7c, 0xfd, 0x51, 0xc3,
	0x9c, 0x3a, 0x15, 0x12, 0x01, 0x50, 0xcc, 0x69, 0x37, 0x66, 0xab, 0xaa, 0x87, 0x12, 0x61, 0x19,
	0x97, 0x11, 0xfe, 0xce, 0x02, 0x0d, 0x51, 0xe8, 0x4a, 0x63, 0xbc, 0x51, 0x4a, 0xf9, 0xf4, 0x9d,
	0xfe, 0x9e, 0x54, 0x71, 0xcb, 0x5f, 0x27, 0x10, 0xca, 0x5f, 0x25, 0x13, 0x03, 0xf3, 0xe1, 0x4f,
	0x16, 0xa8, 0x9f, 0x0e, 0x99, 0x44, 0x59, 0xb4, 0x28, 0x75, 0xbd, 0xc1, 0x05, 0x8e, 0x28, 0xb4,
	0x0b, 0x1e, 0xb0, 0x4d, 0xc2, 0x58, 0x79, 0xb1, 0x73, 0x85, 0x85, 0xbc, 0xdb, 0xa5, 0xd6, 0x57,
	0x45, 0xc7, 0xdc, 0x09, 0xc0, 0x7d, 0x11, 0x66, 0x7a, 0x53, 0x3e, 0x2c, 0x0b, 0xa5, 0xdb, 0x92,
	0x47, 0x65, 0x54, 0x3f, 0x04, 0xf3, 0x67, 0xed, 0x6e, 0x07, 0x53, 0xf9, 0xe3, 0xb2, 0x79, 0x62,
	0x31, 0x4a, 0xd1, 0x2d, 0xf8, 0x39, 0x98, 0x7a, 0x39, 0xc2, 0xf1, 0x65, 0x7a, 0x93, 0xcf, 0x5e,
	0x3e, 0xcb, 0xbf, 0x80, 0x30, 0x53, 0xa4, 0xb9, 0xb8, 0xf5, 0x3d, 0x0b, 0x7e, 0x01, 0xc0, 0x4f,
	0xe3, 0x80, 0x8a, 0xb6, 0x0a, 0x0d, 0x56, 0x95, 0x41, 0xdd, 0x3a, 0xf8, 0xf4, 0x75, 0x73, 0x32,
	0x99, 0xec, 0x8f, 0x71, 0x48, 0xbc, 0xa0, 0x87, 0xdf, 0xed, 0x7b, 0xe4, 0xa2, 0xd9, 0x27, 0xa1,
	0x1b, 0xf5, 0x9b, 0x42, 0x18, 0xbb, 0x6c, 0x04, 0xe5, 0x51, 0x8b, 0xdd, 0xd3, 0xfc, 0xcf, 0xf7,
	0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xcf, 0x32, 0x4a, 0x17, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Hunts
	CreateHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*StartFlowResponse, error)
	ListHunts(ctx context.Context, in *ListHuntsRequest, opts ...grpc.CallOption) (*ListHuntsResponse, error)
	GetHunt(ctx context.Context, in *GetHuntRequest, opts ...grpc.CallOption) (*Hunt, error)
	ModifyHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*empty.Empty, error)
	GetHuntResults(ctx context.Context, in *GetHuntResultsRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	// Clients.
	NotifyClients(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	LabelClients(ctx context.Context, in *LabelClientsRequest, opts ...grpc.CallOption) (*APIResponse, error)
	ListClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*SearchClientsResponse, error)
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ApiClient, error)
	GetClientMetadata(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ClientMetadata, error)
	SetClientMetadata(ctx context.Context, in *ClientMetadata, opts ...grpc.CallOption) (*empty.Empty, error)
	GetClientFlows(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowResponse, error)
	// Users
	GetUserUITraits(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ApiGrrUser, error)
	SetGUIOptions(ctx context.Context, in *SetGUIOptionsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error)
	GetUserNotificationCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserNotificationCount, error)
	// List all the GUI users known on this server.
	GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error)
	// VFS
	VFSListDirectory(ctx context.Context, in *proto1.VFSListRequest, opts ...grpc.CallOption) (*proto1.VFSListResponse, error)
	VFSRefreshDirectory(ctx context.Context, in *VFSRefreshDirectoryRequest, opts ...grpc.CallOption) (*proto1.ArtifactCollectorResponse, error)
	VFSStatDirectory(ctx context.Context, in *proto1.VFSListRequest, opts ...grpc.CallOption) (*proto1.VFSListResponse, error)
	VFSStatDownload(ctx context.Context, in *proto1.VFSStatDownloadRequest, opts ...grpc.CallOption) (*proto1.VFSDownloadInfo, error)
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	// Flows
	CollectArtifact(ctx context.Context, in *proto1.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto1.ArtifactCollectorResponse, error)
	CancelFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error)
	ArchiveFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error)
	GetFlowDetails(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*FlowDetails, error)
	GetFlowRequests(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowRequestDetails, error)
	GetKeywordCompletions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KeywordCompletions, error)
	// Artifacts
	GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*proto2.ArtifactDescriptors, error)
	GetArtifactFile(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error)
	SetArtifactFile(ctx context.Context, in *SetArtifactRequest, opts ...grpc.CallOption) (*APIResponse, error)
	LoadArtifactPack(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*LoadArtifactPackResponse, error)
	// Tools
	GetToolInfo(ctx context.Context, in *proto2.Tool, opts ...grpc.CallOption) (*proto2.Tool, error)
	SetToolInfo(ctx context.Context, in *proto2.Tool, opts ...grpc.CallOption) (*proto2.Tool, error)
	// Reporting and post processing.
	GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service..
	GetServerMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service.
	SetServerMonitoringState(ctx context.Context, in *proto1.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	GetClientMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.ClientEventTable, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	SetClientMonitoringState(ctx context.Context, in *proto1.ClientEventTable, opts ...grpc.CallOption) (*empty.Empty, error)
	ListAvailableEventResults(ctx context.Context, in *ListAvailableEventResultsRequest, opts ...grpc.CallOption) (*ListAvailableEventResultsResponse, error)
	// Schedule downloads.
	CreateDownloadFile(ctx context.Context, in *CreateDownloadRequest, opts ...grpc.CallOption) (*CreateDownloadResponse, error)
	// Notebook management
	GetNotebooks(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*Notebooks, error)
	NewNotebook(ctx context.Context, in *NotebookMetadata, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateNotebook(ctx context.Context, in *NotebookMetadata, opts ...grpc.CallOption) (*NotebookMetadata, error)
	NewNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookMetadata, error)
	GetNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookCell, error)
	UpdateNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookCell, error)
	CancelNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateNotebookDownloadFile(ctx context.Context, in *NotebookExportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UploadNotebookAttachment(ctx context.Context, in *NotebookFileUploadRequest, opts ...grpc.CallOption) (*NotebookFileUploadResponse, error)
	ExportNotebook(ctx context.Context, in *NotebookExportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This can be used by API clients to fetch file content.
	VFSGetBuffer(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*VFSFileBuffer, error)
	// Streaming free form VQL.
	Query(ctx context.Context, in *proto3.VQLCollectorArgs, opts ...grpc.CallOption) (API_QueryClient, error)
	// Push monitoring event to the server.
	WriteEvent(ctx context.Context, in *proto3.VQLResponse, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CreateHunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListHunts(ctx context.Context, in *ListHuntsRequest, opts ...grpc.CallOption) (*ListHuntsResponse, error) {
	out := new(ListHuntsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ListHunts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetHunt(ctx context.Context, in *GetHuntRequest, opts ...grpc.CallOption) (*Hunt, error) {
	out := new(Hunt)
	err := c.cc.Invoke(ctx, "/proto.API/GetHunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ModifyHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/ModifyHunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetHuntResults(ctx context.Context, in *GetHuntResultsRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetHuntResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NotifyClients(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/NotifyClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LabelClients(ctx context.Context, in *LabelClientsRequest, opts ...grpc.CallOption) (*APIResponse, error) {
	out := new(APIResponse)
	err := c.cc.Invoke(ctx, "/proto.API/LabelClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*SearchClientsResponse, error) {
	out := new(SearchClientsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ListClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ApiClient, error) {
	out := new(ApiClient)
	err := c.cc.Invoke(ctx, "/proto.API/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClientMetadata(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ClientMetadata, error) {
	out := new(ClientMetadata)
	err := c.cc.Invoke(ctx, "/proto.API/GetClientMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetClientMetadata(ctx context.Context, in *ClientMetadata, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/SetClientMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClientFlows(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowResponse, error) {
	out := new(ApiFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetClientFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserUITraits(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ApiGrrUser, error) {
	out := new(ApiGrrUser)
	err := c.cc.Invoke(ctx, "/proto.API/GetUserUITraits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGUIOptions(ctx context.Context, in *SetGUIOptionsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/SetGUIOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error) {
	out := new(GetUserNotificationsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetUserNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserNotificationCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserNotificationCount, error) {
	out := new(UserNotificationCount)
	err := c.cc.Invoke(ctx, "/proto.API/GetUserNotificationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/proto.API/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSListDirectory(ctx context.Context, in *proto1.VFSListRequest, opts ...grpc.CallOption) (*proto1.VFSListResponse, error) {
	out := new(proto1.VFSListResponse)
	err := c.cc.Invoke(ctx, "/proto.API/VFSListDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSRefreshDirectory(ctx context.Context, in *VFSRefreshDirectoryRequest, opts ...grpc.CallOption) (*proto1.ArtifactCollectorResponse, error) {
	out := new(proto1.ArtifactCollectorResponse)
	err := c.cc.Invoke(ctx, "/proto.API/VFSRefreshDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSStatDirectory(ctx context.Context, in *proto1.VFSListRequest, opts ...grpc.CallOption) (*proto1.VFSListResponse, error) {
	out := new(proto1.VFSListResponse)
	err := c.cc.Invoke(ctx, "/proto.API/VFSStatDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSStatDownload(ctx context.Context, in *proto1.VFSStatDownloadRequest, opts ...grpc.CallOption) (*proto1.VFSDownloadInfo, error) {
	out := new(proto1.VFSDownloadInfo)
	err := c.cc.Invoke(ctx, "/proto.API/VFSStatDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CollectArtifact(ctx context.Context, in *proto1.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto1.ArtifactCollectorResponse, error) {
	out := new(proto1.ArtifactCollectorResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CollectArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CancelFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CancelFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ArchiveFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ArchiveFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFlowDetails(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*FlowDetails, error) {
	out := new(FlowDetails)
	err := c.cc.Invoke(ctx, "/proto.API/GetFlowDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFlowRequests(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowRequestDetails, error) {
	out := new(ApiFlowRequestDetails)
	err := c.cc.Invoke(ctx, "/proto.API/GetFlowRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetKeywordCompletions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KeywordCompletions, error) {
	out := new(KeywordCompletions)
	err := c.cc.Invoke(ctx, "/proto.API/GetKeywordCompletions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*proto2.ArtifactDescriptors, error) {
	out := new(proto2.ArtifactDescriptors)
	err := c.cc.Invoke(ctx, "/proto.API/GetArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetArtifactFile(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error) {
	out := new(GetArtifactResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetArtifactFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetArtifactFile(ctx context.Context, in *SetArtifactRequest, opts ...grpc.CallOption) (*APIResponse, error) {
	out := new(APIResponse)
	err := c.cc.Invoke(ctx, "/proto.API/SetArtifactFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LoadArtifactPack(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*LoadArtifactPackResponse, error) {
	out := new(LoadArtifactPackResponse)
	err := c.cc.Invoke(ctx, "/proto.API/LoadArtifactPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetToolInfo(ctx context.Context, in *proto2.Tool, opts ...grpc.CallOption) (*proto2.Tool, error) {
	out := new(proto2.Tool)
	err := c.cc.Invoke(ctx, "/proto.API/GetToolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetToolInfo(ctx context.Context, in *proto2.Tool, opts ...grpc.CallOption) (*proto2.Tool, error) {
	out := new(proto2.Tool)
	err := c.cc.Invoke(ctx, "/proto.API/SetToolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error) {
	out := new(GetReportResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetServerMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error) {
	out := new(proto1.ArtifactCollectorArgs)
	err := c.cc.Invoke(ctx, "/proto.API/GetServerMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetServerMonitoringState(ctx context.Context, in *proto1.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error) {
	out := new(proto1.ArtifactCollectorArgs)
	err := c.cc.Invoke(ctx, "/proto.API/SetServerMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClientMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.ClientEventTable, error) {
	out := new(proto1.ClientEventTable)
	err := c.cc.Invoke(ctx, "/proto.API/GetClientMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetClientMonitoringState(ctx context.Context, in *proto1.ClientEventTable, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/SetClientMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListAvailableEventResults(ctx context.Context, in *ListAvailableEventResultsRequest, opts ...grpc.CallOption) (*ListAvailableEventResultsResponse, error) {
	out := new(ListAvailableEventResultsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ListAvailableEventResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateDownloadFile(ctx context.Context, in *CreateDownloadRequest, opts ...grpc.CallOption) (*CreateDownloadResponse, error) {
	out := new(CreateDownloadResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CreateDownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetNotebooks(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*Notebooks, error) {
	out := new(Notebooks)
	err := c.cc.Invoke(ctx, "/proto.API/GetNotebooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewNotebook(ctx context.Context, in *NotebookMetadata, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/NewNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateNotebook(ctx context.Context, in *NotebookMetadata, opts ...grpc.CallOption) (*NotebookMetadata, error) {
	out := new(NotebookMetadata)
	err := c.cc.Invoke(ctx, "/proto.API/UpdateNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookMetadata, error) {
	out := new(NotebookMetadata)
	err := c.cc.Invoke(ctx, "/proto.API/NewNotebookCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookCell, error) {
	out := new(NotebookCell)
	err := c.cc.Invoke(ctx, "/proto.API/GetNotebookCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*NotebookCell, error) {
	out := new(NotebookCell)
	err := c.cc.Invoke(ctx, "/proto.API/UpdateNotebookCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CancelNotebookCell(ctx context.Context, in *NotebookCellRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/CancelNotebookCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateNotebookDownloadFile(ctx context.Context, in *NotebookExportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/CreateNotebookDownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UploadNotebookAttachment(ctx context.Context, in *NotebookFileUploadRequest, opts ...grpc.CallOption) (*NotebookFileUploadResponse, error) {
	out := new(NotebookFileUploadResponse)
	err := c.cc.Invoke(ctx, "/proto.API/UploadNotebookAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ExportNotebook(ctx context.Context, in *NotebookExportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/ExportNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSGetBuffer(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*VFSFileBuffer, error) {
	out := new(VFSFileBuffer)
	err := c.cc.Invoke(ctx, "/proto.API/VFSGetBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Query(ctx context.Context, in *proto3.VQLCollectorArgs, opts ...grpc.CallOption) (API_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/proto.API/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_QueryClient interface {
	Recv() (*proto3.VQLResponse, error)
	grpc.ClientStream
}

type aPIQueryClient struct {
	grpc.ClientStream
}

func (x *aPIQueryClient) Recv() (*proto3.VQLResponse, error) {
	m := new(proto3.VQLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) WriteEvent(ctx context.Context, in *proto3.VQLResponse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/WriteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Hunts
	CreateHunt(context.Context, *Hunt) (*StartFlowResponse, error)
	ListHunts(context.Context, *ListHuntsRequest) (*ListHuntsResponse, error)
	GetHunt(context.Context, *GetHuntRequest) (*Hunt, error)
	ModifyHunt(context.Context, *Hunt) (*empty.Empty, error)
	GetHuntResults(context.Context, *GetHuntResultsRequest) (*GetTableResponse, error)
	// Clients.
	NotifyClients(context.Context, *NotificationRequest) (*empty.Empty, error)
	LabelClients(context.Context, *LabelClientsRequest) (*APIResponse, error)
	ListClients(context.Context, *SearchClientsRequest) (*SearchClientsResponse, error)
	GetClient(context.Context, *GetClientRequest) (*ApiClient, error)
	GetClientMetadata(context.Context, *GetClientRequest) (*ClientMetadata, error)
	SetClientMetadata(context.Context, *ClientMetadata) (*empty.Empty, error)
	GetClientFlows(context.Context, *ApiFlowRequest) (*ApiFlowResponse, error)
	// Users
	GetUserUITraits(context.Context, *empty.Empty) (*ApiGrrUser, error)
	SetGUIOptions(context.Context, *SetGUIOptionsRequest) (*empty.Empty, error)
	GetUserNotifications(context.Context, *GetUserNotificationsRequest) (*GetUserNotificationsResponse, error)
	GetUserNotificationCount(context.Context, *empty.Empty) (*UserNotificationCount, error)
	// List all the GUI users known on this server.
	GetUsers(context.Context, *empty.Empty) (*Users, error)
	// VFS
	VFSListDirectory(context.Context, *proto1.VFSListRequest) (*proto1.VFSListResponse, error)
	VFSRefreshDirectory(context.Context, *VFSRefreshDirectoryRequest) (*proto1.ArtifactCollectorResponse, error)
	VFSStatDirectory(context.Context, *proto1.VFSListRequest) (*proto1.VFSListResponse, error)
	VFSStatDownload(context.Context, *proto1.VFSStatDownloadRequest) (*proto1.VFSDownloadInfo, error)
	GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error)
	// Flows
	CollectArtifact(context.Context, *proto1.ArtifactCollectorArgs) (*proto1.ArtifactCollectorResponse, error)
	CancelFlow(context.Context, *ApiFlowRequest) (*StartFlowResponse, error)
	ArchiveFlow(context.Context, *ApiFlowRequest) (*StartFlowResponse, error)
	GetFlowDetails(context.Context, *ApiFlowRequest) (*FlowDetails, error)
	GetFlowRequests(context.Context, *ApiFlowRequest) (*ApiFlowRequestDetails, error)
	GetKeywordCompletions(context.Context, *empty.Empty) (*KeywordCompletions, error)
	// Artifacts
	GetArtifacts(context.Context, *GetArtifactsRequest) (*proto2.ArtifactDescriptors, error)
	GetArtifactFile(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error)
	SetArtifactFile(context.Context, *SetArtifactRequest) (*APIResponse, error)
	LoadArtifactPack(context.Context, *VFSFileBuffer) (*LoadArtifactPackResponse, error)
	// Tools
	GetToolInfo(context.Context, *proto2.Tool) (*proto2.Tool, error)
	SetToolInfo(context.Context, *proto2.Tool) (*proto2.Tool, error)
	// Reporting and post processing.
	GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service..
	GetServerMonitoringState(context.Context, *empty.Empty) (*proto1.ArtifactCollectorArgs, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service.
	SetServerMonitoringState(context.Context, *proto1.ArtifactCollectorArgs) (*proto1.ArtifactCollectorArgs, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	GetClientMonitoringState(context.Context, *empty.Empty) (*proto1.ClientEventTable, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	SetClientMonitoringState(context.Context, *proto1.ClientEventTable) (*empty.Empty, error)
	ListAvailableEventResults(context.Context, *ListAvailableEventResultsRequest) (*ListAvailableEventResultsResponse, error)
	// Schedule downloads.
	CreateDownloadFile(context.Context, *CreateDownloadRequest) (*CreateDownloadResponse, error)
	// Notebook management
	GetNotebooks(context.Context, *NotebookCellRequest) (*Notebooks, error)
	NewNotebook(context.Context, *NotebookMetadata) (*empty.Empty, error)
	UpdateNotebook(context.Context, *NotebookMetadata) (*NotebookMetadata, error)
	NewNotebookCell(context.Context, *NotebookCellRequest) (*NotebookMetadata, error)
	GetNotebookCell(context.Context, *NotebookCellRequest) (*NotebookCell, error)
	UpdateNotebookCell(context.Context, *NotebookCellRequest) (*NotebookCell, error)
	CancelNotebookCell(context.Context, *NotebookCellRequest) (*empty.Empty, error)
	CreateNotebookDownloadFile(context.Context, *NotebookExportRequest) (*empty.Empty, error)
	UploadNotebookAttachment(context.Context, *NotebookFileUploadRequest) (*NotebookFileUploadResponse, error)
	ExportNotebook(context.Context, *NotebookExportRequest) (*empty.Empty, error)
	// This can be used by API clients to fetch file content.
	VFSGetBuffer(context.Context, *VFSFileBuffer) (*VFSFileBuffer, error)
	// Streaming free form VQL.
	Query(*proto3.VQLCollectorArgs, API_QueryServer) error
	// Push monitoring event to the server.
	WriteEvent(context.Context, *proto3.VQLResponse) (*empty.Empty, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) CreateHunt(ctx context.Context, req *Hunt) (*StartFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHunt not implemented")
}
func (*UnimplementedAPIServer) ListHunts(ctx context.Context, req *ListHuntsRequest) (*ListHuntsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHunts not implemented")
}
func (*UnimplementedAPIServer) GetHunt(ctx context.Context, req *GetHuntRequest) (*Hunt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHunt not implemented")
}
func (*UnimplementedAPIServer) ModifyHunt(ctx context.Context, req *Hunt) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyHunt not implemented")
}
func (*UnimplementedAPIServer) GetHuntResults(ctx context.Context, req *GetHuntResultsRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntResults not implemented")
}
func (*UnimplementedAPIServer) NotifyClients(ctx context.Context, req *NotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyClients not implemented")
}
func (*UnimplementedAPIServer) LabelClients(ctx context.Context, req *LabelClientsRequest) (*APIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelClients not implemented")
}
func (*UnimplementedAPIServer) ListClients(ctx context.Context, req *SearchClientsRequest) (*SearchClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (*UnimplementedAPIServer) GetClient(ctx context.Context, req *GetClientRequest) (*ApiClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (*UnimplementedAPIServer) GetClientMetadata(ctx context.Context, req *GetClientRequest) (*ClientMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientMetadata not implemented")
}
func (*UnimplementedAPIServer) SetClientMetadata(ctx context.Context, req *ClientMetadata) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientMetadata not implemented")
}
func (*UnimplementedAPIServer) GetClientFlows(ctx context.Context, req *ApiFlowRequest) (*ApiFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientFlows not implemented")
}
func (*UnimplementedAPIServer) GetUserUITraits(ctx context.Context, req *empty.Empty) (*ApiGrrUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserUITraits not implemented")
}
func (*UnimplementedAPIServer) SetGUIOptions(ctx context.Context, req *SetGUIOptionsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGUIOptions not implemented")
}
func (*UnimplementedAPIServer) GetUserNotifications(ctx context.Context, req *GetUserNotificationsRequest) (*GetUserNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifications not implemented")
}
func (*UnimplementedAPIServer) GetUserNotificationCount(ctx context.Context, req *empty.Empty) (*UserNotificationCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotificationCount not implemented")
}
func (*UnimplementedAPIServer) GetUsers(ctx context.Context, req *empty.Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedAPIServer) VFSListDirectory(ctx context.Context, req *proto1.VFSListRequest) (*proto1.VFSListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSListDirectory not implemented")
}
func (*UnimplementedAPIServer) VFSRefreshDirectory(ctx context.Context, req *VFSRefreshDirectoryRequest) (*proto1.ArtifactCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSRefreshDirectory not implemented")
}
func (*UnimplementedAPIServer) VFSStatDirectory(ctx context.Context, req *proto1.VFSListRequest) (*proto1.VFSListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSStatDirectory not implemented")
}
func (*UnimplementedAPIServer) VFSStatDownload(ctx context.Context, req *proto1.VFSStatDownloadRequest) (*proto1.VFSDownloadInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSStatDownload not implemented")
}
func (*UnimplementedAPIServer) GetTable(ctx context.Context, req *GetTableRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (*UnimplementedAPIServer) CollectArtifact(ctx context.Context, req *proto1.ArtifactCollectorArgs) (*proto1.ArtifactCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectArtifact not implemented")
}
func (*UnimplementedAPIServer) CancelFlow(ctx context.Context, req *ApiFlowRequest) (*StartFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFlow not implemented")
}
func (*UnimplementedAPIServer) ArchiveFlow(ctx context.Context, req *ApiFlowRequest) (*StartFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveFlow not implemented")
}
func (*UnimplementedAPIServer) GetFlowDetails(ctx context.Context, req *ApiFlowRequest) (*FlowDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowDetails not implemented")
}
func (*UnimplementedAPIServer) GetFlowRequests(ctx context.Context, req *ApiFlowRequest) (*ApiFlowRequestDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowRequests not implemented")
}
func (*UnimplementedAPIServer) GetKeywordCompletions(ctx context.Context, req *empty.Empty) (*KeywordCompletions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeywordCompletions not implemented")
}
func (*UnimplementedAPIServer) GetArtifacts(ctx context.Context, req *GetArtifactsRequest) (*proto2.ArtifactDescriptors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (*UnimplementedAPIServer) GetArtifactFile(ctx context.Context, req *GetArtifactRequest) (*GetArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactFile not implemented")
}
func (*UnimplementedAPIServer) SetArtifactFile(ctx context.Context, req *SetArtifactRequest) (*APIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArtifactFile not implemented")
}
func (*UnimplementedAPIServer) LoadArtifactPack(ctx context.Context, req *VFSFileBuffer) (*LoadArtifactPackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadArtifactPack not implemented")
}
func (*UnimplementedAPIServer) GetToolInfo(ctx context.Context, req *proto2.Tool) (*proto2.Tool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToolInfo not implemented")
}
func (*UnimplementedAPIServer) SetToolInfo(ctx context.Context, req *proto2.Tool) (*proto2.Tool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetToolInfo not implemented")
}
func (*UnimplementedAPIServer) GetReport(ctx context.Context, req *GetReportRequest) (*GetReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (*UnimplementedAPIServer) GetServerMonitoringState(ctx context.Context, req *empty.Empty) (*proto1.ArtifactCollectorArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMonitoringState not implemented")
}
func (*UnimplementedAPIServer) SetServerMonitoringState(ctx context.Context, req *proto1.ArtifactCollectorArgs) (*proto1.ArtifactCollectorArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServerMonitoringState not implemented")
}
func (*UnimplementedAPIServer) GetClientMonitoringState(ctx context.Context, req *empty.Empty) (*proto1.ClientEventTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientMonitoringState not implemented")
}
func (*UnimplementedAPIServer) SetClientMonitoringState(ctx context.Context, req *proto1.ClientEventTable) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientMonitoringState not implemented")
}
func (*UnimplementedAPIServer) ListAvailableEventResults(ctx context.Context, req *ListAvailableEventResultsRequest) (*ListAvailableEventResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableEventResults not implemented")
}
func (*UnimplementedAPIServer) CreateDownloadFile(ctx context.Context, req *CreateDownloadRequest) (*CreateDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownloadFile not implemented")
}
func (*UnimplementedAPIServer) GetNotebooks(ctx context.Context, req *NotebookCellRequest) (*Notebooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotebooks not implemented")
}
func (*UnimplementedAPIServer) NewNotebook(ctx context.Context, req *NotebookMetadata) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewNotebook not implemented")
}
func (*UnimplementedAPIServer) UpdateNotebook(ctx context.Context, req *NotebookMetadata) (*NotebookMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotebook not implemented")
}
func (*UnimplementedAPIServer) NewNotebookCell(ctx context.Context, req *NotebookCellRequest) (*NotebookMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewNotebookCell not implemented")
}
func (*UnimplementedAPIServer) GetNotebookCell(ctx context.Context, req *NotebookCellRequest) (*NotebookCell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotebookCell not implemented")
}
func (*UnimplementedAPIServer) UpdateNotebookCell(ctx context.Context, req *NotebookCellRequest) (*NotebookCell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotebookCell not implemented")
}
func (*UnimplementedAPIServer) CancelNotebookCell(ctx context.Context, req *NotebookCellRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelNotebookCell not implemented")
}
func (*UnimplementedAPIServer) CreateNotebookDownloadFile(ctx context.Context, req *NotebookExportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotebookDownloadFile not implemented")
}
func (*UnimplementedAPIServer) UploadNotebookAttachment(ctx context.Context, req *NotebookFileUploadRequest) (*NotebookFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadNotebookAttachment not implemented")
}
func (*UnimplementedAPIServer) ExportNotebook(ctx context.Context, req *NotebookExportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportNotebook not implemented")
}
func (*UnimplementedAPIServer) VFSGetBuffer(ctx context.Context, req *VFSFileBuffer) (*VFSFileBuffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VFSGetBuffer not implemented")
}
func (*UnimplementedAPIServer) Query(req *proto3.VQLCollectorArgs, srv API_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedAPIServer) WriteEvent(ctx context.Context, req *proto3.VQLResponse) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteEvent not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hunt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateHunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateHunt(ctx, req.(*Hunt))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListHunts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListHunts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ListHunts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListHunts(ctx, req.(*ListHuntsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetHunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetHunt(ctx, req.(*GetHuntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ModifyHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hunt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ModifyHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ModifyHunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ModifyHunt(ctx, req.(*Hunt))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetHuntResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetHuntResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetHuntResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetHuntResults(ctx, req.(*GetHuntResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NotifyClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NotifyClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/NotifyClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NotifyClients(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LabelClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LabelClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/LabelClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LabelClients(ctx, req.(*LabelClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListClients(ctx, req.(*SearchClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClientMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClientMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClientMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClientMetadata(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetClientMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetClientMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetClientMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetClientMetadata(ctx, req.(*ClientMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClientFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClientFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClientFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClientFlows(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserUITraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserUITraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUserUITraits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserUITraits(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGUIOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGUIOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGUIOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetGUIOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGUIOptions(ctx, req.(*SetGUIOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUserNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserNotifications(ctx, req.(*GetUserNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserNotificationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserNotificationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUserNotificationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserNotificationCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.VFSListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSListDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSListDirectory(ctx, req.(*proto1.VFSListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSRefreshDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VFSRefreshDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSRefreshDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSRefreshDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSRefreshDirectory(ctx, req.(*VFSRefreshDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSStatDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.VFSListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSStatDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSStatDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSStatDirectory(ctx, req.(*proto1.VFSListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSStatDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.VFSStatDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSStatDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSStatDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSStatDownload(ctx, req.(*proto1.VFSStatDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CollectArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.ArtifactCollectorArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CollectArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CollectArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CollectArtifact(ctx, req.(*proto1.ArtifactCollectorArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CancelFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CancelFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CancelFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CancelFlow(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ArchiveFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ArchiveFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ArchiveFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ArchiveFlow(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFlowDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFlowDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetFlowDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFlowDetails(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFlowRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFlowRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetFlowRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFlowRequests(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetKeywordCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetKeywordCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetKeywordCompletions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetKeywordCompletions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetArtifacts(ctx, req.(*GetArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetArtifactFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetArtifactFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetArtifactFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetArtifactFile(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetArtifactFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetArtifactFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetArtifactFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetArtifactFile(ctx, req.(*SetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LoadArtifactPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VFSFileBuffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LoadArtifactPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/LoadArtifactPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LoadArtifactPack(ctx, req.(*VFSFileBuffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetToolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto2.Tool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetToolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetToolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetToolInfo(ctx, req.(*proto2.Tool))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetToolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto2.Tool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetToolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetToolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetToolInfo(ctx, req.(*proto2.Tool))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetReport(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetServerMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetServerMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetServerMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetServerMonitoringState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetServerMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.ArtifactCollectorArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetServerMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetServerMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetServerMonitoringState(ctx, req.(*proto1.ArtifactCollectorArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClientMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClientMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClientMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClientMonitoringState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetClientMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.ClientEventTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetClientMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetClientMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetClientMonitoringState(ctx, req.(*proto1.ClientEventTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListAvailableEventResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableEventResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListAvailableEventResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ListAvailableEventResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListAvailableEventResults(ctx, req.(*ListAvailableEventResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateDownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateDownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateDownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateDownloadFile(ctx, req.(*CreateDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetNotebooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetNotebooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetNotebooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetNotebooks(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/NewNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewNotebook(ctx, req.(*NotebookMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/UpdateNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateNotebook(ctx, req.(*NotebookMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewNotebookCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewNotebookCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/NewNotebookCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewNotebookCell(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetNotebookCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetNotebookCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetNotebookCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetNotebookCell(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateNotebookCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateNotebookCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/UpdateNotebookCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateNotebookCell(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CancelNotebookCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CancelNotebookCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CancelNotebookCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CancelNotebookCell(ctx, req.(*NotebookCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateNotebookDownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateNotebookDownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateNotebookDownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateNotebookDownloadFile(ctx, req.(*NotebookExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UploadNotebookAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UploadNotebookAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/UploadNotebookAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UploadNotebookAttachment(ctx, req.(*NotebookFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ExportNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotebookExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ExportNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ExportNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ExportNotebook(ctx, req.(*NotebookExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSGetBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VFSFileBuffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSGetBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSGetBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSGetBuffer(ctx, req.(*VFSFileBuffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto3.VQLCollectorArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Query(m, &aPIQueryServer{stream})
}

type API_QueryServer interface {
	Send(*proto3.VQLResponse) error
	grpc.ServerStream
}

type aPIQueryServer struct {
	grpc.ServerStream
}

func (x *aPIQueryServer) Send(m *proto3.VQLResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_WriteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto3.VQLResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).WriteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/WriteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).WriteEvent(ctx, req.(*proto3.VQLResponse))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHunt",
			Handler:    _API_CreateHunt_Handler,
		},
		{
			MethodName: "ListHunts",
			Handler:    _API_ListHunts_Handler,
		},
		{
			MethodName: "GetHunt",
			Handler:    _API_GetHunt_Handler,
		},
		{
			MethodName: "ModifyHunt",
			Handler:    _API_ModifyHunt_Handler,
		},
		{
			MethodName: "GetHuntResults",
			Handler:    _API_GetHuntResults_Handler,
		},
		{
			MethodName: "NotifyClients",
			Handler:    _API_NotifyClients_Handler,
		},
		{
			MethodName: "LabelClients",
			Handler:    _API_LabelClients_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _API_ListClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _API_GetClient_Handler,
		},
		{
			MethodName: "GetClientMetadata",
			Handler:    _API_GetClientMetadata_Handler,
		},
		{
			MethodName: "SetClientMetadata",
			Handler:    _API_SetClientMetadata_Handler,
		},
		{
			MethodName: "GetClientFlows",
			Handler:    _API_GetClientFlows_Handler,
		},
		{
			MethodName: "GetUserUITraits",
			Handler:    _API_GetUserUITraits_Handler,
		},
		{
			MethodName: "SetGUIOptions",
			Handler:    _API_SetGUIOptions_Handler,
		},
		{
			MethodName: "GetUserNotifications",
			Handler:    _API_GetUserNotifications_Handler,
		},
		{
			MethodName: "GetUserNotificationCount",
			Handler:    _API_GetUserNotificationCount_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _API_GetUsers_Handler,
		},
		{
			MethodName: "VFSListDirectory",
			Handler:    _API_VFSListDirectory_Handler,
		},
		{
			MethodName: "VFSRefreshDirectory",
			Handler:    _API_VFSRefreshDirectory_Handler,
		},
		{
			MethodName: "VFSStatDirectory",
			Handler:    _API_VFSStatDirectory_Handler,
		},
		{
			MethodName: "VFSStatDownload",
			Handler:    _API_VFSStatDownload_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _API_GetTable_Handler,
		},
		{
			MethodName: "CollectArtifact",
			Handler:    _API_CollectArtifact_Handler,
		},
		{
			MethodName: "CancelFlow",
			Handler:    _API_CancelFlow_Handler,
		},
		{
			MethodName: "ArchiveFlow",
			Handler:    _API_ArchiveFlow_Handler,
		},
		{
			MethodName: "GetFlowDetails",
			Handler:    _API_GetFlowDetails_Handler,
		},
		{
			MethodName: "GetFlowRequests",
			Handler:    _API_GetFlowRequests_Handler,
		},
		{
			MethodName: "GetKeywordCompletions",
			Handler:    _API_GetKeywordCompletions_Handler,
		},
		{
			MethodName: "GetArtifacts",
			Handler:    _API_GetArtifacts_Handler,
		},
		{
			MethodName: "GetArtifactFile",
			Handler:    _API_GetArtifactFile_Handler,
		},
		{
			MethodName: "SetArtifactFile",
			Handler:    _API_SetArtifactFile_Handler,
		},
		{
			MethodName: "LoadArtifactPack",
			Handler:    _API_LoadArtifactPack_Handler,
		},
		{
			MethodName: "GetToolInfo",
			Handler:    _API_GetToolInfo_Handler,
		},
		{
			MethodName: "SetToolInfo",
			Handler:    _API_SetToolInfo_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _API_GetReport_Handler,
		},
		{
			MethodName: "GetServerMonitoringState",
			Handler:    _API_GetServerMonitoringState_Handler,
		},
		{
			MethodName: "SetServerMonitoringState",
			Handler:    _API_SetServerMonitoringState_Handler,
		},
		{
			MethodName: "GetClientMonitoringState",
			Handler:    _API_GetClientMonitoringState_Handler,
		},
		{
			MethodName: "SetClientMonitoringState",
			Handler:    _API_SetClientMonitoringState_Handler,
		},
		{
			MethodName: "ListAvailableEventResults",
			Handler:    _API_ListAvailableEventResults_Handler,
		},
		{
			MethodName: "CreateDownloadFile",
			Handler:    _API_CreateDownloadFile_Handler,
		},
		{
			MethodName: "GetNotebooks",
			Handler:    _API_GetNotebooks_Handler,
		},
		{
			MethodName: "NewNotebook",
			Handler:    _API_NewNotebook_Handler,
		},
		{
			MethodName: "UpdateNotebook",
			Handler:    _API_UpdateNotebook_Handler,
		},
		{
			MethodName: "NewNotebookCell",
			Handler:    _API_NewNotebookCell_Handler,
		},
		{
			MethodName: "GetNotebookCell",
			Handler:    _API_GetNotebookCell_Handler,
		},
		{
			MethodName: "UpdateNotebookCell",
			Handler:    _API_UpdateNotebookCell_Handler,
		},
		{
			MethodName: "CancelNotebookCell",
			Handler:    _API_CancelNotebookCell_Handler,
		},
		{
			MethodName: "CreateNotebookDownloadFile",
			Handler:    _API_CreateNotebookDownloadFile_Handler,
		},
		{
			MethodName: "UploadNotebookAttachment",
			Handler:    _API_UploadNotebookAttachment_Handler,
		},
		{
			MethodName: "ExportNotebook",
			Handler:    _API_ExportNotebook_Handler,
		},
		{
			MethodName: "VFSGetBuffer",
			Handler:    _API_VFSGetBuffer_Handler,
		},
		{
			MethodName: "WriteEvent",
			Handler:    _API_WriteEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _API_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
