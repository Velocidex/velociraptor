# Autogenerated! Do not edit.
- name: appcompatcache
  description: Parses the appcompatcache.
  type: Plugin
  args: []
  category: windows
- name: array
  description: |
    Create an array with all the args.

    This function accepts arbitrary arguments and creates an array by
    flattening the arguments. For example `array(a=1, b=2)` will return
    `[1, 2]`.

    You can use this to flatten a subquery as well:

    ```sql
    SELECT array(a1={ SELECT User FROM Artifact.Windows.System.Users() }) as Users FROM scope()
    ```

    Will return a single row with Users being an array of names.
  type: Function
  args: []
  category: basic
- name: artifact_definitions
  description: Dump artifact definitions.
  type: Plugin
  args:
  - name: names
    description: Artifact definitions to dump
    type: string
    repeated: true
    required: false
  - name: deps
    description: If true includes all dependencies as well.
    type: bool
    repeated: false
    required: false
  - name: sanitize
    description: If true we remove extra metadata.
    type: bool
    repeated: false
    required: false
  category: server
- name: artifact_delete
  description: Deletes an artifact from the global repository.
  type: Function
  args:
  - name: name
    description: The Artifact to delete
    type: string
    repeated: false
    required: false
  category: server
- name: artifact_set
  description: Sets an artifact into the global repository.
  type: Function
  args:
  - name: definition
    description: Artifact definition in YAML
    type: string
    repeated: false
    required: false
  - name: prefix
    description: Required name prefix
    type: string
    repeated: false
    required: false
  category: server
- name: atoi
  description: Convert a string to an int.
  type: Function
  args:
  - name: string
    description: A string to convert to int
    type: Any
    repeated: false
    required: true
  category: basic
- name: audit
  description: Register as an audit daemon in the kernel.
  type: Plugin
  args: []
  category: linux
- name: authenticode
  description: |
    This plugin uses the Windows API to extract authenticode signature
    details from PE files.

    Since we use the windows API this can only work with the "file"
    accessor.
  type: Function
  args:
  - name: filename
    description: The filename to parse.
    type: string
    repeated: false
    required: true
  category: windows
- name: base64decode
  description: Decodes a base64 encoded string.
  type: Function
  args:
  - name: string
    description: A string to decode
    type: string
    repeated: false
    required: true
  category: basic
- name: base64encode
  description: Encodes a string into base64.
  type: Function
  args:
  - name: string
    description: A string to decode
    type: string
    repeated: false
    required: true
  category: basic
- name: basename
  description: Return the basename of the path.
  type: Function
  args:
  - name: path
    description: Extract directory name of path
    type: string
    repeated: false
    required: true
  category: basic
- name: binary_parse
  description: |
    Parse a binary string with profile based parser.

    This plugin extract binary data from strings. It works by applying
    a profile to the binary string and generating an object from
    that. Profiles use the same syntax as Rekall or Volatility. For
    example a profile might be:

    ```json
    {
      "StructName": [10, {
         "field1": [2, ["unsigned int"]],
         "field2": [6, ["unsigned long long"]],
      }]
    }
    ```

    The profile is compiled and overlayed on top of the offset specified,
    then the object is emitted with its required fields.
  type: Function
  args:
  - name: offset
    description: Start parsing from this offset.
    type: int64
    repeated: false
    required: false
  - name: string
    description: The string to parse.
    type: string
    repeated: false
    required: true
  - name: profile
    description: The profile to use.
    type: string
    repeated: false
    required: false
  - name: iterator
    description: An iterator to begin with.
    type: string
    repeated: false
    required: false
  - name: target
    description: The target type to fetch.
    type: string
    repeated: false
    required: false
  category: parsers
- name: binary_parse
  description: |
    Parse binary files using a profile.

    This is the plugin version of the `binary_parse()` function.
  type: Plugin
  args:
  - name: offset
    description: Start parsing from this offset
    type: int64
    repeated: false
    required: false
  - name: file
    description: Filename to parse
    type: string
    repeated: false
    required: true
  - name: accessor
    description: Accessor to use (e.g. ntfs, data)
    type: string
    repeated: false
    required: false
  - name: profile
    description: Profile to use.
    type: string
    repeated: false
    required: false
  - name: target
    description: The target to fetch.
    type: string
    repeated: false
    required: true
  - name: args
    description: Args for the target class.
    type: vfilter.Any
    repeated: false
    required: false
  - name: start
    description: The initial field in the target to fetch.
    type: string
    repeated: false
    required: false
  category: parsers
- name: cache
  description: Creates a cache object
  type: Function
  args:
  - name: func
    description: A function to evaluate
    type: LazyExpr
    repeated: false
    required: true
  - name: name
    description: The global name of this cache (needed when more than one)
    type: string
    repeated: false
    required: false
  - name: key
    description: Cache key to use.
    type: string
    repeated: false
    required: true
  - name: period
    description: The latest age of the cache.
    type: int64
    repeated: false
    required: false
  category: basic
- name: cancel_flow
  description: Cancels the flow.
  type: Function
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  - name: flow_id
    description: ""
    type: string
    repeated: false
    required: false
  category: server
- name: certificates
  description: Collect certificate from the system trust store.
  type: Plugin
  args: []
  category: windows
- name: chain
  description: |
    Chain the output of several queries into the same table. This plugin
    takes any args and chains them.

    ### Example

    The following returns the rows from the first query then the rows from
    the second query.

    ```sql
    SELECT * FROM chain(
    a={ SELECT ...},
    b={ SELECT ...})
    ```
  type: Plugin
  args: []
  category: plugin
- name: client_delete
  description: 'Delete all information related to a client. '
  type: Plugin
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  - name: really_do_it
    description: ""
    type: bool
    repeated: false
    required: false
  category: server
- name: client_info
  description: Returns client info (like the fqdn) from the datastore.
  type: Function
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  category: server
- name: client_metadata
  description: Returns client metadata from the datastore. Client metadata is a set
    of free form key/value data
  type: Function
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  category: server
- name: client_set_metadata
  description: Sets client metadata. Client metadata is a set of free form key/value
    data
  type: Function
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  category: server
- name: clients
  description: Retrieve the list of clients.
  type: Plugin
  args:
  - name: search
    description: 'Client search string. Can have the following prefixes: ''lable:'',
      ''host:'''
    type: string
    repeated: false
    required: false
  - name: start
    description: First client to fetch (0)'
    type: uint64
    repeated: false
    required: false
  - name: count
    description: Maximum number of clients to fetch (1000)'
    type: uint64
    repeated: false
    required: false
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: false
  category: server
- name: clock
  description: |
    Generate a timestamp periodically. This is mostly useful for event
    queries.

    This plugin generates events periodically. The periodicity can be
    controlled either via the `period` or the `ms` parameter. Each row
    will be a go [time.Time](https://golang.org/pkg/time/#Time)
    object. You can access its unix epoch time with the Sec column.

    ### Example

    The following will generate an event every 10 seconds.

    ```sql
    SELECT Sec FROM clock(period=10)
    ```

    The `start` parameter can be used to schedule the plugin to start
    at a particular time. This can be an integer (which will be
    interpreted as seconds since the epoch), a string or a time value.
  type: Plugin
  args:
  - name: start
    description: Start at this time.
    type: Any
    repeated: false
    required: false
  - name: period
    description: Wait this many seconds between events.
    type: int64
    repeated: false
    required: false
  - name: ms
    description: Wait this many ms between events.
    type: int64
    repeated: false
    required: false
  category: event
- name: collect
  description: Collect artifacts into a local file.
  type: Plugin
  args:
  - name: artifacts
    description: A list of artifacts to collect.
    type: string
    repeated: true
    required: true
  - name: output
    description: A path to write the output file on.
    type: string
    repeated: false
    required: false
  - name: report
    description: A path to write the report on.
    type: string
    repeated: false
    required: false
  - name: args
    description: Optional parameters.
    type: Any
    repeated: false
    required: false
  - name: password
    description: An optional password to encrypt the collection zip.
    type: string
    repeated: false
    required: false
  - name: format
    description: Output format (csv, jsonl).
    type: string
    repeated: false
    required: false
  - name: artifact_definitions
    description: Optional additional custom artifacts.
    type: Any
    repeated: false
    required: false
  - name: template
    description: The name of a template artifact (i.e. one which has report of type
      HTML).
    type: string
    repeated: false
    required: false
  - name: level
    description: Compression level between 0 (no compression) and 9.
    type: int64
    repeated: false
    required: false
  category: plugin
- name: collect_client
  description: |
    Launch an artifact collection against a client. If the client_id
    is "server" then the collection occurs on the server itself. In
    that case the caller needs the SERVER_ADMIN permission.
  type: Function
  args:
  - name: client_id
    description: The client id to schedule a collection on
    type: string
    repeated: false
    required: true
  - name: artifacts
    description: A list of artifacts to collect
    type: string
    repeated: true
    required: true
  - name: env
    description: Parameters to apply to the artifact (an alternative to a full spec)
    type: Any
    repeated: false
    required: false
  - name: spec
    description: Parameters to apply to the artifacts
    type: Any
    repeated: false
    required: false
  category: server
- name: compress
  description: |
    Compress a file in the server's FileStore. A compressed
    file is archived so it takes less space. It is still possible to see
    the file and read it but not to seek within it.
  type: Function
  args:
  - name: path
    description: A VFS path to compress
    type: string
    repeated: true
    required: true
  category: server
- name: connections
  description: List all active connections
  type: Plugin
  args: []
  category: client
- name: copy
  description: Copy a file.
  type: Function
  args:
  - name: filename
    description: The file to copy from.
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  - name: dest
    description: The destination file to write.
    type: string
    repeated: false
    required: true
  - name: permissions
    description: Required permissions (e.g. 'x').
    type: string
    repeated: false
    required: false
  category: basic
- name: count
  description: Counts the items.
  type: Function
  args:
  - name: items
    description: ""
    type: Any
    repeated: false
    required: false
  category: basic
- name: create_flow_download
  description: Creates a download pack for the flow.
  type: Function
  args:
  - name: client_id
    description: Client ID to export.
    type: string
    repeated: false
    required: true
  - name: flow_id
    description: The flow id to export.
    type: string
    repeated: false
    required: true
  - name: wait
    description: If set we wait for the download to complete before returning.
    type: bool
    repeated: false
    required: false
  - name: type
    description: Type of download to create (e.g. 'report') default a full zip file.
    type: string
    repeated: false
    required: false
  - name: template
    description: Report template to use (defaults to Reporting.Default).
    type: string
    repeated: false
    required: false
  category: server
- name: create_hunt_download
  description: Creates a download pack for a hunt.
  type: Function
  args:
  - name: hunt_id
    description: Hunt ID to export.
    type: string
    repeated: false
    required: true
  - name: only_combined
    description: If set we only export combined results.
    type: bool
    repeated: false
    required: false
  - name: wait
    description: If set we wait for the download to complete before returning.
    type: bool
    repeated: false
    required: false
  - name: format
    description: Format to export (csv,json) defaults to both.
    type: string
    repeated: false
    required: false
  - name: base
    description: Base filename to write to.
    type: string
    repeated: false
    required: false
  category: server
- name: dict
  description: Construct a dict from arbitrary keyword args.
  type: Function
  args: []
  category: basic
- name: diff
  description: |
    Executes 'query' periodically and emit differences from the last query.

    The `diff()` plugin runs a non-event query periodically and calculates
    the difference between its result set from the last run.

    This can be used to create event queries which watch for changes from
    simpler non-event queries.

    The `key` parameter is the name of the column which is used to
    determine row equivalency.

    {{% notice note %}}

    There is only a single equivalence row specified by the `key`
    parameter, and it must be a string. If you need to watch multiple
    columns you need to create a new column which is the concatenation of
    other columns. For example `format(format="%s%d", args=[Name, Pid])`

    {{% /notice %}}

    ### Example

    The following VQL monitors all removable drives and lists files on
    newly inserted drives, or files that have been added to removable
    drives.

    ```sql
    LET removable_disks = SELECT Name AS Drive, Size
    FROM glob(globs="/*", accessor="file")
    WHERE Data.Description =~ "Removable"

    LET file_listing = SELECT FullPath, timestamp(epoch=Mtime.Sec) As Modified, Size
    FROM glob(globs=Drive+"\\**", accessor="file") LIMIT 1000

    SELECT * FROM diff(
      query={ SELECT * FROM foreach(row=removable_disks, query=file_listing) },
      key="FullPath",
      period=10)
      WHERE Diff = "added"
    ```
  type: Plugin
  args:
  - name: query
    description: Source for cached rows.
    type: StoredQuery
    repeated: false
    required: true
  - name: key
    description: The column to use as key.
    type: string
    repeated: false
    required: true
  - name: period
    description: Number of seconds between evaluation of the query.
    type: int64
    repeated: false
    required: false
  category: event
- name: dirname
  description: Return the directory path.
  type: Function
  args:
  - name: path
    description: Extract directory name of path
    type: string
    repeated: false
    required: true
  category: basic
- name: dns
  description: |
    Monitor dns queries.

    This plugin opens a raw socket and monitors network traffic for
    DNS questions and answers.

    {{% notice note %}}

    When Velociraptor attempts to open a raw socket, sometimes Windows
    Defender treats that as suspicious behavior and quarantines the
    Velociraptor binary. This can be avoided by signing the binary which
    signals to Windows Defender that the binary is legitimate.

    If you do not intend to build Velociraptor from source, use the
    official signed Velociraptor binaries which should not trigger alerts
    from Windows Defender.

    {{% /notice %}}
  type: Plugin
  args: []
  category: windows
- name: elastic_upload
  description: Upload rows to elastic.
  type: Plugin
  args:
  - name: query
    description: Source for rows to upload.
    type: StoredQuery
    repeated: false
    required: true
  - name: threads
    description: How many threads to use.
    type: int64
    repeated: false
    required: false
  - name: index
    description: The name of the index to upload to. If not specified ensure a column
      is named '_index'.
    type: string
    repeated: false
    required: false
  - name: type
    description: The type of the index to upload to.
    type: string
    repeated: false
    required: true
  - name: chunk_size
    description: The number of rows to send at the time.
    type: int64
    repeated: false
    required: false
  - name: addresses
    description: A list of Elasticsearch nodes to use.
    type: string
    repeated: true
    required: false
  - name: username
    description: Username for HTTP Basic Authentication.
    type: string
    repeated: false
    required: false
  - name: password
    description: Password for HTTP Basic Authentication.
    type: string
    repeated: false
    required: false
  - name: cloud_id
    description: Endpoint for the Elastic Service (https://elastic.co/cloud).
    type: string
    repeated: false
    required: false
  - name: api_key
    description: Base64-encoded token for authorization; if set, overrides username
      and password.
    type: string
    repeated: false
    required: false
  - name: wait_time
    description: Batch elastic upload this long (2 sec).
    type: int64
    repeated: false
    required: false
  category: server
- name: encode
  description: Encodes a string as as different type. Currently supported types include
    'hex', 'base64'.
  type: Function
  args:
  - name: string
    description: ""
    type: Any
    repeated: false
    required: true
  - name: type
    description: ""
    type: string
    repeated: false
    required: true
  category: basic
- name: enumerate
  description: Collect all the items in each group by bin.
  type: Function
  args:
  - name: items
    description: ""
    type: Any
    repeated: false
    required: false
  category: basic
- name: enumerate_flow
  description: Enumerate all the files that make up a flow.
  type: Plugin
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  - name: flow_id
    description: ""
    type: string
    repeated: false
    required: false
  category: server
- name: environ
  description: Get an environment variable.
  type: Function
  args:
  - name: var
    description: Extract the var from the environment.
    type: string
    repeated: false
    required: true
  category: basic
- name: environ
  description: |
    The row returned will have all environment variables as
    columns. If the var parameter is provided, only those variables
    will be provided.
  type: Plugin
  args:
  - name: vars
    description: Extract these variables from the environment and return them one
      per row
    type: string
    repeated: true
    required: false
  category: plugin
- name: execve
  description: |
    This plugin launches an external command and captures its STDERR,
    STDOUT and return code. The command's stdout is split using the `sep`
    parameter as required.

    This plugin is mostly useful for running arbitrary code on the
    client. If you do not want to allow arbitrary code to run, you can
    disable this by setting the `prevent_execve` flag in the client's
    config file. Be aware than many artifacts require running external
    commands to collect their output though.

    We do not actually transfer the external program to the system
    automatically. If you need to run programs which are not usually
    installed (e.g. Sysinternal's autoruns.exe) you will need to map them
    from a share (requiring direct access to the AD domain) or download
    them using the `http_client()` plugin.
  type: Plugin
  args:
  - name: argv
    description: Argv to run the command with.
    type: string
    repeated: true
    required: true
  - name: sep
    description: The serparator that will be used to split the stdout into rows.
    type: string
    repeated: false
    required: false
  - name: length
    description: Size of buffer to capture output per row.
    type: int64
    repeated: false
    required: false
  category: plugin
- name: expand
  description: |
    Expand the path using the environment.

    This function expands environment variables into the path. It is
    normally needed after using registry values of type REG_EXPAND_SZ as
    they typically contain environment strings. Velociraptor does not
    automatically expand such values since environment variables typically
    depend on the specific user account which reads the registry value
    (different user accounts can have different environment variables).
  type: Function
  args:
  - name: path
    description: A path with environment escapes
    type: string
    repeated: false
    required: true
  category: basic
- name: fifo
  description: |
    Executes 'query' and cache a number of rows from it. For each invocation
    we present the set of past rows.

    The `fifo()` plugin allows for VQL queries to apply across historical
    data. The fifo plugin accepts another event query as parameter, then
    retains the last `max_rows` rows from it in an internal queue. Every
    subsequent evaluation from the query will return the full set of rows
    in the queue. Older rows are expired from the queue according to the
    `max_age` parameter.

    Fifos are usually used to form queries that look for specific pattern
    of behavior. For example, a successful logon followed by failed
    logons. In this case the fifo retains the recent history of failed
    logons in its internal queue, then when a successful logon occurs we
    can check the recent failed ones in its queue.

    ### Example

    The following checks for 5 failed logons followed by a successful
    logon.

    ```sql
    LET failed_logon = SELECT EventData as FailedEventData,
       System as FailedSystem
    FROM watch_evtx(filename=securityLogFile)
    WHERE System.EventID.Value = 4625

    LET last_5_events = SELECT FailedEventData, FailedSystem
        FROM fifo(query=failed_logon,
                  max_rows=500,
                  max_age=atoi(string=failedLogonTimeWindow))

    LET success_logon = SELECT EventData as SuccessEventData,
       System as SuccessSystem
    FROM watch_evtx(filename=securityLogFile)
    WHERE System.EventID.Value = 4624

    SELECT * FROM foreach(
      row=success_logon,
      query={
       SELECT SuccessSystem.TimeCreated.SystemTime AS LogonTime,
              SuccessSystem, SuccessEventData,
              enumerate(items=FailedEventData) as FailedEventData,
              FailedSystem, count(items=SuccessSystem) as Count
       FROM last_5_events
       WHERE FailedEventData.SubjectUserName = SuccessEventData.SubjectUserName
       GROUP BY LogonTime
          })  WHERE Count > atoi(string=failureCount)
    ```
  type: Plugin
  args:
  - name: query
    description: Source for cached rows.
    type: StoredQuery
    repeated: false
    required: true
  - name: max_age
    description: Maximum number of seconds to hold rows in the fifo.
    type: int64
    repeated: false
    required: false
  - name: max_rows
    description: Maximum number of rows to hold in the fifo.
    type: int64
    repeated: false
    required: false
  - name: flush
    description: If specified we flush all rows from cache after the call.
    type: bool
    repeated: false
    required: false
  category: event
- name: file_store
  description: |
    Resolves file store paths into full filesystem paths.

    This function is only available on the server. It can be used to
    find the backing file behind a filestore path so it can be passed
    on to an external program.

    Velociraptor uses the concept of a Virtual File System to manage the
    information about clients etc. The VFS path is a path into the file
    store. Of course ultimately (at least in the current implementation)
    the file store is storing files on disk, but the disk filename is not
    necessarily the same as the VFS path (for example non representable
    characters are escaped).

    You can use the `file_store()` function to return the real file path
    on disk. This probably only makes sense for VQL queries running on the
    server which can independently open the file.

    In future the file store may be abstracted (e.g. files may not be
    locally stored at all) and this function may stop working.
  type: Function
  args:
  - name: path
    description: A VFS path to convert
    type: string
    repeated: true
    required: true
  category: server
- name: file_store_delete
  description: 'Delete file store paths into full filesystem paths. '
  type: Function
  args:
  - name: path
    description: A VFS path to remove
    type: string
    repeated: false
    required: true
  category: server
- name: filesystems
  description: ""
  type: Plugin
  args: []
  category: plugin
- name: filter
  description: |
    Filters a strings array by regex.
  type: Function
  args:
  - name: list
    description: A list of items to filter
    type: string
    repeated: true
    required: true
  - name: regex
    description: A regex to test each item
    type: string
    repeated: true
    required: true
  category: basic
- name: flatten
  description: Flatten the columns in query. If any column repeats then we repeat
    the entire row once for each item.
  type: Plugin
  args:
  - name: Name
    description: ""
    type: string
    repeated: false
    required: false
  category: plugin
- name: flow_results
  description: Retrieve the results of a flow.
  type: Plugin
  args:
  - name: artifact
    description: The artifact to retrieve
    type: string
    repeated: false
    required: false
  - name: source
    description: An optional source within the artifact.
    type: string
    repeated: false
    required: false
  - name: flow_id
    description: The hunt id to read.
    type: string
    repeated: false
    required: true
  - name: client_id
    description: The client id to extract
    type: string
    repeated: false
    required: true
  category: server
- name: flows
  description: Retrieve the flows launched on each client.
  type: Plugin
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  - name: flow_id
    description: ""
    type: string
    repeated: false
    required: false
  category: server
- name: for
  description: Iterate over a list.
  type: Plugin
  args:
  - name: var
    description: The variable to assign.
    type: string
    repeated: false
    required: true
  - name: foreach
    description: The variable to iterate over.
    type: StoredQuery
    repeated: false
    required: true
  - name: query
    description: Run this query over the item.
    type: StoredQuery
    repeated: false
    required: false
  category: plugin
- name: foreach
  description: Executes 'query' once for each row in the 'row' query.
  type: Plugin
  args:
  - name: row
    description: A query or slice which generates rows.
    type: LazyExpr
    repeated: false
    required: true
  - name: query
    description: Run this query for each row.
    type: StoredQuery
    repeated: false
    required: false
  - name: async
    description: If set we run all queries asyncronously (implies workers=1000).
    type: bool
    repeated: false
    required: false
  - name: workers
    description: Total number of asyncronous workers.
    type: int64
    repeated: false
    required: false
  - name: column
    description: If set we only extract the column from row.
    type: string
    repeated: false
    required: false
  category: plugin
- name: format
  description: Format one or more items according to a format string.
  type: Function
  args:
  - name: format
    description: Format string to use
    type: string
    repeated: false
    required: true
  - name: args
    description: An array of elements to apply into the format string.
    type: Any
    repeated: false
    required: false
  category: basic
- name: get
  description: |
    Gets the member field from item.

    This is useful to index an item from an array. For example:

    ### Example

    ```sql
    select get(item=[dict(foo=3), 2, 3, 4], member='0.foo') AS Foo from scope()

    [
     {
       "Foo": 3
     }
    ]
    ```
  type: Function
  args:
  - name: item
    description: ""
    type: Any
    repeated: false
    required: false
  - name: member
    description: ""
    type: string
    repeated: false
    required: false
  - name: field
    description: ""
    type: Any
    repeated: false
    required: false
  - name: default
    description: ""
    type: Any
    repeated: false
    required: false
  category: basic
- name: get_client_monitoring
  description: Retrieve the current client monitoring state.
  type: Function
  args: []
  category: server
- name: get_server_monitoring
  description: Retrieve the current client monitoring state.
  type: Function
  args: []
  category: server
- name: getpid
  description: Returns the current pid of the process.
  type: Function
  args: []
  category: basic
- name: glob
  description: |
    Retrieve files based on a list of glob expressions

    The `glob()` plugin is one of the most used plugins. It applies a glob
    expression in order to search for files by file name. The glob
    expression allows for wildcards, alternatives and character
    classes. Globs support both forward and backslashes as path
    separators. They also support quoting to delimit components.

    A glob expression consists of a sequence of components separated by
    path separators. If a separator is included within a component it is
    possible to quote the component to keep it together. For example, the
    windows registry contains keys with forward slash in their
    names. Therefore we may use these to prevent the glob from getting
    confused:

    ```
    HKEY_LOCAL_MACHINE\Microsoft\Windows\"Some Key With http://www.microsoft.com/"\Some Value
    ```

    Glob expressions are case insensitive and may contain the following wild cards:

    * The `*` matches one or more characters.
    * The `?` matches a single character.
    * Alternatives are denoted by braces and comma delimited: `{a,b}`
    * Recursive search is denoted by a `**`. By default this searches 3 directories deep. If you need to increase it you can add a depth number (e.g. `**10`)

    By default globs do not expand environment variables. If you need to
    expand environment variables use the `expand()` function explicitly:

    ```sql
    glob(globs=expand(string="%SystemRoot%\System32\Winevt\Logs\*"))
    ```

    ### Example

    The following searches the raw NTFS disk for event logs.

    ```sql
    SELECT FullPath FROM glob(
    globs="C:\Windows\System32\Winevt\Logs\*.evtx",
    accessor="ntfs")
    ```

    ### The root parameter

    If the root parameter is specified, we start globbing from this
    directory - i.e. the glob pattern is appended to the root
    parameter.  The `root` parameter is useful if the directory name
    itself may contain glob characters.
  type: Plugin
  args:
  - name: globs
    description: One or more glob patterns to apply to the filesystem.
    type: string
    repeated: true
    required: true
  - name: root
    description: The root directory to glob from (default '').
    type: string
    repeated: false
    required: false
  - name: accessor
    description: An accessor to use.
    type: string
    repeated: false
    required: false
  category: plugin
- name: grep
  description: Search a file for keywords.
  type: Function
  args:
  - name: path
    description: path to open.
    type: string
    repeated: false
    required: true
  - name: accessor
    description: An accessor to use.
    type: string
    repeated: false
    required: false
  - name: keywords
    description: Keywords to search for.
    type: string
    repeated: true
    required: true
  - name: context
    description: Extract this many bytes as context around hits.
    type: int
    repeated: false
    required: false
  category: plugin
- name: grok
  description: Parse a string using a Grok expression.
  type: Function
  args:
  - name: grok
    description: Grok pattern.
    type: string
    repeated: false
    required: true
  - name: data
    description: String to parse.
    type: string
    repeated: false
    required: true
  - name: patterns
    description: Additional patterns.
    type: Any
    repeated: false
    required: false
  category: parsers
- name: gui_users
  description: Retrieve the list of users on the server.
  type: Plugin
  args: []
  category: server
- name: handles
  description: Enumerate process handles.
  type: Plugin
  args:
  - name: pid
    description: The PID to dump out.
    type: int64
    repeated: false
    required: true
  category: windows
- name: hash
  description: |
    Calculate the hash of a file.

    This function calculates the MD5, SHA1 and SHA256 hashes of the file.
  type: Function
  args:
  - name: path
    description: Path to open and hash.
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  category: plugin
- name: http_client
  description: |
    Make a http request.

    This plugin makes a HTTP connection using the specified method. The
    headers and parameters may be specified. The plugin reads the
    specified number of bytes per returned row.

    If `disable_ssl_security` is specified we do not enforce SSL
    integrity. This is required to connect to self signed ssl web
    sites. For example many API handlers are exposed over such
    connections.

    {{% notice note %}}

    When connecting to the Velociraptor frontend itself, even in self
    signed mode, we will ensure certs are properly verified. You can
    therefore safely export files from the Frontend's public directory
    over self signed SSL. When connecting to a self signed Velociraptor
    frontend, we ensure the self signed certificate was issued by the
    Velociraptor internal CA - i.e. we pin the Frontend's certificate in
    the binary.

    {{% /notice %}}

    The `http_client()` plugin allows use to interact with any web
    services. If the web service returns a json blob, we can parse it with
    the `parse_json()` function (or `parse_xml()` for SOAP
    endpoints). Using the parameters with a POST method we may actually
    invoke actions from within VQL (e.g. send an SMS via an SMS gateway
    when a VQL event is received).So this is a very powerful plugin.

    When the `tempfile_extension` parameter is provided, the HTTP
    request body will be written to a tempfile with that
    extension. The name of this tempfile will be emitted as the
    Content column.

    This plugin will emit rows with the following columns:
    * Url      string: The url we fetched.
    * Content  string: The body content for this chunk
    * Response int: The HTTP response code (200=success)

    ### Example

    The following VQL returns the client's external IP as seen by the
    externalip service.

    ```sql
    SELECT Content as IP from http_client(url='http://www.myexternalip.com/raw')
    ```
  type: Plugin
  args:
  - name: url
    description: The URL to fetch
    type: string
    repeated: false
    required: true
  - name: params
    description: Parameters to encode as POST or GET query strings
    type: Any
    repeated: false
    required: false
  - name: headers
    description: A dict of headers to send.
    type: Any
    repeated: false
    required: false
  - name: method
    description: HTTP method to use (GET, POST)
    type: string
    repeated: false
    required: false
  - name: data
    description: If specified we write this raw data into a POST request instead of
      encoding the params above.
    type: string
    repeated: false
    required: false
  - name: chunk_size
    description: Read input with this chunk size and send each chunk as a row
    type: int
    repeated: false
    required: false
  - name: disable_ssl_security
    description: Disable ssl certificate verifications.
    type: bool
    repeated: false
    required: false
  - name: tempfile_extension
    description: If specified we write to a tempfile. The content field will contain
      the full path to the tempfile.
    type: string
    repeated: false
    required: false
  - name: remove_last
    description: If set we delay removal as much as possible.
    type: bool
    repeated: false
    required: false
  category: plugin
- name: humanize
  description: |
    Format items in human readable way.

    Formats a byte count in human readable way (e.g. Mb, Gb etc).
  type: Function
  args:
  - name: bytes
    description: Format bytes with units
    type: int64
    repeated: false
    required: false
  category: basic
- name: hunt
  description: Launch an artifact collection against a client.
  type: Function
  args:
  - name: description
    description: Description of the hunt
    type: string
    repeated: false
    required: true
  - name: artifacts
    description: A list of artifacts to collect
    type: string
    repeated: true
    required: true
  - name: expires
    description: Number of seconds since epoch for expiry
    type: uint64
    repeated: false
    required: false
  - name: spec
    description: Parameters to apply to the artifacts
    type: Any
    repeated: false
    required: false
  category: server
- name: hunt_add
  description: Assign a client to a hunt.
  type: Function
  args:
  - name: ClientId
    description: ""
    type: string
    repeated: false
    required: true
  - name: HuntId
    description: ""
    type: string
    repeated: false
    required: true
  category: server
- name: hunt_flows
  description: Retrieve the flows launched by a hunt.
  type: Plugin
  args:
  - name: hunt_id
    description: The hunt id to inspect.
    type: string
    repeated: false
    required: true
  - name: start_row
    description: The first row to show (used for paging).
    type: int64
    repeated: false
    required: false
  - name: limit
    description: Number of rows to show (used for paging).
    type: int64
    repeated: false
    required: false
  category: server
- name: hunt_results
  description: Retrieve the results of a hunt.
  type: Plugin
  args:
  - name: artifact
    description: The artifact to retrieve
    type: string
    repeated: false
    required: false
  - name: source
    description: An optional source within the artifact.
    type: string
    repeated: false
    required: false
  - name: hunt_id
    description: The hunt id to read.
    type: string
    repeated: false
    required: true
  - name: brief
    description: If set we return less columns.
    type: bool
    repeated: false
    required: false
  category: server
- name: hunts
  description: Retrieve the list of hunts.
  type: Plugin
  args: []
  category: server
- name: if
  description: |
    Conditional execution of query

    This function evaluates a condition. Note that the values used in the
    `then` or `else` clause are evaluated lazily. They may be expressions
    that involve stored queries (i.e. queries stored using the `LET`
    keyword). These queries will not be evaluated if they are not needed.

    This allows a query to cheaply branch. For example, if a parameter is
    given, then perform hash or upload to the server. See the
  type: Function
  args:
  - name: condition
    description: ""
    type: Any
    repeated: false
    required: true
  - name: then
    description: ""
    type: LazyExpr
    repeated: false
    required: false
  - name: else
    description: ""
    type: LazyExpr
    repeated: false
    required: false
  category: basic
- name: if
  description: |
    Conditional execution of query

    This function evaluates a condition. Note that the values used in the
    `then` or `else` clause are evaluated lazily. They may be expressions
    that involve stored queries (i.e. queries stored using the `LET`
    keyword). These queries will not be evaluated if they are not needed.

    This allows a query to cheaply branch. For example, if a parameter is
    given, then perform hash or upload to the server. See the
    `Windows.Search.FileFinder` for an example of how `if()` is used.
  type: Plugin
  args:
  - name: condition
    description: ""
    type: Any
    repeated: false
    required: true
  - name: then
    description: ""
    type: StoredQuery
    repeated: false
    required: true
  - name: else
    description: ""
    type: StoredQuery
    repeated: false
    required: false
  category: plugin
- name: info
  description: |
    Get information about the running host.

    This plugin returns a single row with information about the current
    system. The information includes the Hostname, Uptime, OS, Platform
    etc.

    This plugin is very useful in preconditions as it restricts a query to
    certain OS or versions.
  type: Plugin
  args: []
  category: plugin
- name: int
  description: Truncate to an integer.
  type: Function
  args:
  - name: int
    description: The integer to round
    type: Any
    repeated: false
    required: false
  category: plugin
- name: interfaces
  description: List all active interfaces.
  type: Plugin
  args: []
  category: windows
- name: inventory
  description: Retrieve the tools inventory.
  type: Plugin
  args: []
  category: server
- name: inventory_add
  description: Add tool to ThirdParty inventory.
  type: Function
  args:
  - name: tool
    description: ""
    type: string
    repeated: false
    required: true
  - name: serve_locally
    description: ""
    type: bool
    repeated: false
    required: false
  - name: url
    description: ""
    type: string
    repeated: false
    required: false
  - name: hash
    description: ""
    type: string
    repeated: false
    required: false
  - name: filename
    description: The name of the file on the endpoint
    type: string
    repeated: false
    required: false
  - name: file
    description: An optional file to upload
    type: string
    repeated: false
    required: false
  - name: accessor
    description: The accessor to use to read the file.
    type: string
    repeated: false
    required: false
  category: server
- name: inventory_get
  description: Get tool info from inventory service.
  type: Function
  args:
  - name: tool
    description: ""
    type: string
    repeated: false
    required: true
  category: server
- name: ip
  description: |
    Format an IP address.

    Converts an ip address encoded in various ways. If the IP address is
    encoded as 32 bit integer we can use netaddr4_le or netaddr4_be to
    print it in a human readable way.

    This currently does not support IPv6 addresses. Those are usually
    encoded as an array of 8 bytes which makes it easy to format using the
    `format()` function:

    ```
      format(format="%x:%x:%x:%x:%x:%x:%x:%x", value)
    ```
  type: Function
  args:
  - name: netaddr4_le
    description: A network order IPv4 address (as little endian).
    type: int64
    repeated: false
    required: false
  - name: netaddr4_be
    description: A network order IPv4 address (as big endian).
    type: int64
    repeated: false
    required: false
  category: plugin
- name: items
  description: Iterate over dict members producing _key and _value columns
  type: Function
  args:
  - name: item
    description: ""
    type: Any
    repeated: false
    required: false
  category: basic
- name: items
  description: Enumerate all members of the item (similar to Pythons items() method.
  type: Plugin
  args:
  - name: item
    description: The item to enumerate.
    type: Any
    repeated: false
    required: false
  category: basic
- name: join
  description: |
    Join all the args on a separator.

    Joins the array into a string separated by the sep character.
  type: Function
  args:
  - name: array
    description: The array to join
    type: string
    repeated: true
    required: true
  - name: sep
    description: The separator
    type: string
    repeated: false
    required: false
  category: basic
- name: js
  description: Compile and run javascript code.
  type: Function
  args:
  - name: js
    description: The body of the javascript code.
    type: string
    repeated: false
    required: true
  - name: key
    description: If set use this key to cache the JS VM.
    type: string
    repeated: false
    required: false
  category: experimental
- name: js_call
  description: Compile and run javascript code.
  type: Function
  args:
  - name: func
    description: JS function to call.
    type: string
    repeated: false
    required: true
  - name: args
    description: Positional args for the function.
    type: Any
    repeated: false
    required: false
  - name: key
    description: If set use this key to cache the JS VM.
    type: string
    repeated: false
    required: false
  category: experimental
- name: js_get
  description: Get a variable's value from the JS VM.
  type: Function
  args:
  - name: var
    description: The variable to get from the JS VM.
    type: string
    repeated: false
    required: true
  - name: key
    description: If set use this key to cache the JS VM.
    type: string
    repeated: false
    required: false
  category: plugin
- name: js_set
  description: Set a variables value in the JS VM.
  type: Function
  args:
  - name: var
    description: The variable to set inside the JS VM.
    type: string
    repeated: false
    required: true
  - name: value
    description: The value to set inside the VM.
    type: Any
    repeated: false
    required: true
  - name: key
    description: If set use this key to cache the JS VM.
    type: string
    repeated: false
    required: false
  category: plugin
- name: killkillkill
  description: Kills the client and forces a restart - this is very aggresive!
  type: Function
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  category: basic
- name: label
  description: |
    Add the labels to the client. If op is 'remove' then remove these labels.
  type: Function
  args:
  - name: client_id
    description: Client ID to label.
    type: string
    repeated: false
    required: true
  - name: labels
    description: A list of labels to apply
    type: string
    repeated: true
    required: true
  - name: op
    description: An operation on the labels (set, check, remove)
    type: string
    repeated: false
    required: false
  category: server
- name: len
  description: Returns the length of an object.
  type: Function
  args:
  - name: list
    description: A list of items too filter
    type: Any
    repeated: false
    required: true
  category: basic
- name: log
  description: Log the message.
  type: Function
  args:
  - name: message
    description: Message to log.
    type: string
    repeated: false
    required: true
  category: basic
- name: lookupSID
  description: Get information about the SID.
  type: Function
  args:
  - name: sid
    description: 'A SID to lookup using LookupAccountSid '
    type: string
    repeated: false
    required: true
  category: windows
- name: lowcase
  description: ""
  type: Function
  args:
  - name: string
    description: A string to lower
    type: string
    repeated: false
    required: true
  category: basic
- name: mail
  description: Send Email to a remote server.
  type: Plugin
  args:
  - name: to
    description: Receipient of the mail
    type: string
    repeated: true
    required: true
  - name: cc
    description: A cc for the mail
    type: string
    repeated: true
    required: false
  - name: subject
    description: The subject.
    type: string
    repeated: false
    required: false
  - name: body
    description: The body of the mail.
    type: string
    repeated: false
    required: true
  - name: period
    description: How long to wait before sending the next mail - help to throttle
      mails.
    type: int64
    repeated: false
    required: true
  category: server
- name: max
  description: |
    Finds the largest item in the aggregate.

    It is only meaningful in a group by query.

    ### Example

    The following query lists all the processes and shows the largest
    bash pid of all bash processes.

    ```SQL
    SELECT Name, max(items=Pid) as LargestPid from pslist() Where Name =~ 'bash' group by Name
    ```
  type: Function
  args:
  - name: items
    description: ""
    type: Any
    repeated: false
    required: false
  category: basic
- name: memoize
  description: Memoize a query into memory.
  type: Function
  args:
  - name: query
    description: Query to expand into memory
    type: LazyExpr
    repeated: false
    required: true
  - name: key
    description: The name of the column to use as a key.
    type: string
    repeated: false
    required: true
  - name: period
    description: The latest age of the cache.
    type: int64
    repeated: false
    required: false
  category: basic
- name: min
  description: |
    Finds the smallest item in the aggregate.

    It is only meaningful in a group by query.

    ### Example

    The following query lists all the processes and shows the smallest
    bash pid of all bash processes.

    ```SQL
    SELECT Name, min(items=Pid) as SmallestPid from pslist() Where Name =~ 'bash' group by Name
    ```
  type: Function
  args:
  - name: items
    description: ""
    type: Any
    repeated: false
    required: false
  category: basic
- name: mock
  description: Mock a plugin.
  type: Function
  args:
  - name: plugin
    description: The plugin to mock
    type: string
    repeated: false
    required: false
  - name: function
    description: The function to mock
    type: string
    repeated: false
    required: false
  - name: artifact
    description: The artifact to mock
    type: Any
    repeated: false
    required: false
  - name: results
    description: The result to return
    type: Any
    repeated: false
    required: true
  category: utils
- name: mock_check
  description: Check expectations on a mock.
  type: Function
  args:
  - name: plugin
    description: The plugin to mock
    type: string
    repeated: false
    required: false
  - name: function
    description: The function to mock
    type: string
    repeated: false
    required: false
  - name: expected_calls
    description: How many times plugin should be called
    type: int
    repeated: false
    required: false
  - name: clear
    description: This call will clear previous mocks for this plugin
    type: bool
    repeated: false
    required: false
  category: utils
- name: modules
  description: Enumerate Loaded DLLs.
  type: Plugin
  args:
  - name: pid
    description: The PID to dump out.
    type: int64
    repeated: false
    required: true
  category: windows
- name: monitoring
  description: Extract monitoring log from a client. If client_id is not specified
    we watch the global journal which contains event logs from all clients.
  type: Plugin
  args:
  - name: artifact
    description: The event artifact name to watch
    type: string
    repeated: false
    required: true
  category: server
- name: netstat
  description: Collect network information.
  type: Plugin
  args: []
  category: windows
- name: notebook_delete
  description: 'Delete a notebook with all its cells. '
  type: Plugin
  args:
  - name: notebook_id
    description: ""
    type: string
    repeated: false
    required: true
  - name: really_do_it
    description: ""
    type: bool
    repeated: false
    required: false
  category: server
- name: now
  description: Returns current time in seconds since epoch.
  type: Function
  args:
  - name: string
    description: A string to convert to int
    type: Any
    repeated: false
    required: true
  category: basic
- name: olevba
  description: |
    Extracts VBA Macros from Office documents.

    This plugin parses the provided files as OLE documents in order to
    recover VB macro code. A single document can have multiple code
    objects, and each such code object is emitted as a row.
  type: Plugin
  args:
  - name: file
    description: A list of filenames to open as OLE files.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  - name: max_size
    description: Maximum size of file we load into memory.
    type: int64
    repeated: false
    required: false
  category: parsers
- name: parallelize
  description: Runs query on result batches in parallel.
  type: Plugin
  args:
  - name: query
    description: The query will be run in parallel over batches.
    type: StoredQuery
    repeated: false
    required: true
  - name: client_id
    description: The client id to extract
    type: string
    repeated: false
    required: false
  - name: flow_id
    description: A flow ID (client or server artifacts)
    type: string
    repeated: false
    required: false
  - name: hunt_id
    description: Retrieve sources from this hunt (combines all results from all clients)
    type: string
    repeated: false
    required: false
  - name: artifact
    description: The name of the artifact collection to fetch
    type: string
    repeated: false
    required: false
  - name: source
    description: An optional named source within the artifact
    type: string
    repeated: false
    required: false
  - name: start_time
    description: Start return events from this date (for event sources)
    type: int64
    repeated: false
    required: false
  - name: end_time
    description: Stop end events reach this time (event sources).
    type: int64
    repeated: false
    required: false
  - name: notebook_id
    description: The notebook to read from (shoud also include cell id)
    type: string
    repeated: false
    required: false
  - name: notebook_cell_id
    description: The notebook cell read from (shoud also include notebook id)
    type: string
    repeated: false
    required: false
  - name: notebook_cell_table
    description: A notebook cell can have multiple tables.)
    type: int64
    repeated: false
    required: false
  - name: workers
    description: Number of workers to spawn.)
    type: int64
    repeated: false
    required: false
  - name: batch
    description: Number of rows in each batch.)
    type: int64
    repeated: false
    required: false
  category: server
- name: parse_auditd
  description: Parse log files generated by auditd.
  type: Plugin
  args:
  - name: filename
    description: A list of log files to parse.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: parsers
- name: parse_binary
  description: Parse a binary file into a datastructure using a profile.
  type: Function
  args:
  - name: filename
    description: Binary file to open.
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  - name: profile
    description: Profile to use (see https://github.com/Velocidex/vtypes).
    type: string
    repeated: false
    required: false
  - name: struct
    description: Name of the struct in the profile to instantiate.
    type: string
    repeated: false
    required: true
  - name: offset
    description: Start parsing from this offset
    type: int64
    repeated: false
    required: false
  category: parsers
- name: parse_csv
  description: |
    Parses events from a CSV file.

    Parses records from a CSV file. We expect the first row of the CSV
    file to contain column names.  This parser specifically supports
    Velociraptor's own CSV dialect and so it is perfect for post
    processing already existing CSV files.

    The types of each value in each column is deduced based on
    Velociraptor's standard encoding scheme. Therefore types are properly
    preserved when read from the CSV file.

    For example, downloading the results of a hunt in the GUI will produce
    a CSV file containing artifact rows collected from all clients.  We
    can then use the `parse_csv()` plugin to further filter the CSV file,
    or to stack using group by.

    ### Example

    The following stacks the result from a
    `Windows.Applications.Chrome.Extensions` artifact:

    ```sql
    SELECT count(items=User) As TotalUsers, Name
    FROM parse_csv(filename="All Windows.Applications.Chrome.Extensions.csv")
    Order By TotalUsers
    Group By Name
    ```
  type: Plugin
  args:
  - name: filename
    description: CSV files to open
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  category: parsers
- name: parse_ese
  description: Opens an ESE file and dump a table.
  type: Plugin
  args:
  - name: file
    description: ""
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  - name: table
    description: A table name to dump
    type: string
    repeated: false
    required: true
  category: parsers
- name: parse_evtx
  description: |
    Parses events from an EVTX file.

    This plugin parses windows events from the Windows Event log files (EVTX).

    A windows event typically contains two columns. The `EventData`
    contains event specific structured data while the `System` column
    contains common data for all events - including the Event ID.

    You should probably almost always filter by one or more event ids
    (using the `System.EventID.Value` field).

    ### Example

    ```sql
    SELECT System.TimeCreated.SystemTime as Timestamp,
           System.EventID.Value as EventID,
           EventData.ImagePath as ImagePath,
           EventData.ServiceName as ServiceName,
           EventData.ServiceType as Type,
           System.Security.UserID as UserSID,
           EventData as _EventData,
           System as _System
    FROM watch_evtx(filename=systemLogFile) WHERE EventID = 7045
    ```
  type: Plugin
  args:
  - name: filename
    description: A list of event log files to parse.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  - name: messagedb
    description: A Message database from https://github.com/Velocidex/evtx-data.
    type: string
    repeated: false
    required: false
  category: parsers
- name: parse_float
  description: Convert a string to a float.
  type: Function
  args:
  - name: string
    description: A string to convert to int
    type: Any
    repeated: false
    required: true
  category: parsers
- name: parse_json
  description: |
    Parse a JSON string into an object.

    Note that when VQL dereferences fields in a dict it returns a Null for
    those fields that do not exist. Thus there is no error in actually
    accessing missing fields, the column will just return nil.
  type: Function
  args:
  - name: data
    description: Json encoded string.
    type: string
    repeated: false
    required: true
  category: parsers
- name: parse_json_array
  description: |
    Parse a JSON string into an array.

    This function is similar to `parse_json()` but works for a JSON list
    instead of an object.
  type: Function
  args:
  - name: data
    description: Json encoded string.
    type: string
    repeated: false
    required: true
  category: parsers
- name: parse_json_array
  description: Parses events from a line oriented json file.
  type: Plugin
  args:
  - name: data
    description: Json encoded string.
    type: string
    repeated: false
    required: true
  category: parsers
- name: parse_jsonl
  description: Parses a line oriented json file.
  type: Plugin
  args:
  - name: filename
    description: JSON file to open
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  category: parsers
- name: parse_lines
  description: Parse a file separated into lines.
  type: Plugin
  args:
  - name: filename
    description: A list of log files to parse.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: parsers
- name: parse_mft
  description: Scan the $MFT from an NTFS volume.
  type: Plugin
  args:
  - name: filename
    description: A list of event log files to parse.
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: parsers
- name: parse_ntfs
  description: Parse an NTFS image file.
  type: Function
  args:
  - name: device
    description: The device file to open. This may be a full path - we will figure
      out the device automatically.
    type: string
    repeated: false
    required: true
  - name: inode
    description: The MFT entry to parse in inode notation (5-144-1).
    type: string
    repeated: false
    required: false
  - name: mft
    description: The MFT entry to parse.
    type: int64
    repeated: false
    required: false
  - name: mft_offset
    description: The offset to the MFT entry to parse.
    type: int64
    repeated: false
    required: false
  category: parsers
- name: parse_ntfs_i30
  description: Scan the $I30 stream from an NTFS MFT entry.
  type: Plugin
  args:
  - name: device
    description: The device file to open. This may be a full path - we will figure
      out the device automatically.
    type: string
    repeated: false
    required: true
  - name: inode
    description: The MFT entry to parse in inode notation (5-144-1).
    type: string
    repeated: false
    required: false
  - name: mft
    description: The MFT entry to parse.
    type: int64
    repeated: false
    required: false
  - name: mft_offset
    description: The offset to the MFT entry to parse.
    type: int64
    repeated: false
    required: false
  category: parsers
- name: parse_ntfs_ranges
  description: Show the run ranges for an NTFS stream.
  type: Plugin
  args:
  - name: device
    description: The device file to open. This may be a full path - we will figure
      out the device automatically.
    type: string
    repeated: false
    required: true
  - name: inode
    description: The MFT entry to parse in inode notation (5-144-1).
    type: string
    repeated: false
    required: false
  - name: mft
    description: The MFT entry to parse.
    type: int64
    repeated: false
    required: false
  - name: mft_offset
    description: The offset to the MFT entry to parse.
    type: int64
    repeated: false
    required: false
  category: parsers
- name: parse_pe
  description: Parse a PE file.
  type: Function
  args:
  - name: file
    description: The PE file to open.
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: parsers
- name: parse_records_with_regex
  description: |
    Parses a file with a set of regexp and yields matches as records.  The
    file is read into a large buffer. Then each regular expression is
    applied to the buffer, and all matches are emitted as rows.

    The regular expressions are specified in the [Go
    syntax](https://golang.org/pkg/regexp/syntax/). They are expected to
    contain capture variables to name the matches extracted.

    For example, consider a HTML file with simple links. The regular
    expression might be:

    ```
    regex='<a.+?href="(?P<Link>[^"]+?)"'
    ```

    To produce rows with a column Link.

    The aim of this plugin is to split the file into records which can be
    further parsed. For example, if the file consists of multiple records,
    this plugin can be used to extract each record, while
    parse_string_with_regex() can be used to further split each record
    into elements. This works better than trying to write a more complex
    regex which tries to capture a lot of details in one pass.


    ### Example

    Here is an example of parsing the /var/lib/dpkg/status files. These
    files consist of records separated by empty lines:

    ```
    Package: ubuntu-advantage-tools
    Status: install ok installed
    Priority: important
    Section: misc
    Installed-Size: 74
    Maintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
    Architecture: all
    Version: 17
    Conffiles:
     /etc/cron.daily/ubuntu-advantage-tools 36de53e7c2d968f951b11c64be101b91
     /etc/update-motd.d/80-esm 6ffbbf00021b4ea4255cff378c99c898
     /etc/update-motd.d/80-livepatch 1a3172ffaa815d12b58648f117ffb67e
    Description: management tools for Ubuntu Advantage
     Ubuntu Advantage is the professional package of tooling, technology
     and expertise from Canonical, helping organisations around the world
     manage their Ubuntu deployments.
     .
     Subscribers to Ubuntu Advantage will find helpful tools for accessing
     services in this package.
    Homepage: https://buy.ubuntu.com
    ```

    The following query extracts the fields in two passes. The first pass
    uses parse_records_with_regex() to extract records in blocks, while
    using parse_string_with_regex() to further break the block into
    fields.

    ```sql
    SELECT parse_string_with_regex(
       string=Record,
       regex=['Package:\\s(?P<Package>.+)',
         'Installed-Size:\\s(?P<InstalledSize>.+)',
         'Version:\\s(?P<Version>.+)',
         'Source:\\s(?P<Source>.+)',
         'Architecture:\\s(?P<Architecture>.+)']) as Record
       FROM parse_records_with_regex(
         file=linuxDpkgStatus,
         regex='(?sm)^(?P<Record>Package:.+?)\\n\\n')
    ```
  type: Plugin
  args:
  - name: file
    description: A list of files to parse.
    type: string
    repeated: true
    required: true
  - name: regex
    description: A list of regex to apply to the file data.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: parsers
- name: parse_recyclebin
  description: Parses a $I file found in the $Recycle.Bin
  type: Plugin
  args:
  - name: filename
    description: Files to be parsed.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: parsers
- name: parse_string_with_regex
  description: Parse a string with a set of regex and extract fields. Returns a dict
    with fields populated from all regex capture variables.
  type: Function
  args:
  - name: string
    description: A string to parse.
    type: string
    repeated: false
    required: true
  - name: regex
    description: The regex to apply.
    type: string
    repeated: true
    required: true
  category: parsers
- name: parse_usn
  description: Parse the USN journal from a device.
  type: Plugin
  args:
  - name: device
    description: The device file to open.
    type: string
    repeated: false
    required: true
  - name: start_offset
    description: The starting offset of the first USN record to parse.
    type: int64
    repeated: false
    required: false
  category: parsers
- name: parse_xml
  description: |
    Parse an XML document into a dict like object.
  type: Function
  args:
  - name: file
    description: XML file to open.
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  category: parsers
- name: partitions
  description: List all partititions
  type: Plugin
  args:
  - name: all
    description: If specified list all Partitions
    type: bool
    repeated: false
    required: false
  category: windows
- name: patch
  description: |
    Patch a JSON object with a json patch or merge.

    The function allows for modifications of objects by way of
    applying a json patch. You can read more about JSON patching here
    https://github.com/evanphx/json-patch.

    I practice you can use this to update server settings - for
    example, consider the client event monitoring state.

    ```text
    SELECT get_client_monitoring() FROM scope()

     [
      {
       "get_client_monitoring": {
        "artifacts": [
         "Generic.Client.Stats"
        ]
       }
      }
     ]
    ```

    Suppose we wish to add a new artifact, we can patch it with the json:
    ```json
    [{"op": "add", "path": "/artifacts/0", "value": "Windows.Events.DNSQueries"}]
    ```

    This can then be immediately pushed to `set_client_monitoring()`
    to update the monitoring state.

    ```
    SELECT set_client_monitoring(value=patch(
           item=get_client_monitoring(),
           patch=[dict(op="add", path="/artifacts/0", value="Windows.Events.DNSQueries")]))
    FROM scope()
    ```
  type: Function
  args:
  - name: item
    description: The item to path
    type: Any
    repeated: false
    required: true
  - name: patch
    description: A JSON Patch to apply
    type: Any
    repeated: false
    required: false
  - name: merge
    description: A merge-patch to apply
    type: Any
    repeated: false
    required: false
  category: server
- name: path_join
  description: Build a path by joining all components.
  type: Function
  args:
  - name: components
    description: Path components to join.
    type: string
    repeated: true
    required: true
  category: basic
- name: path_split
  description: Split a path into components. Note this is more complex than just split()
    because it takes into account path escaping.
  type: Function
  args:
  - name: path
    description: Path to split into components.
    type: string
    repeated: false
    required: true
  category: basic
- name: plist
  description: Parse plist file
  type: Function
  args:
  - name: file
    description: A list of files to parse.
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: parsers
- name: plist
  description: Parses a plist file.
  type: Plugin
  args:
  - name: file
    description: A list of files to parse.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: parsers
- name: prefetch
  description: Parses a prefetch file.
  type: Plugin
  args:
  - name: filename
    description: A list of event log files to parse.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: parsers
- name: proc_dump
  description: |
    Dumps process memory.

    Dumps a process into a crashdump. The crashdump file can be opened
    with the windows debugger as normal. The plugin returns the filename
    of the crash dump which is a temporary file - the file will be removed
    when the query completes, so if you want to hold on to it, you should
    use the upload() plugin to upload it to the server or otherwise copy
    it.
  type: Plugin
  args:
  - name: pid
    description: The PID to dump out.
    type: int64
    repeated: false
    required: true
  category: windows
- name: proc_yara
  description: |
    Scan processes using yara rules.

    This plugin uses yara's own engine to scan process memory for the signatures.

    {{% notice note %}}

    Process memory access depends on having the [SeDebugPrivilege](https://support.microsoft.com/en-au/help/131065/how-to-obtain-a-handle-to-any-process-with-sedebugprivilege) which depends on how Velociraptor was started. Even when running as System, some processes are not accessible.

    {{% /notice %}}
  type: Plugin
  args:
  - name: rules
    description: Yara rules
    type: string
    repeated: false
    required: true
  - name: pid
    description: The pid to scan
    type: int
    repeated: false
    required: true
  - name: context
    description: Return this many bytes either side of a hit
    type: int
    repeated: false
    required: false
  - name: key
    description: If set use this key to cache the  yara rules.
    type: string
    repeated: false
    required: false
  category: windows
- name: profile
  description: Returns a profile dump from the running process.
  type: Plugin
  args:
  - name: allocs
    description: A sampling of all past memory allocations
    type: bool
    repeated: false
    required: false
  - name: block
    description: Stack traces that led to blocking on synchronization primitives
    type: bool
    repeated: false
    required: false
  - name: goroutine
    description: Stack traces of all current goroutines
    type: bool
    repeated: false
    required: false
  - name: heap
    description: A sampling of memory allocations of live objects.
    type: bool
    repeated: false
    required: false
  - name: mutex
    description: Stack traces of holders of contended mutexes
    type: bool
    repeated: false
    required: false
  - name: profile
    description: CPU profile.
    type: bool
    repeated: false
    required: false
  - name: trace
    description: CPU trace.
    type: bool
    repeated: false
    required: false
  - name: debug
    description: Debug level
    type: int64
    repeated: false
    required: false
  - name: duration
    description: Duration of samples (default 30 sec)
    type: int64
    repeated: false
    required: false
  category: plugins
- name: pslist
  description: |
    Enumerate running processes.

    When specifying the pid this operation is much faster so if you are
    interested in specific processes, the pid should be
    specified. Otherwise, the plugin returns all processes one on each
    row.
  type: Plugin
  args:
  - name: pid
    description: A pid to list. If this is provided we are able to operate much faster
      by only opening a single process.
    type: int64
    repeated: false
    required: false
  category: plugin
- name: query
  description: Launch a subquery and materialize it into a list of rows.
  type: Function
  args:
  - name: vql
    description: ""
    type: vfilter.StoredQuery
    repeated: false
    required: true
  category: basic
- name: rand
  description: Selects a random number.
  type: Function
  args:
  - name: range
    description: Selects a random number up to this range.
    type: int64
    repeated: false
    required: false
  category: basic
- name: rate
  description: |
    Calculates the rate (derivative) between two quantities.

    For example if a monitoring plugin returns an absolute value
    sampled in time (e.g. bytes transferred sampled every second) then
    the rate() plugin can calculate the average bytes/sec.

    This function works by remembering the values of x and y from the
    previous row and applying the current rows values.
  type: Function
  args:
  - name: x
    description: The X float
    type: float64
    repeated: false
    required: true
  - name: "y"
    description: The Y float
    type: float64
    repeated: false
    required: true
  category: server
- name: read_file
  description: Read a file into a string.
  type: Function
  args:
  - name: length
    description: Max length of the file to read.
    type: int
    repeated: false
    required: false
  - name: filename
    description: One or more files to open.
    type: string
    repeated: false
    required: true
  - name: accessor
    description: An accessor to use.
    type: string
    repeated: false
    required: false
  category: basic
- name: read_file
  description: |
    Read files in chunks.

    This plugin reads a file in chunks and returns each chunks as a separate row.

    It is useful when we want to report file contents for small files like
    configuration files etc.

    The returned row contains the following columns: data, offset, filename
  type: Plugin
  args:
  - name: chunk
    description: length of each chunk to read from the file.
    type: int
    repeated: false
    required: false
  - name: max_length
    description: Max length of the file to read.
    type: int
    repeated: false
    required: false
  - name: filenames
    description: One or more files to open.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: An accessor to use.
    type: string
    repeated: false
    required: false
  category: plugin
- name: read_reg_key
  description: |
    This is a convenience plugin which applies the globs to the registry
    accessor to find keys. For each key the plugin then lists all the
    values within it, and returns a row which has the value names as
    columns, while the cells contain the value's stat info (and data
    content available in the `Data` field).

    This makes it easier to access a bunch of related values at once.
  type: Plugin
  args:
  - name: globs
    description: Glob expressions to apply.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: windows
- name: regex_replace
  description: Search and replace a string with a regexp. Note you can use $1 to replace
    the capture string.
  type: Function
  args:
  - name: source
    description: The source string to replace.
    type: string
    repeated: false
    required: true
  - name: replace
    description: The substitute string.
    type: string
    repeated: false
    required: true
  - name: re
    description: A regex to apply
    type: string
    repeated: false
    required: true
  category: parsers
- name: rot13
  description: Apply rot13 deobfuscation to the string.
  type: Function
  args:
  - name: string
    description: ""
    type: string
    repeated: false
    required: false
  category: parsers
- name: sample
  description: |
    Executes 'query' and samples every n'th row.

    This is most useful on the server in order to downsample event
    artifact results.
  type: Plugin
  args:
  - name: query
    description: Source query.
    type: StoredQuery
    repeated: false
    required: true
  - name: "n"
    description: Pick every n row from query.
    type: int64
    repeated: false
    required: true
  category: server
- name: scope
  description: return the scope.
  type: Function
  args: []
  category: basic
- name: scope
  description: |
    The scope plugin returns the current scope as a single row.

    The main use for this plugin is as a NOOP plugin in those cases we
    dont want to actually run anything.

    ### Example

    ```sql
    SELECT 1+1 As Two FROM scop()
    ```
  type: Plugin
  args: []
  category: plugin
- name: search
  description: Search the server client's index.
  type: Plugin
  args:
  - name: query
    description: The query string.
    type: string
    repeated: false
    required: false
  - name: offset
    description: Skip this many results.
    type: uint64
    repeated: false
    required: false
  - name: limit
    description: Only return limited results
    type: uint64
    repeated: false
    required: false
  - name: type
    description: The type of search (e.g. 'key')
    type: string
    repeated: false
    required: false
  category: server
- name: serialize
  description: Encode an object as a string (csv or json).
  type: Function
  args:
  - name: item
    description: The item to encode
    type: Any
    repeated: false
    required: true
  - name: format
    description: Encoding format (csv,json)
    type: string
    repeated: false
    required: false
  category: basic
- name: server_metadata
  description: Returns client metadata from the datastore. Client metadata is a set
    of free form key/value data
  type: Function
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  category: server
- name: server_set_metadata
  description: Sets client metadata. Client metadata is a set of free form key/value
    data
  type: Function
  args:
  - name: client_id
    description: ""
    type: string
    repeated: false
    required: true
  category: server
- name: set_client_monitoring
  description: Sets the current client monitoring state.
  type: Function
  args:
  - name: value
    description: The Value to set
    type: Any
    repeated: false
    required: true
  category: server
- name: set_server_monitoring
  description: Sets the current server monitoring state.
  type: Function
  args:
  - name: value
    description: The Value to set
    type: Any
    repeated: false
    required: true
  category: server
- name: sleep
  description: Sleep for the specified number of seconds. Always returns true.
  type: Function
  args:
  - name: time
    description: The number of seconds to sleep
    type: int64
    repeated: false
    required: false
  category: basic
- name: source
  description: |
    Retrieve rows from an artifact's source.

    This plugin is mostly useful in reports. It attempts to do the
    right thing automatically by inferring most parameters from its
    execution environment.

    For example when called within a CLIENT report context, it will
    automatically fill its flow id, client id etc. Typically this
    means that you only need to specify the source name (for
    multi-source artifacts).
  type: Plugin
  args:
  - name: client_id
    description: The client id to extract
    type: string
    repeated: false
    required: false
  - name: flow_id
    description: A flow ID (client or server artifacts)
    type: string
    repeated: false
    required: false
  - name: hunt_id
    description: Retrieve sources from this hunt (combines all results from all clients)
    type: string
    repeated: false
    required: false
  - name: artifact
    description: The name of the artifact collection to fetch
    type: string
    repeated: false
    required: false
  - name: source
    description: An optional named source within the artifact
    type: string
    repeated: false
    required: false
  - name: start_time
    description: Start return events from this date (for event sources)
    type: int64
    repeated: false
    required: false
  - name: end_time
    description: Stop end events reach this time (event sources).
    type: int64
    repeated: false
    required: false
  - name: notebook_id
    description: The notebook to read from (shoud also include cell id)
    type: string
    repeated: false
    required: false
  - name: notebook_cell_id
    description: The notebook cell read from (shoud also include notebook id)
    type: string
    repeated: false
    required: false
  - name: notebook_cell_table
    description: A notebook cell can have multiple tables.)
    type: int64
    repeated: false
    required: false
  - name: start_row
    description: Start reading the result set from this row
    type: int64
    repeated: false
    required: false
  - name: count
    description: Maximum number of clients to fetch (default unlimited)'
    type: int64
    repeated: false
    required: false
  category: server
- name: split
  description: Splits a string into an array based on a regexp separator.
  type: Function
  args:
  - name: string
    description: The value to split
    type: string
    repeated: false
    required: true
  - name: sep
    description: The serparator that will be used to split
    type: string
    repeated: false
    required: true
  category: basic
- name: split_records
  description: Parses files by splitting lines into records.
  type: Plugin
  args:
  - name: filenames
    description: Files to parse.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  - name: regex
    description: The split regular expression (e.g. a comma)
    type: string
    repeated: false
    required: true
  - name: columns
    description: If the first row is not the headers, this arg must provide a list
      of column names for each value.
    type: string
    repeated: true
    required: false
  - name: first_row_is_headers
    description: A bool indicating if we should get column names from the first row.
    type: bool
    repeated: false
    required: false
  - name: count
    description: Only split into this many columns if possible.
    type: int
    repeated: false
    required: false
  category: parsers
- name: splunk_upload
  description: Upload rows to splunk.
  type: Plugin
  args:
  - name: query
    description: Source for rows to upload.
    type: StoredQuery
    repeated: false
    required: true
  - name: threads
    description: How many threads to use.
    type: int64
    repeated: false
    required: false
  - name: url
    description: The Splunk Event Collector URL.
    type: string
    repeated: false
    required: false
  - name: token
    description: Splunk HEC Token.
    type: string
    repeated: false
    required: false
  - name: index
    description: The name of the index to upload to.
    type: string
    repeated: false
    required: true
  - name: source
    description: The source field for splunk. If not specified this will be 'velociraptor'.
    type: string
    repeated: false
    required: false
  - name: sourcetype
    description: The sourcetype field for splunk. If not specified this will 'vql'
    type: string
    repeated: false
    required: false
  - name: chunk_size
    description: The number of rows to send at the time.
    type: int64
    repeated: false
    required: false
  - name: skip_verify
    description: 'Skip SSL verification(default: False).'
    type: bool
    repeated: false
    required: false
  - name: wait_time
    description: Batch splunk upload this long (2 sec).
    type: int64
    repeated: false
    required: false
  category: server
- name: sqlite
  description: Opens an SQLite file and run a query against it.
  type: Plugin
  args:
  - name: file
    description: ""
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  - name: query
    description: ""
    type: string
    repeated: false
    required: true
  - name: args
    description: ""
    type: Any
    repeated: false
    required: false
  category: parsers
- name: srum_lookup_id
  description: Lookup a SRUM id.
  type: Function
  args:
  - name: file
    description: ""
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  - name: id
    description: ""
    type: int64
    repeated: false
    required: true
  category: windows
- name: stat
  description: Get file information. Unlike glob() this does not support wildcards.
  type: Plugin
  args:
  - name: filename
    description: One or more files to open.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: An accessor to use.
    type: string
    repeated: false
    required: false
  category: plugin
- name: str
  description: Normalize a String.
  type: Function
  args:
  - name: str
    description: The string to normalize
    type: Any
    repeated: false
    required: true
  category: basic
- name: strip
  description: Strip a prefix from a string.
  type: Function
  args:
  - name: string
    description: The string to strip
    type: string
    repeated: false
    required: true
  - name: prefix
    description: The prefix to strip
    type: string
    repeated: false
    required: false
  category: basic
- name: switch
  description: Executes each query. The first query to return any rows will be emitted.
  type: Plugin
  args: []
  category: plugin
- name: tempdir
  description: Create a temporary directory. The directory will be removed when the
    query ends.
  type: Function
  args:
  - name: remove_last
    description: If set we delay removal as much as possible.
    type: bool
    repeated: false
    required: false
  category: basic
- name: tempfile
  description: |
    Create a temporary file and write some data into it.

    The file will be automatically removed when the query completes.
  type: Function
  args:
  - name: data
    description: Data to write in the tempfile.
    type: string
    repeated: true
    required: false
  - name: extension
    description: An extension to place in the tempfile.
    type: string
    repeated: false
    required: false
  - name: permissions
    description: Required permissions (e.g. 'x').
    type: string
    repeated: false
    required: false
  - name: remove_last
    description: If set we delay removal as much as possible.
    type: bool
    repeated: false
    required: false
  category: plugin
- name: timestamp
  description: Convert from different types to a time.Time.
  type: Function
  args:
  - name: epoch
    description: ""
    type: Any
    repeated: false
    required: false
  - name: cocoatime
    description: ""
    type: int64
    repeated: false
    required: false
  - name: mactime
    description: HFS+
    type: int64
    repeated: false
    required: false
  - name: winfiletime
    description: ""
    type: int64
    repeated: false
    required: false
  - name: string
    description: Guess a timestamp from a string
    type: string
    repeated: false
    required: false
  - name: us_style
    description: US Style Month/Day/Year
    type: bool
    repeated: false
    required: false
  category: basic
- name: to_dict
  description: Construct a dict from another object.
  type: Function
  args:
  - name: item
    description: ""
    type: Any
    repeated: false
    required: false
  category: basic
- name: token
  description: Extract process token.
  type: Function
  args:
  - name: pid
    description: The PID to get the token for.
    type: int64
    repeated: false
    required: true
  category: windows
- name: upcase
  description: ""
  type: Function
  args:
  - name: string
    description: A string to lower
    type: string
    repeated: false
    required: true
  category: basic
- name: upload
  description: |
    Upload a file to the upload service. For a Velociraptor client this
    will upload the file into the flow and store it in the server's file store.

    If Velociraptor is run locally the file will be copied to the
    `--dump_dir` path or added to the triage evidence container.
  type: Function
  args:
  - name: file
    description: The file to upload
    type: string
    repeated: false
    required: true
  - name: name
    description: The name of the file that should be stored on the server
    type: string
    repeated: false
    required: false
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  category: plugin
- name: upload
  description: |
    Upload files to the server.

    This plugin uploads the specified file to the server. If Velociraptor
    is run locally the file will be copied to the `--dump_dir` path or
    added to the triage evidence container.

    This functionality is also available using the upload() function which
    might be somewhat easier to use.
  type: Plugin
  args:
  - name: files
    description: A list of files to upload
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  category: plugin
- name: upload_gcs
  description: Upload files to GCS.
  type: Function
  args:
  - name: file
    description: The file to upload
    type: string
    repeated: false
    required: true
  - name: name
    description: The name of the file that should be stored on the server
    type: string
    repeated: false
    required: false
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  - name: bucket
    description: The bucket to upload to
    type: string
    repeated: false
    required: true
  - name: project
    description: The project to upload to
    type: string
    repeated: false
    required: true
  - name: credentials
    description: The credentials to use
    type: string
    repeated: false
    required: true
  category: plugin
- name: upload_s3
  description: Upload files to S3.
  type: Function
  args:
  - name: file
    description: The file to upload
    type: string
    repeated: false
    required: true
  - name: name
    description: The name of the file that should be stored on the server
    type: string
    repeated: false
    required: false
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  - name: bucket
    description: The bucket to upload to
    type: string
    repeated: false
    required: true
  - name: region
    description: The region the bucket is in
    type: string
    repeated: false
    required: true
  - name: credentialskey
    description: The AWS key credentials to use
    type: string
    repeated: false
    required: true
  - name: credentialssecret
    description: The AWS secret credentials to use
    type: string
    repeated: false
    required: true
  - name: endpoint
    description: The Endpoint to use
    type: string
    repeated: false
    required: false
  - name: noverifycert
    description: Skip TLS Verification
    type: bool
    repeated: false
    required: false
  category: plugin
- name: upload_sftp
  description: Upload files to SFTP.
  type: Function
  args:
  - name: file
    description: The file to upload
    type: string
    repeated: false
    required: true
  - name: name
    description: The name of the file that should be stored on the server
    type: string
    repeated: false
    required: false
  - name: user
    description: The username to connect to the endpoint with
    type: string
    repeated: false
    required: true
  - name: path
    description: Path on server to upload file to
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  - name: privatekey
    description: The private key to use
    type: string
    repeated: false
    required: true
  - name: endpoint
    description: The Endpoint to use
    type: string
    repeated: false
    required: true
  - name: hostkey
    description: Host key to verify. Blank to disable
    type: string
    repeated: false
    required: false
  category: basic
- name: upload_webdav
  description: Upload files to a WebDAV server.
  type: Function
  args:
  - name: file
    description: The file to upload
    type: string
    repeated: false
    required: true
  - name: name
    description: The name that the file should have on the server
    type: string
    repeated: false
    required: false
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  - name: url
    description: The WebDAV url
    type: string
    repeated: false
    required: true
  - name: basic_auth_user
    description: The username to use in HTTP basic auth
    type: string
    repeated: false
    required: false
  - name: basic_auth_password
    description: The password to use in HTTP basic auth
    type: string
    repeated: false
    required: false
  category: basic
- name: uploads
  description: Retrieve information about a flow's uploads.
  type: Plugin
  args:
  - name: client_id
    description: The client id to extract
    type: string
    repeated: false
    required: false
  - name: flow_id
    description: A flow ID (client or server artifacts)
    type: string
    repeated: false
    required: false
  category: server
- name: url
  description: |
    Construct a URL or parse one.

    This function parses or constructs URLs. A URL may be constructed from
    scratch by providing all the components or it may be parsed from an
    existing URL.

    The returned object is a [golang
    URL](https://golang.org/pkg/net/url/#URL) and can be serialized again
    using its `String` method.

    This function is important when constructing parameters for certain
    accessors which receive a URL. For example the `zip` accessor requires
    its file names to consist of URLs. The Zip accessor interprets the URL
    in the following way:

    - The scheme is the delegate accessor to use.
    - The path is the delegate accessor's filename
    - The fragment is used by the zip accessor to retrieve the zip member itself.

    In this case it is critical to properly escape each level - it is not
    possible in the general case to simply append strings. You need to use
    the `url()` function to build the proper url.
  type: Function
  args:
  - name: scheme
    description: The scheme to use
    type: string
    repeated: false
    required: false
  - name: host
    description: The host component
    type: string
    repeated: false
    required: false
  - name: path
    description: The path component
    type: string
    repeated: false
    required: false
  - name: fragment
    description: The fragment
    type: string
    repeated: false
    required: false
  - name: parse
    description: A url to parse
    type: string
    repeated: false
    required: false
  category: basic
- name: users
  description: Display information about workstation local users. This is obtained
    through the NetUserEnum() API.
  type: Plugin
  args: []
  category: windows
- name: utf16
  description: Parse input from utf16.
  type: Function
  args:
  - name: string
    description: A string to decode
    type: string
    repeated: false
    required: true
  category: basic
- name: utf16_encode
  description: Encode a string to utf16 bytes.
  type: Function
  args:
  - name: string
    description: A string to decode
    type: string
    repeated: false
    required: true
  category: basic
- name: uuid
  description: Generate a UUID.
  type: Function
  args: []
  category: basic
- name: vad
  description: Enumerate process memory regions.
  type: Plugin
  args:
  - name: pid
    description: The PID to dump out.
    type: int64
    repeated: false
    required: true
  category: windows
- name: version
  description: |2

    Gets the version of a VQL plugin or function.

    This is useful when writing portable VQL which can work with
    older versions of Velociraptor. When Velociraptor plugins evolve
    in an incompatible way their version is incremented. It is
    possible to cater for multiple versions in the VQL using an if()
    plugin.

    For example the following can chose from a legacy query or a
    modern query based on the plugin version:
    ```
     SELECT * FROM if(
      condition=version(plugin="glob") >= 1,
      then=NewQuery,
      else=LegacyQuery)
    ```
  type: Function
  args:
  - name: function
    description: ""
    type: string
    repeated: false
    required: false
  - name: plugin
    description: ""
    type: string
    repeated: false
    required: false
  category: basic
- name: watch_auditd
  description: Watch log files generated by auditd.
  type: Plugin
  args:
  - name: filename
    description: A list of log files to parse.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: event
- name: watch_csv
  description: |
    Watch a CSV file and stream events from it. Note: This is an event
    plugin which does not complete.

    This plugin is the event version of `parse_csv()`. When the CSV file
    grows this plugin will emit the new rows.
  type: Plugin
  args:
  - name: filename
    description: CSV files to open
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  category: event
- name: watch_etw
  description: Watch for events from an ETW provider.
  type: Plugin
  args:
  - name: guid
    description: 'A Provider GUID to watch '
    type: string
    repeated: false
    required: true
  category: event
- name: watch_evtx
  description: |
    Watch an EVTX file and stream events from it.

    This is the Event plugin version of `parse_evtx()`.

    {{% notice note %}}

    It often takes several seconds for events to be flushed to the event
    log and so this plugin's event may be delayed. For some applications
    this results in a race condition with the event itself - for example,
    files mentioned in the event may already be removed by the time the
    event is triggered.

    {{% /notice %}}
  type: Plugin
  args:
  - name: filename
    description: A list of event log files to parse.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  - name: messagedb
    description: A Message database from https://github.com/Velocidex/evtx-data.
    type: string
    repeated: false
    required: false
  category: event
- name: watch_monitoring
  description: |
    Watch clients' monitoring log. This is an event plugin. This
    plugin will produce events from all clients.
  type: Plugin
  args:
  - name: artifact
    description: The event artifact name to watch
    type: string
    repeated: false
    required: true
  category: event
- name: watch_syslog
  description: 'Watch a syslog file and stream events from it. '
  type: Plugin
  args:
  - name: filename
    description: A list of log files to parse.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: The accessor to use.
    type: string
    repeated: false
    required: false
  category: event
- name: watch_usn
  description: Watch the USN journal from a device.
  type: Plugin
  args:
  - name: device
    description: The device file to open.
    type: string
    repeated: false
    required: true
  category: event
- name: winobj
  description: Enumerate The Windows Object Manager namespace.
  type: Plugin
  args:
  - name: path
    description: Object namespace path.
    type: string
    repeated: false
    required: false
  category: windows
- name: wmi
  description: |
    Execute simple WMI queries synchronously.

    This plugin issues a WMI query and returns its rows directly. The
    exact format of the returned row depends on the WMI query issued.

    This plugin creates a bridge between WMI and VQL and it is a very
    commonly used plugin for inspecting the state of windows systems.
  type: Plugin
  args:
  - name: query
    description: The WMI query to issue.
    type: string
    repeated: false
    required: true
  - name: namespace
    description: The WMI namespace to use (ROOT/CIMV2)
    type: string
    repeated: false
    required: false
  category: windows
- name: wmi_events
  description: |
    Executes an evented WMI queries asynchronously.

    This plugin sets up a [WMI event](https://docs.microsoft.com/en-us/windows/desktop/wmisdk/receiving-a-wmi-event) listener query.
  type: Plugin
  args:
  - name: query
    description: WMI query to run.
    type: string
    repeated: false
    required: true
  - name: namespace
    description: WMI namespace
    type: string
    repeated: false
    required: true
  - name: wait
    description: Wait this many seconds for events and then quit.
    type: int64
    repeated: false
    required: true
  category: event
- name: write_csv
  description: Write a query into a CSV file.
  type: Plugin
  args:
  - name: filename
    description: CSV files to open
    type: string
    repeated: false
    required: true
  - name: accessor
    description: The accessor to use
    type: string
    repeated: false
    required: false
  - name: query
    description: query to write into the file.
    type: StoredQuery
    repeated: false
    required: true
  category: plugin
- name: yara
  description: |
    Scan files using yara rules.

    The `yara()` plugin applies a signature consisting of multiple rules
    across files. You can read more about [yara rules](https://yara.readthedocs.io/en/v3.4.0/writingrules.html). The
    accessor is used to open the various files which allows this plugin to
    work across raw ntfs, zip members etc.

    Scanning proceeds by reading a block from the file, then applying the
    yara rule on the block. This will fail if the signature is split
    across block boundary. You can choose the block size to be
    appropriate.

    Note that because we are just scanning the file data, yara plugins
    like the pe plugin will not work. You can emulate all the yara plugins
    with VQL anyway (e.g. to test for pe headers)

    Typically the yara rule does not change for the life of the query, so
    we cache it to avoid having to recompile it each time. The `key`
    variable can be used to uniquely identify the cache key for the
    rule. If the `key` variable is not specified, we use the rule text
    itself to generate the cache key. It is recommended that the `key`
    parameter be specified because it makes it more efficient.

    ### Shorthand rules

    This plugin accepts yara rules in the `rules` parameter. But typically
    we only search for keywords so writing a full yara syntax rule is
    tedious. Therefore we provide a shorthand way to specify the
    keywords. For example:

    ```
    wide nocase:foo,bar,baz
    ```

    When the rule is provided in the above form, the plugin will
    automatically generate a yara rule which matches any of the specified
    keywords. The specification before the `:` means the same thing as the
    yara DSL and the following combinations are supported `wide`, `wide
    ascii`, `wide nocase`, `wide nocase ascii`.


    {{% notice note %}}

    By default only the first 100mb of the file are scanned and
    scanning stops after one hit is found.

    {{% /notice %}}
  type: Plugin
  args:
  - name: rules
    description: Yara rules in the yara DSL.
    type: string
    repeated: false
    required: true
  - name: files
    description: The list of files to scan.
    type: string
    repeated: true
    required: true
  - name: accessor
    description: Accessor (e.g. NTFS)
    type: string
    repeated: false
    required: false
  - name: context
    description: How many bytes to include around each hit
    type: int
    repeated: false
    required: false
  - name: start
    description: The start offset to scan
    type: uint64
    repeated: false
    required: false
  - name: end
    description: End scanning at this offset (100mb)
    type: uint64
    repeated: false
    required: false
  - name: number
    description: Stop after this many hits (1).
    type: int64
    repeated: false
    required: false
  - name: blocksize
    description: Blocksize for scanning (1mb).
    type: int64
    repeated: false
    required: false
  - name: key
    description: If set use this key to cache the  yara rules.
    type: string
    repeated: false
    required: false
  category: plugin
