# Autogenerated! It is safe to edit descriptions.
- name: add_client_monitoring
  description: Adds a new artifact to the client monitoring table.
  type: Function
  args:
  - name: artifact
    type: string
    description: The name of the artifact to add
    required: true
  - name: parameters
    type: LazyExpr
    description: A dict of artifact parameters
  - name: label
    type: string
    description: Add this artifact to this label group (default all)
  category: server
  metadata:
    permissions: COLLECT_CLIENT
- name: add_server_monitoring
  description: Adds a new artifact to the server monitoring table.
  type: Function
  args:
  - name: artifact
    type: string
    description: The name of the artifact to add
    required: true
  - name: parameters
    type: LazyExpr
    description: A dict of artifact parameters
  category: server
  metadata:
    permissions: COLLECT_SERVER
- name: alert
  description: Generate an alert message.
  type: Function
  version: 2
  args:
  - name: name
    type: string
    description: Name of the alert.
    required: true
  - name: dedup
    type: int64
    description: Suppress same message in this many seconds (default 7200 sec or 2
      hours).
  - name: condition
    type: Any
    description: If specified we ignore the alert unless the condition is true
- name: all
  description: Returns TRUE if all items are true.
  type: Function
  args:
  - name: items
    type: Any
    description: The items to consider. Can be an array, subquery or stored query.
      Will only be lazily evaluated!
    required: true
  - name: filter
    type: vfilter.Lambda
    description: A callback to consider each item
  - name: regex
    type: string
    description: Optionally one or more regex can be provided for convenience
    repeated: true
- name: amsi
  description: |
    AMSI is an interface on windows to scan a string for malware. This
    function submits the string to the AMSI system and receives a
    determination if it is malware.
  type: Function
  args:
  - name: string
    type: string
    description: A string to scan
    required: true
  category: windows
- name: any
  description: Returns TRUE if any items are true.
  type: Function
  args:
  - name: items
    type: Any
    description: The items to consider. Can be an array, subquery or stored query.
      Will only be lazily evaluated!
    required: true
  - name: filter
    type: vfilter.Lambda
    description: A callback to consider each item
  - name: regex
    type: string
    description: Optionally one or more regex can be provided for convenience
    repeated: true
- name: appcompatcache
  description: Parses the appcompatcache.
  type: Plugin
  category: windows
- name: array
  description: |
    Create an array with all the args.

    This function accepts arbitrary arguments and creates an array by
    flattening the arguments. For example `array(a=1, b=2)` will return
    `[1, 2]`.

    You can use this to flatten a subquery as well:

    ```sql
    SELECT array(a1={ SELECT User FROM Artifact.Windows.System.Users() }) as Users FROM scope()
    ```

    Will return a single row with Users being an array of names.
  type: Function
  category: basic
- name: artifact_definitions
  description: Dump artifact definitions from the internal repository.
  type: Plugin
  args:
  - name: names
    type: string
    description: Artifact definitions to dump
    repeated: true
  - name: deps
    type: bool
    description: If true includes all dependencies as well.
  - name: sanitize
    type: bool
    description: If true we remove extra metadata.
  category: server
  metadata:
    permissions: READ_RESULTS
- name: artifact_delete
  description: Deletes an artifact from the global repository.
  type: Function
  args:
  - name: name
    type: string
    description: The Artifact to delete
  category: server
  metadata:
    permissions: ARTIFACT_WRITER,SERVER_ARTIFACT_WRITER
- name: artifact_set
  description: Sets an artifact into the global repository.
  type: Function
  args:
  - name: definition
    type: string
    description: Artifact definition in YAML
  - name: prefix
    type: string
    description: Required name prefix
  category: server
  metadata:
    permissions: ARTIFACT_WRITER,SERVER_ARTIFACT_WRITER
- name: atexit
  description: |
    Install a query to run when the query is unwound. This is used to
    clean up when the query ends.

    For example:

    ```vql
    LET _ <= atexit(query={
      SELECT rm(filename="Foobar.txt") FROM scope()
    })
    ```
  type: Function
  version: 1
  args:
  - name: query
    type: Any
    description: A VQL Query to parse and execute.
    required: true
  - name: env
    type: ordereddict.Dict
    description: A dict of args to insert into the scope.
  - name: timeout
    type: uint64
    description: How long to wait for destructors to run (default 60 seconds).
  category: basic
- name: atoi
  description: Convert a string to an integer.
  type: Function
  args:
  - name: string
    type: Any
    description: A string to convert to int
    required: true
  category: basic
- name: audit
  description: |
    Register as an audit daemon in the kernel.

    On Linux the audit subsystem provides real time information about
    kernel auditable events. This plugin registers as a consumer and
    returns parsed events as rows.

    You should configure the audit subsystem using the `auditctl`
    binary before using this plugin.
  type: Plugin
  category: linux
  metadata:
    permissions: MACHINE_STATE
- name: authenticode
  description: |
    Parses authenticode information from PE files.

    On windows, the function will also use the windows API to determine
    if the binary is trusted by the system.
  type: Function
  args:
  - name: accessor
    type: string
    description: The accessor to use.
  - name: filename
    type: accessors.OSPath
    description: The filename to parse.
    required: true
  - name: verbose
    type: bool
    description: Set to receive verbose information about all the certs.
  category: windows
  metadata:
    permissions: MACHINE_STATE
- name: base64decode
  description: Decodes a base64 encoded string.
  type: Function
  args:
  - name: string
    type: string
    description: A string to decode
    required: true
  category: basic
- name: base64encode
  description: Encodes a string into base64.
  type: Function
  args:
  - name: string
    type: string
    description: A string to decode
    required: true
  category: basic
- name: basename
  description: |
    Return the basename of the path. For example basename(path="/foo/bar") -> "bar"
  type: Function
  args:
  - name: path
    type: Any
    description: Extract directory name of path
    required: true
  - name: sep
    type: string
    description: Separator to use (default /)
  - name: path_type
    type: string
    description: Type of path (e.g. 'windows,linux)
  category: basic
- name: batch
  description: |
    Batches query rows into multiple arrays.

    This is useful for batching multiple rows from a query into
    another query (for example sending into an API endpoint). For
    example:

    ```vql
    SELECT * FROM batch(query={
      SELECT _value
      FROM range(start=0, end=10, step=1)
    }, batch_size=3)
    ```
  type: Plugin
  args:
  - name: batch_size
    type: int64
    description: Size of batch (defaults to 10).
  - name: batch_func
    type: string
    description: A VQL Lambda that determines when a batch is ready. Example 'x=>len(list=x)
      >= 10'.
  - name: query
    type: StoredQuery
    description: Run this query over the item.
    required: true
  category: basic
- name: cache
  description: |
    Creates a cache object.

    A Cache is a data structure which is used to speed up calculating
    data by keeping it's value in memory. A cache is essentially a key
    value store - when the key is accessed, the function will be
    calculated producing a value. If the key is accessed again, the
    value is returned from the cache without calculating it again.

    For example consider the following:

    ```vql
        LET get_pid_query(Lpid) =
           SELECT Pid, Ppid, Name FROM pslist(pid=Lpid)

        SELECT cache(func=get_pid_query(Lpid=Pid), key=str(str=Pid))
        FROM ....
    ```

    The cache will ensure that get_pid_query() is only called once per
    unique Pid by comparing the key against the internal memory store.
  type: Function
  args:
  - name: func
    type: LazyExpr
    description: A function to evaluate
    required: true
  - name: name
    type: string
    description: The global name of this cache (needed when more than one)
  - name: key
    type: string
    description: Cache key to use.
    required: true
  - name: period
    type: int64
    description: The latest age of the cache.
  category: basic
- name: cancel_flow
  description: |
    Cancels the flow.

    This sends the client an immediate cancellation message and stops
    the flow. It also removes any outstanding requests for the client
    if there are any.
  type: Function
  args:
  - name: client_id
    type: string
    required: true
  - name: flow_id
    type: string
  category: server
  metadata:
    permissions: COLLECT_SERVER,COLLECT_CLIENT
- name: certificates
  description: |
    Collect certificate from the system trust store.

    This plugin uses the Windows APIs to fetch the certificates. You
    might also want to look at the `Windows.System.RootCAStore`
    artifact.
  type: Plugin
  category: windows
- name: chain
  description: |
    Chain the output of several queries into the same table.

    This plugin takes a number of queries and joins their output into
    the same table.

    You can provide the `async=TRUE` parameter to run the queries in
    parallel. This is needed when queries are event queries that never
    terminate. You can use this property to collect the output from
    multiple event plugins into the same artifact output.

    ### Example

    The following returns the rows from the first query then the rows from
    the second query.

    ```sql
    SELECT * FROM chain(
      a={ SELECT ...},
      b={ SELECT ...},
      async=TRUE)
    ```
  type: Plugin
  args:
  - name: async
    type: bool
    description: If specified we run all queries asynchronously and combine the output.
  category: plugin
- name: cidr_contains
  description: |
    Calculates if an IP address falls within a range of CIDR specified
    networks.

    ```vql
    SELECT cidr_contains(ip="192.168.0.132", ranges=[
        "192.168.0.0/24", "127.0.0.1/8"])
    FROM scope()
    ```
  type: Function
  args:
  - name: ip
    type: string
    description: An IP address
    required: true
  - name: ranges
    type: string
    description: A list of CIDR notation network ranges
    repeated: true
    required: true
  category: server
- name: client_create
  description: Create a new client in the data store.
  type: Function
  args:
  - name: first_seen_at
    type: time.Time
  - name: last_seen_at
    type: time.Time
  - name: labels
    type: string
    repeated: true
  - name: os
    type: string
    description: What type of OS this is (default offline)
  - name: hostname
    type: string
    description: The hostname of the system
  - name: client_id
    type: string
    description: if set we use this client id otherwise we make a new one
  metadata:
    permissions: SERVER_ADMIN
- name: client_delete
  description: |
    Delete all information related to a client from the filestore.

    This required the SERVER_ADMIN permission.
  type: Plugin
  args:
  - name: client_id
    type: string
    required: true
  - name: really_do_it
    type: bool
  category: server
  metadata:
    permissions: DELETE_RESULTS
- name: client_info
  description: |
    Returns client info (like the fqdn) from the datastore.

    Velociraptor maintains basic information about the client in the
    data store, such as its hostname, OS etc.

    This information is refreshed each time the `Generic.Client.Info`
    artifact is collected from the endpoint so it can be out of
    date. This process is called "interrogation" of the endpoint.

    You can refresh the entire fleet's datastore by scheduling a
    `Generic.Client.Info` hunt.
  type: Function
  args:
  - name: client_id
    type: string
    required: true
  category: server
  metadata:
    permissions: READ_RESULTS
- name: client_metadata
  description: |
    Returns client metadata from the datastore.

    Client metadata is a set of free form key/value data. Artifacts
    may use this metdata or it may simply be used as part of your IR
    processes.
  type: Function
  args:
  - name: client_id
    type: string
    required: true
  category: server
  metadata:
    permissions: READ_RESULTS,SERVER_ADMIN
- name: client_set_metadata
  description: |
    Sets client metadata.

    Client metadata is a set of free form key/value data (see
    client_metadata() function).

    Example:

    ```vql
    SELECT client_set_metadata(ClientId="C.1234", Foo="Bar")
    FROM scope()
    ```
  type: Function
  args:
  - name: client_id
    type: string
    required: true
  - name: metadata
    type: ordereddict.Dict
    description: A dict containing metadata. If not specified we use kwargs.
  category: server
  metadata:
    permissions: COLLECT_CLIENT,SERVER_ADMIN
- name: clients
  description: Retrieve the list of clients.
  type: Plugin
  args:
  - name: search
    type: string
    description: 'Client search string. Can have the following prefixes: ''label:'',
      ''host:'''
  - name: start
    type: uint64
    description: First client to fetch (0)'
  - name: count
    type: uint64
    description: Maximum number of clients to fetch (1000)'
  - name: client_id
    type: string
  category: server
  metadata:
    permissions: READ_RESULTS
- name: clock
  description: |
    Generate a timestamp periodically. This is mostly useful for event
    queries.

    This plugin generates events periodically. The periodicity can be
    controlled either via the `period` or the `ms` parameter. Each row
    will be a go [time.Time](https://golang.org/pkg/time/#Time)
    object. You can access its unix epoch time with the Sec column.

    ### Example

    The following will generate an event every 10 seconds.

    ```sql
    SELECT Second FROM clock(period=10)
    ```

    The `start` parameter can be used to schedule the plugin to start
    at a particular time. This can be an integer (which will be
    interpreted as seconds since the epoch), a string or a time value.
  type: Plugin
  args:
  - name: start
    type: Any
    description: Start at this time.
  - name: period
    type: int64
    description: Wait this many seconds between events.
  - name: ms
    type: int64
    description: Wait this many ms between events.
  category: event
- name: collect
  description: |
    Collect artifacts into a local file.

    This plugin is essentially the same as the `velociraptor artifacts
    collect --output file.zip` command. It will collect the artifacts
    into a zip file.
  type: Plugin
  args:
  - name: artifacts
    type: string
    description: A list of artifacts to collect.
    repeated: true
    required: true
  - name: output
    type: string
    description: A path to write the output file on.
  - name: report
    type: string
    description: A path to write the report on (deprecated and ignored).
  - name: args
    type: Any
    description: Optional parameters.
  - name: password
    type: string
    description: An optional password to encrypt the collection zip.
  - name: format
    type: string
    description: Output format (csv, jsonl, csv_only).
  - name: artifact_definitions
    type: Any
    description: Optional additional custom artifacts.
  - name: template
    type: string
    description: The name of a template artifact (i.e. one which has report of type
      HTML).
  - name: level
    type: int64
    description: Compression level between 0 (no compression) and 9.
  - name: ops_per_sec
    type: int64
    description: Rate limiting for collections (deprecated).
  - name: cpu_limit
    type: float64
    description: Set query cpu_limit value
  - name: iops_limit
    type: float64
    description: Set query iops_limit value
  - name: progress_timeout
    type: float64
    description: If no progress is detected in this many seconds, we terminate the
      query and output debugging information
  - name: timeout
    type: float64
    description: Total amount of time in seconds, this collection will take. Collection
      is cancelled when timeout is exceeded.
  - name: metadata
    type: StoredQuery
    description: Metadata to store in the zip archive. Outputs to metadata.json in
      top level of zip file.
  category: plugin
  metadata:
    permissions: FILESYSTEM_WRITE
- name: collect_client
  description: |
    Launch an artifact collection against a client. If the client_id
    is "server" then the collection occurs on the server itself. In
    that case the caller needs the SERVER_ADMIN permission.

    There are two way of specifying how to collect the artifacts. The
    simplest way is to specify the environment string using the `env`
    parameter, and a list of artifacts to collect in the `artifacts`
    parameter.

    In this case all artifacts will receive the the same
    parameters. For example:

    ```vql
    SELECT collect_client(
        client_id='C.11a3013ccaXXXXX',
        artifacts='Windows.KapeFiles.Targets',
        env=dict(Device ='C:', VSSAnalysis='Y', KapeTriage='Y')).request AS Flow
    FROM scope()
    ```

    Sometimes we have a number of artifacts that use the same
    parameter name for different purposes. In that case we wish to
    specify precisely which artifact receives which parameter. This
    more complex way of specifying the collection using the `spec`
    parameter:

    ```vql
    SELECT collect_client(
        client_id='C.11a3013ccaXXXXX',
        artifacts='Windows.KapeFiles.Targets',
        spec=dict(`Windows.KapeFiles.Targets`=dict(
            Device ='C:', VSSAnalysis='Y', KapeTriage='Y'))).request AS Flow
    FROM scope()
    ```

    In this case the artifact names are repeated in the spec and the
    artifacts parameter.

    NOTE: When constructing the dictionaries for the spec parameter
    you will often need to specify a field name containing full
    stop. You can escape this using the backticks like the example above.
  type: Function
  args:
  - name: client_id
    type: string
    description: The client id to schedule a collection on
    required: true
  - name: artifacts
    type: string
    description: A list of artifacts to collect
    repeated: true
    required: true
  - name: env
    type: Any
    description: Parameters to apply to the artifact (an alternative to a full spec)
  - name: spec
    type: Any
    description: Parameters to apply to the artifacts
  - name: timeout
    type: uint64
    description: Set query timeout (default 10 min)
  - name: ops_per_sec
    type: float64
    description: Set query ops_per_sec value
  - name: cpu_limit
    type: float64
    description: Set query cpu_limit value
  - name: iops_limit
    type: float64
    description: Set query iops_limit value
  - name: max_rows
    type: uint64
    description: Max number of rows to fetch
  - name: max_bytes
    type: uint64
    description: Max number of bytes to upload
  - name: urgent
    type: bool
    description: Set the collection as urgent - skips other queues collections on
      the client.
  - name: org_id
    type: string
    description: If set the collection will be started in the specified org.
  category: server
  metadata:
    permissions: COLLECT_CLIENT,COLLECT_SERVER
- name: column_filter
  description: |
    Select columns from another query using regex.

    Sometimes a query produces a large number of columns or
    unpredictable column names (eg. the `read_reg_key()` plugin
    produces a column per value name).

    You can use the column_filter() plugin to select a subset of the
    columns to include or exclude from an underlying query. For example:

    ```vql
    SELECT * FROM column_filter(
    query={
       SELECT 1 AS A, 2 AS B, 3 AS AB, 4 AS AA
       FROM scope()
    }, include="A", exclude="B")
    ```

    will include columns with the letter A in their name and remove
    columns with the letter B (so it will have A and AA above).
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    description: This query will be run to produce the columns.
    required: true
  - name: exclude
    type: string
    description: One of more regular expressions that will exclude columns.
    repeated: true
  - name: include
    type: string
    description: One of more regular expressions that will include columns.
    repeated: true
  category: basic
- name: combine
  description: Combine the output of several queries into the same result set.A convenience
    plugin acting like chain(async=TRUE).
  type: Plugin
  category: event
- name: commandline_split
  description: |
    Split a commandline into separate components following the windows
    conventions.

    Example:
    ```vql
    SELECT
      commandline_split(command='''"C:\Program Files\Velociraptor\Velociraptor.exe" service run'''),
      commandline_split(command="/usr/bin/ls -l 'file with space.txt'", bash_style=TRUE)
    FROM scope()
    ```
  type: Function
  args:
  - name: command
    type: string
    description: Commandline to split into components.
    required: true
  - name: bash_style
    type: bool
    description: Use bash rules (Uses Windows rules by default).
  category: plugin
- name: compress
  description: |
    Compress a file.

    The file is compressed using gzip. You can change the location of
    the output using the output parameter.
  type: Function
  args:
  - name: path
    type: string
    description: A path to compress
    required: true
  - name: output
    type: string
    description: A path to write the output - default is the path with a .gz extension
  category: server
  metadata:
    permissions: FILESYSTEM_WRITE,FILESYSTEM_READ
- name: connections
  description: |
    List all active connections

    On windows this uses the API to list active sockets.
  type: Plugin
  category: plugin
  metadata:
    permissions: MACHINE_STATE
- name: copy
  description: |
    Copy a file.

    The source file can use any accessor - for example one can copy
    the $MFT using the ntfs accessor to a regular file. Another
    example is to extract a file from a zip file using the `zip`
    accessor into a file on disk.

    This function can also be used to create new files with prescribed
    content - for example:

    ```vql
    SELECT copy(filename="Hello world", accessor="data", dest="C:/hi.txt")
    FROM scope()
    ```

    NOTE: Sparse files are padded out
  type: Function
  args:
  - name: filename
    type: accessors.OSPath
    description: The file to copy from.
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: dest
    type: string
    description: The destination file to write.
    required: true
  - name: permissions
    type: string
    description: Required permissions (e.g. 'x').
  - name: append
    type: bool
    description: If true we append to the target file otherwise truncate it
  category: basic
  metadata:
    permissions: FILESYSTEM_WRITE,FILESYSTEM_READ
- name: count
  description: |
    Counts the items.

    This function is an aggregation function that counts the number of
    times it is evaluated per group by context. It is useful in a
    GROUP BY clause to count the number of items in each group.

    You can also use it in a regular query to produce a row
    count. NOTE: When used in this way it only counts the total number
    of rows that are actually evaluated (i.e. not filtered out) due to
    the lazy evaluation property of VQL columns.

    For a full discussion of aggregate functions see
    https://docs.velociraptor.app/docs/vql/#aggregate-functions
  type: Function
  args:
  - name: items
    type: Any
    description: Not used anymore
  category: basic
- name: create_flow_download
  description: |
    Creates a download pack for the flow.

    This function initiates the download creation process for a
    flow. It is equivalent to the GUI functionality allowing to
    "Download Results" from the Flows Overview page.

    Using the `wait` parameter you can wait for the download to
    complete or just kick it off asynchronously.
  type: Function
  args:
  - name: client_id
    type: string
    description: Client ID to export.
    required: true
  - name: flow_id
    type: string
    description: The flow id to export.
    required: true
  - name: wait
    type: bool
    description: If set we wait for the download to complete before returning.
  - name: type
    type: string
    description: Type of download to create (deprecated Ignored).
  - name: template
    type: string
    description: Report template to use (deprecated Ignored).
  - name: password
    type: string
    description: An optional password to encrypt the collection zip.
  - name: format
    type: string
    description: Format to export (csv,json,csv_only) defaults to both.
  - name: expand_sparse
    type: bool
    description: If set we expand sparse files in the archive.
  - name: name
    type: string
    description: If specified we call the file this name otherwise we generate name
      based on flow id.
  category: server
  metadata:
    permissions: PREPARE_RESULTS
- name: create_hunt_download
  description: |
    Creates a download pack for a hunt.

    This function initiates the download creation process for a
    hunt. It is equivalent to the GUI functionality allowing to
    "Download Results" from the Hunts Overview page.

    Using the `wait` parameter you can wait for the download to
    complete or just kick it off asynchronously.
  type: Function
  args:
  - name: hunt_id
    type: string
    description: Hunt ID to export.
    required: true
  - name: only_combined
    type: bool
    description: If set we only export combined results.
  - name: wait
    type: bool
    description: If set we wait for the download to complete before returning.
  - name: format
    type: string
    description: Format to export (csv,json) defaults to both.
  - name: base
    type: string
    description: Base filename to write to.
  - name: password
    type: string
    description: An optional password to encrypt the collection zip.
  - name: expand_sparse
    type: bool
    description: If set we expand sparse files in the archive.
  category: server
  metadata:
    permissions: PREPARE_RESULTS
- name: create_notebook_download
  description: Creates a notebook export zip file.
  type: Function
  args:
  - name: notebook_id
    type: string
    description: Client ID to export.
    required: true
  metadata:
    permissions: PREPARE_RESULTS
- name: crypto_rc4
  description: Apply rc4 to the string and key.
  type: Function
  args:
  - name: string
    type: string
    description: String to apply Rc4 encryption
    required: true
  - name: key
    type: string
    description: Rc4 key (1-256bytes).
    required: true
  category: plugin
- name: delay
  description: Executes 'query' and delays relaying the rows by the specified number
    of seconds.
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    description: Source for rows.
    required: true
  - name: delay
    type: int64
    description: Number of seconds to delay.
    required: true
  - name: buffer_size
    type: int64
    description: Maximum number of rows to buffer (default 1000).
- name: delete_events
  description: Delete all the files that make up a flow.
  type: Plugin
  args:
  - name: artifact
    type: string
    description: Name of artifact events to remove
    required: true
  - name: client_id
    type: string
    description: Client ID of events to remove (use 'server' for server events)
    required: true
  - name: start_time
    type: time.Time
    description: Start time to be deleted
  - name: end_time
    type: time.Time
    description: End time to be deleted
  - name: really_do_it
    type: bool
    description: If not specified, just show what files will be removed
  metadata:
    permissions: DELETE_RESULTS
- name: delete_flow
  description: Delete all the files that make up a flow.
  type: Plugin
  args:
  - name: flow_id
    type: string
    required: true
  - name: client_id
    type: string
    required: true
  - name: really_do_it
    type: bool
  metadata:
    permissions: DELETE_RESULTS
- name: dict
  description: |
    Construct a dict from arbitrary keyword args.

    This function creates a dictionary (a key/value map). NOTE: In VQL
    dictionaries always have string keys. Sometimes key names contain
    special characters like dots etc, in that case you can use
    backticks to escape the name. For example:

    ```vql
    SELECT dict(Foo="Bar", `Name.With.Dots`="Baz")
    FROM scope()
    ```

    See the `to_dict()` function to create dicts from a query with
    unpredictable key names.
  type: Function
  category: basic
- name: diff
  description: |
    Executes 'query' periodically and emit differences from the last query.

    The `diff()` plugin runs a non-event query periodically and calculates
    the difference between its result set from the last run.

    This can be used to create event queries which watch for changes from
    simpler non-event queries.

    The `key` parameter is the name of the column which is used to
    determine row equivalency.

    {{% notice note %}}

    There is only a single equivalence column specified by the `key`
    parameter, and it must be a string. If you need to watch multiple
    columns you need to create a new column which is the concatenation
    of other columns. For example `format(format="%s%d", args=[Name,
    Pid])`

    {{% /notice %}}

    ### Example

    The following VQL monitors all removable drives and lists files on
    newly inserted drives, or files that have been added to removable
    drives.

    ```vql
    LET removable_disks = SELECT Name AS Drive, Size
    FROM glob(globs="/*", accessor="file")
    WHERE Data.Description =~ "Removable"

    LET file_listing = SELECT FullPath, Mtime As Modified, Size
    FROM glob(globs=Drive+"\\**", accessor="file") LIMIT 1000

    SELECT * FROM diff(
      query={ SELECT * FROM foreach(row=removable_disks, query=file_listing) },
      key="FullPath",
      period=10)
      WHERE Diff = "added"
    ```

    ### Example - waiting for process exit

    Although `diff()` is primarily an event query it can also be
    useful in regular client side VQL. For example we might need to
    wait for a process to exit before continuing. The following query
    blocks until the process list does not contain a process matching
    the regex.

    ```vql
    SELECT * FROM diff(key="Name", period=1, query={
       SELECT Name FROM pslist()
       WHERE Name =~ ProcessRegex
    })
    WHERE Diff =~ "removed"
    LIMIT 1
    ```

    This query:

    1. Diff will list processes every second looking for process name
       matching the regex.
    2. When a process is added or removed, the diff plugin will emit a
       row
    3. The query is only interested in a removed process
    4. After a single removed process is found the limit is reached
       and the query exits.

    Sometimes we need to wait for a subprocess to exist if it detaches
    from the terminal immediately but does some work in the background.
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    description: Source for cached rows.
    required: true
  - name: key
    type: string
    description: The column to use as key.
    required: true
  - name: period
    type: int64
    description: Number of seconds between evaluation of the query.
  category: event
- name: dirname
  description: |
    Return the directory path.

    For example direname(path="/usr/bin/ls") -> "/usr/bin"

    Related: basename()
  type: Function
  args:
  - name: path
    type: Any
    description: Extract directory name of path
    required: true
  - name: sep
    type: string
    description: Separator to use (default /)
  - name: path_type
    type: string
    description: Type of path (e.g. 'windows,linux)
  category: basic
- name: dns
  description: |
    Monitor dns queries.

    This plugin opens a raw socket and monitors network traffic for
    DNS questions and answers.

    {{% notice note %}}

    When Velociraptor attempts to open a raw socket, sometimes Windows
    Defender treats that as suspicious behavior and quarantines the
    Velociraptor binary. This can be avoided by signing the binary which
    signals to Windows Defender that the binary is legitimate.

    If you do not intend to build Velociraptor from source, use the
    official signed Velociraptor binaries which should not trigger alerts
    from Windows Defender.

    {{% /notice %}}

    It is generally better to use ETW for DNS monitoring than this
    plugin (see Windows.Events.DNSQueries)
  type: Plugin
  category: windows
- name: efivariables
  description: Enumerate efi variables.
  type: Plugin
  args:
  - name: namespace
    type: string
    description: Variable namespace.
  - name: name
    type: string
    description: Variable name
  - name: value
    type: bool
    description: Read variable value
  metadata:
    permissions: MACHINE_STATE
- name: elastic_upload
  description: |
    Upload rows to elastic.

    This uses the Elastic bulk upload API to push arbitrary rows to
    elastic. The query specified in `query` will be run and each row
    it emits will be uploaded as a separate event to Elastic.

    You can either specify the elastic index explicitly using the
    `index` parameter or provide an `_index` column in the query
    itself to send the row to a different index each time.
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    description: Source for rows to upload.
    required: true
  - name: threads
    type: int64
    description: How many threads to use.
  - name: index
    type: string
    description: The name of the index to upload to. If not specified ensure a column
      is named '_index'.
  - name: type
    type: string
    description: The type of the index to upload to.
  - name: chunk_size
    type: int64
    description: The number of rows to send at the time.
  - name: addresses
    type: string
    description: A list of Elasticsearch nodes to use.
    repeated: true
  - name: username
    type: string
    description: Username for HTTP Basic Authentication.
  - name: password
    type: string
    description: Password for HTTP Basic Authentication.
  - name: cloud_id
    type: string
    description: Endpoint for the Elastic Service (https://elastic.co/cloud).
  - name: api_key
    type: string
    description: Base64-encoded token for authorization; if set, overrides username
      and password.
  - name: wait_time
    type: int64
    description: Batch elastic upload this long (2 sec).
  - name: pipeline
    type: string
    description: Pipeline for uploads
  - name: disable_ssl_security
    type: bool
    description: Disable ssl certificate verifications (deprecated in favor of SkipVerify).
  - name: skip_verify
    type: bool
    description: Disable ssl certificate verifications.
  - name: root_ca
    type: string
    description: As a better alternative to disable_ssl_security, allows root ca certs
      to be added here.
  - name: max_memory_buffer
    type: uint64
    description: How large we allow the memory buffer to grow to while we are trying
      to contact the Elastic server (default 100mb).
  category: server
  metadata:
    permissions: COLLECT_SERVER
- name: encode
  description: Encodes a string as as different type. Currently supported types include
    'hex', 'base64'.
  type: Function
  args:
  - name: string
    type: Any
    required: true
  - name: type
    type: string
    required: true
  category: basic
- name: entropy
  description: Calculates shannon scale entropy of a string.
  type: Function
  args:
  - name: string
    type: string
    required: true
- name: enumerate
  description: |
    Collect all the items in each group by bin.

    This is an aggregate function that keeps track of all elements in
    a GROUP BY group.

    NOTE: Use this function carefully as memory use can be large. It
    keeps a copy of every element in the group and that can be very
    large for large result sets.
  type: Function
  args:
  - name: items
    type: Any
    description: Not used anymore
  category: basic
- name: enumerate_flow
  description: |
    Enumerate all the files that make up a flow.

    This includes the uploaded files, the result sets and the various
    metadata files that result flow state information.

    This plugin is mostly used for archiving or deleting a flow from
    the filestore.
  type: Plugin
  args:
  - name: client_id
    type: string
    required: true
  - name: flow_id
    type: string
  category: server
  metadata:
    permissions: READ_RESULTS
- name: environ
  description: |
    Get an environment variable.
  type: Function
  args:
  - name: var
    type: string
    description: Extract the var from the environment.
    required: true
  category: basic
  metadata:
    permissions: MACHINE_STATE
- name: environ
  description: |
    The row returned will have all environment variables as
    columns. If the var parameter is provided, only those variables
    will be provided.
  type: Plugin
  args:
  - name: vars
    type: string
    description: Extract these variables from the environment and return them one
      per row
    repeated: true
  category: plugin
- name: execve
  description: |
    This plugin launches an external command and captures its STDERR,
    STDOUT and return code. The command's stdout is split using the `sep`
    parameter as required.

    This plugin is mostly useful for running arbitrary code on the
    client. If you do not want to allow arbitrary code to run, you can
    disable this by setting the `prevent_execve` flag in the client's
    config file. Be aware than many artifacts require running external
    commands to collect their output though.

    We do not actually transfer the external program to the system
    automatically. If you need to run programs which are not usually
    installed (e.g. Sysinternal's autoruns.exe) you will need to use
    Velociraptor's external tools feature to deliver and manage the
    tools on the client.

    https://docs.velociraptor.app/docs/extending_vql/#using-external-tools
  type: Plugin
  args:
  - name: argv
    type: string
    description: Argv to run the command with.
    repeated: true
    required: true
  - name: sep
    type: string
    description: The separator that will be used to split the stdout into rows.
  - name: length
    type: int64
    description: Size of buffer to capture output per row.
  - name: env
    type: LazyExpr
    description: Environment variables to launch with.
  - name: cwd
    type: string
    description: If specified we change to this working directory first.
  category: plugin
  metadata:
    permissions: EXECVE
- name: expand
  description: |
    Expand the path using the environment.

    This function expands environment variables into the path. It is
    normally needed after using registry values of type REG_EXPAND_SZ as
    they typically contain environment strings. Velociraptor does not
    automatically expand such values since environment variables typically
    depend on the specific user account which reads the registry value
    (different user accounts can have different environment variables).

    This function uses the Golang standard for expanding variables
    (using $varname ). On Windows, we also support using the Windows
    notation with % before and after the variable name.

    ```vql
    SELECT expand(path="My Username is %USERNAME%")
    FROM scope()
    ```

    NOTE: The environment strings are set per user and Velociraptor's
    own environment may not reflect any other process's
    environment. See `Windows.Forensics.ProcessInfo` for a
    forensically sound manner of obtaining the environment from any
    process.
  type: Function
  args:
  - name: path
    type: string
    description: A path with environment escapes
    required: true
  category: basic
  metadata:
    permissions: MACHINE_STATE
- name: favorites_delete
  description: Delete a favorite.
  type: Function
  args:
  - name: name
    type: string
    description: A name for this collection template.
    required: true
  - name: type
    type: string
    description: The type of favorite.
    required: true
  category: server
- name: favorites_save
  description: |
    Save a collection into the favorites.

    Velociraptor allows the user to save a collection into their
    "Favorite" list. This allows them to quickly and easily pick a
    previously used collection.

    This VQL function provides an interface for this functionality.

    NOTE: A favorite belongs to the calling user - this function will
    update the favorite for the calling user only.
  type: Function
  args:
  - name: name
    type: string
    description: A name for this collection template.
    required: true
  - name: description
    type: string
    description: A description for the template.
  - name: specs
    type: LazyExpr
    description: The collection request spec that will be saved. We use this to create
      the new collection.
    required: true
  - name: type
    type: string
    description: The type of favorite.
    required: true
  category: server
- name: fifo
  description: |
    Executes 'query' and cache a number of rows from it. For each invocation
    we present the set of past rows.

    The `fifo()` plugin allows for VQL queries to apply across historical
    data. The fifo plugin accepts another event query as parameter, then
    retains the last `max_rows` rows from it in an internal queue. Every
    subsequent evaluation from the query will return the full set of rows
    in the queue. Older rows are expired from the queue according to the
    `max_age` parameter.

    Fifos are usually used to form queries that look for specific pattern
    of behavior. For example, a successful logon followed by failed
    logons. In this case the fifo retains the recent history of failed
    logons in its internal queue, then when a successful logon occurs we
    can check the recent failed ones in its queue.

    ### Example

    The following checks for 5 failed logons followed by a successful
    logon.

    ```sql
    LET failed_logon = SELECT EventData as FailedEventData,
       System as FailedSystem
    FROM watch_evtx(filename=securityLogFile)
    WHERE System.EventID.Value = 4625

    LET last_5_events = SELECT FailedEventData, FailedSystem
        FROM fifo(query=failed_logon,
                  max_rows=500,
                  max_age=atoi(string=failedLogonTimeWindow))

    LET success_logon = SELECT EventData as SuccessEventData,
       System as SuccessSystem
    FROM watch_evtx(filename=securityLogFile)
    WHERE System.EventID.Value = 4624

    SELECT * FROM foreach(
      row=success_logon,
      query={
       SELECT SuccessSystem.TimeCreated.SystemTime AS LogonTime,
              SuccessSystem, SuccessEventData,
              enumerate(items=FailedEventData) as FailedEventData,
              FailedSystem, count(items=SuccessSystem) as Count
       FROM last_5_events
       WHERE FailedEventData.SubjectUserName = SuccessEventData.SubjectUserName
       GROUP BY LogonTime
          })  WHERE Count > atoi(string=failureCount)
    ```
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    description: Source for cached rows.
    required: true
  - name: max_age
    type: int64
    description: Maximum number of seconds to hold rows in the fifo.
  - name: max_rows
    type: int64
    description: Maximum number of rows to hold in the fifo.
  - name: flush
    type: bool
    description: If specified we flush all rows from cache after the call.
  category: event
- name: file_store
  description: |
    Resolves file store paths into full filesystem paths.

    This function is only available on the server. It can be used to
    find the backing file behind a filestore path so it can be passed
    on to an external program.

    Velociraptor uses the concept of a Virtual File System to manage the
    information about clients etc. The VFS path is a path into the file
    store. Of course ultimately (at least in the current implementation)
    the file store is storing files on disk, but the disk filename is not
    necessarily the same as the VFS path (for example non representable
    characters are escaped).

    You can use the `file_store()` function to return the real file path
    on disk. This probably only makes sense for VQL queries running on the
    server which can independently open the file.

    In future the file store may be abstracted (e.g. files may not be
    locally stored at all) and this function may stop working.
  type: Function
  args:
  - name: path
    type: LazyExpr
    description: A VFS path to convert
    required: true
  category: server
- name: file_store_delete
  description: |
    Delete file store paths.
  type: Function
  args:
  - name: path
    type: LazyExpr
    description: A VFS path to remove
    required: true
  category: server
  metadata:
    permissions: SERVER_ADMIN
- name: filesystems
  description: |
    Enumerates mounted filesystems.
  type: Plugin
  category: plugin
- name: filter
  description: |
    Filters a strings array by regex.
  type: Function
  args:
  - name: list
    type: Any
    description: A list of items to filter
    repeated: true
    required: true
  - name: regex
    type: string
    description: A regex to test each item
    repeated: true
  - name: condition
    type: string
    description: A VQL lambda to use to filter elements
  category: basic
- name: flatten
  description: Flatten the columns in query. If any column repeats then we repeat
    the entire row once for each item.
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    required: true
  category: plugin
- name: flow_logs
  description: Retrieve the query logs of a flow.
  type: Plugin
  args:
  - name: flow_id
    type: string
    description: The flow id to read.
    required: true
  - name: client_id
    type: string
    description: The client id to extract
    required: true
  metadata:
    permissions: READ_RESULTS
- name: flow_results
  description: |
    Retrieve the results of a flow.

    This is similar to the source() plugin.

    NOTE: Since a collection can collect multiple artifacts you must
    specify the artifact you are interested in.
  type: Plugin
  args:
  - name: artifact
    type: string
    description: The artifact to retrieve
  - name: source
    type: string
    description: An optional source within the artifact.
  - name: flow_id
    type: string
    description: The hunt id to read.
    required: true
  - name: client_id
    type: string
    description: The client id to extract
    required: true
  category: server
  metadata:
    permissions: READ_RESULTS
- name: flows
  description: |
    Retrieve the flows launched on each client.

    Each flow record will include the creator of the flow, the request
    and metadata about the collection.
  type: Plugin
  args:
  - name: client_id
    type: string
    required: true
  - name: flow_id
    type: string
  category: server
  metadata:
    permissions: READ_RESULTS
- name: for
  description: |
    Iterate over a list.

    DEPRECATED - use foreach() instead.
  type: Plugin
  args:
  - name: var
    type: string
    description: The variable to assign.
    required: true
  - name: foreach
    type: StoredQuery
    description: The variable to iterate over.
    required: true
  - name: query
    type: StoredQuery
    description: Run this query over the item.
  category: plugin
- name: foreach
  description: |
    Executes 'query' once for each row in the 'row' query.

    The columns in row will be stored in the scope that is used to
    evaluate the query therefore the query may refer to the results
    from the `row` query.

    Foreach in VQL is essentially the same as an SQL JOIN operator but
    much simpler to use.

    If the `workers` parameter is specified, the plugin will spawn
    this many workers and evaluate the `query` query in each worker
    concurrently if possible. It is safe to use a large number here
    (say 100) to utilize all available cores.
  type: Plugin
  args:
  - name: row
    type: LazyExpr
    description: A query or slice which generates rows.
    required: true
  - name: query
    type: StoredQuery
    description: Run this query for each row.
  - name: async
    type: bool
    description: If set we run all queries asynchronously (implies workers=1000).
  - name: workers
    type: int64
    description: Total number of asynchronous workers.
  - name: column
    type: string
    description: If set we only extract the column from row.
  category: plugin
- name: format
  description: |
    Format one or more items according to a format string.

    This function is essentially a wrapper around Golang's
    fmt.Sprintf() function and uses the same format specifiers.

    https://pkg.go.dev/fmt

    Of note the following are very useful:

    * The `% x` applied on strings will hex print the string
    * The `%T` will reveal the internal type of an object.
    * The `%v` is the general purpose stringifier and can apply to strings, ints etc.
  type: Function
  args:
  - name: format
    type: string
    description: Format string to use
    required: true
  - name: args
    type: Any
    description: An array of elements to apply into the format string.
  category: basic
- name: gcs_pubsub_publish
  description: Publish a message to Google PubSub.
  type: Function
  args:
  - name: topic
    type: string
    description: The topic to publish to
    required: true
  - name: project_id
    type: string
    description: The project id to publish to
    required: true
  - name: msg
    type: Any
    description: Message to publish to Pubsub
    required: true
  - name: credentials
    type: string
    description: The credentials to use
    required: true
  - name: attributes
    type: ordereddict.Dict
    description: The publish attributes
    required: true
  category: server
- name: generate
  description: |
    Create a named generator that receives rows from the query.

    This plugin allow multiple queries to efficiently filter rows from
    the same query. For example:

    ```vql
    LET SystemLog = generate(query={
       SELECT * FROM parse_evtx(filename='''C:\Windows\system32\winevt\logs\System.evtx''')
    })

    SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp,
       Type, EventData
    FROM combine(
    a={
      SELECT *, "Kernel Driver Install" AS Type
      FROM SystemLog
      WHERE System.EventID.Value = 7045 AND EventData.ServiceType =~ "kernel"
    }, b={
      SELECT *, "Log File Cleared" AS Type,
                UserData.LogFileCleared AS EventData
      FROM SystemLog
      WHERE System.EventID.Value = 104
    })
    ```

    NOTE: The generate() function produces a stored query that can be
    used as the target of any `SELECT ... FROM` statement. Therefore
    it does not make sense to materialize the output of generate()
    because it is equivalent to materializing the actual target query
    itself.

    In other words this:

    ```
    LET X <= generate(query={ SELECT * FROM watch_etw(...) })
    ```

    Will attempt to enumerate the target query into an array and is
    equivalent to:

    ```
    LET X <= SELECT * FROM watch_etw(...)
    ```

    Neither of those queries will terminate as VQL waits for them to
    produce all their rows before moving to the next statement but the
    `watch_etw()` query will never terminate since it is an event
    query.
  type: Function
  version: 2
  args:
  - name: name
    type: string
    description: Name to call the generator
  - name: query
    type: StoredQuery
    description: Run this query to generator rows.
  - name: delay
    type: int64
    description: Wait before starting the query
  - name: with_file_buffer
    type: bool
    description: Enable file buffering
  - name: fan_out
    type: int64
    description: Wait for this many listeners to connect before starting the query
  category: basic
- name: geoip
  description: |
    Lookup an IP Address using the MaxMind GeoIP database. You can get
    a copy of the database from https://www.maxmind.com/. The database
    must be locally accessible so this probably only makes sense on
    the server.
  type: Function
  version: 1
  args:
  - name: ip
    type: string
    description: IP Address to lookup.
    required: true
  - name: db
    type: string
    description: Path to the MaxMind GeoIP Database.
    required: true
  category: server
- name: get
  description: |
    Gets the member field from item.

    This is useful to index an item from an array. For example:

    ### Example

    ```sql
    select get(item=[dict(foo=3), 2, 3, 4], member='0.foo') AS Foo from scope()

    [
     {
       "Foo": 3
     }
    ]
    ```

    Using the member parameter you can index inside a nested
    dictionary using dots to separate the layers.

    If you need to access a field with dots in its name, you can use
    the field parameter which simply fetches the named field.
  type: Function
  args:
  - name: item
    type: Any
  - name: member
    type: string
  - name: field
    type: Any
  - name: default
    type: Any
  category: basic
- name: get_client_monitoring
  description: |
    Retrieve the current client monitoring state.

    The client monitoring table represent's the server configuration
    of client event queries to deploy.

    This function is designed to allow programmatic manipulation of
    the event query table in conjunction with set_client_monitoring()
    function.

    It is commonly used together with the `patch()` function to patch
    the data structure to add additional event queries.
  type: Function
  category: server
  metadata:
    permissions: READ_RESULTS
- name: get_flow
  description: Gets flow details.
  type: Function
  args:
  - name: client_id
    type: string
    required: true
  - name: flow_id
    type: string
  metadata:
    permissions: COLLECT_CLIENT,COLLECT_SERVER
- name: get_server_monitoring
  description: |
    Retrieve the current server monitoring state.

    See `get_client_monitoring()`
  type: Function
  category: server
  metadata:
    permissions: READ_RESULTS
- name: getpid
  description: |
    Returns the current pid of the Velociraptor process.

    This is typically used to exclude analysis from our own process.
  type: Function
  category: basic
  metadata:
    permissions: MACHINE_STATE
- name: glob
  description: |
    Retrieve files based on a list of glob expressions

    The `glob()` plugin is one of the most used plugins. It applies a glob
    expression in order to search for files by file name. The glob
    expression allows for wildcards, alternatives and character
    classes. Globs support both forward and backslashes as path
    separators. They also support quoting to delimit components.

    A glob expression consists of a sequence of components separated by
    path separators. If a separator is included within a component it is
    possible to quote the component to keep it together. For example, the
    windows registry contains keys with forward slash in their
    names. Therefore we may use these to prevent the glob from getting
    confused:

    ```
    HKEY_LOCAL_MACHINE\Microsoft\Windows\"Some Key With http://www.microsoft.com/"\Some Value
    ```

    Glob expressions are case insensitive and may contain the following wild cards:

    * The `*` matches one or more characters.
    * The `?` matches a single character.
    * Alternatives are denoted by braces and comma delimited: `{a,b}`
    * Recursive search is denoted by a `**`. By default this searches 3 directories deep. If you need to increase it you can add a depth number (e.g. `**10`)

    By default globs do not expand environment variables. If you need to
    expand environment variables use the `expand()` function explicitly:

    ```sql
    glob(globs=expand(string="%SystemRoot%\System32\Winevt\Logs\*"))
    ```

    ### Example

    The following searches the raw NTFS disk for event logs.

    ```sql
    SELECT FullPath FROM glob(
    globs="C:\Windows\System32\Winevt\Logs\*.evtx",
    accessor="ntfs")
    ```

    ### The root parameter

    If the root parameter is specified, we start globbing from this
    directory - i.e. the glob pattern is appended to the root
    parameter.  The `root` parameter is useful if the directory name
    itself may contain glob characters.

    ## Following symlinks

    On Unix like operating systems symlinks are used
    extensively. Symlinks complicate the job of the glob() plugin
    because they break the assumption that filesystems are
    trees. Instead a symlink may form a cycle or create very deep
    directories within the filesystem.

    By default glob() follows symlinks but also checks for cycles by
    checking that a target of a symlink has not been seen before. You
    can disable this behavior with `nosymlink=TRUE`

    ## Setting a recursion callback

    Sometimes it is useful to prevent glob() from recursing into a
    directory. For example, if we know a directory can not possibly
    contain a hit we can avoid descending into it at all. This more
    efficient than simply eliminating the matching rows in the WHERE
    clause.

    You can provide a recursion callback (in the form of a VQL lambda
    function) to let glob() know if it should be recursing a
    directory. The glob() plugin will call the lambda with current
    directory entry and if the lambda returns a `true` value will
    recurse into it.

    For example consider the following query which searches for pem
    files in all directories other than /proc, /sys or /snap

    ```vql
    SELECT * FROM glob(globs='/**/*.pem',
        recursion_callback="x=>NOT x.Name =~ '^/(proc|sys|snap)'")
    ```
  type: Plugin
  version: 3
  args:
  - name: globs
    type: string
    description: One or more glob patterns to apply to the filesystem.
    repeated: true
    required: true
  - name: root
    type: accessors.OSPath
    description: The root directory to glob from (default '').
  - name: accessor
    type: string
    description: An accessor to use.
  - name: nosymlink
    type: bool
    description: If set we do not follow symlinks.
  - name: recursion_callback
    type: string
    description: A VQL function that determines if a directory should be recursed
      (e.g. "x=>NOT x.Name =~ 'proc'").
  - name: one_filesystem
    type: bool
    description: If set we do not follow links to other filesystems.
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ
- name: grep
  description: |
    Search a file for keywords.

    DEPRECATED: Use `yara()` instead.
  type: Function
  args:
  - name: path
    type: string
    description: path to open.
    required: true
  - name: accessor
    type: string
    description: An accessor to use.
  - name: keywords
    type: string
    description: Keywords to search for.
    repeated: true
    required: true
  - name: context
    type: int
    description: Extract this many bytes as context around hits.
  category: plugin
- name: grok
  description: |
    Parse a string using a Grok expression.

    This is most useful for parsing syslog style logs (e.g. IIS, Apache logs).

    You can read more about GROK expressions here
    https://www.elastic.co/blog/do-you-grok-grok
  type: Function
  args:
  - name: grok
    type: string
    description: Grok pattern.
    required: true
  - name: data
    type: string
    description: String to parse.
    required: true
  - name: patterns
    type: Any
    description: Additional patterns.
  - name: all_captures
    type: bool
    description: Extract all captures.
  category: parsers
- name: gui_users
  description: |
    Retrieve the list of users on the server.
  type: Plugin
  args:
  - name: all_orgs
    type: bool
    description: If set we enumerate permission for all orgs, otherwise just for this
      org.
  category: server
- name: gunzip
  description: Apply Gunzip to the data.
  type: Function
  args:
  - name: string
    type: string
    description: Data to apply Gunzip
    required: true
- name: handles
  description: |
    Enumerate process handles.
  type: Plugin
  args:
  - name: pid
    type: uint64
    description: If specified only get handles from these PIDs.
  - name: types
    type: string
    description: If specified only get handles of this type.
    repeated: true
  category: windows
- name: hash
  description: |
    Calculate the hash of a file.

    This function calculates the MD5, SHA1 and SHA256 hashes of the file.
  type: Function
  version: 2
  args:
  - name: path
    type: accessors.OSPath
    description: Path to open and hash.
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: hashselect
    type: string
    description: The hash function to use (MD5,SHA1,SHA256)
    repeated: true
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ
- name: http_client
  description: |
    Make a http request.

    This plugin makes a HTTP connection using the specified method. The
    headers and parameters may be specified. The plugin reads the
    specified number of bytes per returned row.

    If `disable_ssl_security` is specified we do not enforce SSL
    integrity. This is required to connect to self signed ssl web
    sites. For example many API handlers are exposed over such
    connections.

    {{% notice note %}}

    When connecting to the Velociraptor frontend itself, even in self
    signed mode, we will ensure certs are properly verified. You can
    therefore safely export files from the Frontend's public directory
    over self signed SSL. When connecting to a self signed Velociraptor
    frontend, we ensure the self signed certificate was issued by the
    Velociraptor internal CA - i.e. we pin the Frontend's certificate in
    the binary.

    {{% /notice %}}

    The `http_client()` plugin allows use to interact with any web
    services. If the web service returns a json blob, we can parse it
    with the `parse_json()` function (or `parse_xml()` for SOAP
    endpoints). Using the parameters with a POST method we may
    actually invoke actions from within VQL (e.g. send an SMS via an
    SMS gateway when a VQL event is received). So this is a very
    powerful plugin - see examples below.

    When the `tempfile_extension` parameter is provided, the HTTP
    response body will be written to a tempfile with that
    extension. The name of this tempfile will be emitted as the
    `Content` column.

    This plugin will emit rows with the following columns:
    * Url      string: The url we fetched.
    * Content  string: The body content for this chunk
    * Response int: The HTTP response code (200=success)

    ### Example

    The following VQL returns the client's external IP as seen by the
    externalip service.

    ```sql
    SELECT Content as IP from http_client(url='http://www.myexternalip.com/raw')
    ```

    You can use this plugin to download file contents by passing the
    `tempfile_extension` parameter. In this case this plugin will
    create a new temp file with the specified extension, write the
    content of the HTTP request into it and then emit a row with
    `Content` being the name of the file. The file will be
    automatically removed when the query ends.

    ### Example: Uploading files

    Many API handlers support uploading files via POST messages. While
    this is not directly supported by http_client it is possible to
    upload a file using simple VQL - by formatting the POST body using
    the multipart rules.

    ```vql
    LET file_bytes = read_file(filename="/bin/ls")

    SELECT *
    FROM http_client(
        url='http://localhost:8002/test/',
        method='POST',
        headers=dict(
            `Content-Type`="multipart/form-data;boundary=83fcda3640aca670"
        ),
        data='--83fcda3640aca670\r\nContent-Disposition: form-data; name="file";filename="ls"\r\nContent-Type: application/octet-stream\r\n\r\n' +
             file_bytes + '\r\n--83fcda3640aca670--')
    ```

    Note how custom headers can be provided using a dict - note also
    how dict keys with special characters in them can be constructed
    using the backtick quoting.
  type: Plugin
  version: 2
  args:
  - name: url
    type: string
    description: The URL to fetch
    required: true
  - name: params
    type: Any
    description: Parameters to encode as POST or GET query strings
  - name: headers
    type: Any
    description: A dict of headers to send.
  - name: method
    type: string
    description: HTTP method to use (GET, POST, PUT, PATCH, DELETE)
  - name: data
    type: string
    description: If specified we write this raw data into a POST request instead of
      encoding the params above.
  - name: chunk_size
    type: int
    description: Read input with this chunk size and send each chunk as a row
  - name: disable_ssl_security
    type: bool
    description: Disable ssl certificate verifications (deprecated in favor of SkipVerify).
  - name: skip_verify
    type: bool
    description: Disable ssl certificate verifications.
  - name: tempfile_extension
    type: string
    description: If specified we write to a tempfile. The content field will contain
      the full path to the tempfile.
  - name: remove_last
    type: bool
    description: If set we delay removal as much as possible.
  - name: root_ca
    type: string
    description: As a better alternative to disable_ssl_security, allows root ca certs
      to be added here.
  - name: cookie_jar
    type: ordereddict.Dict
    description: A cookie jar to use if provided. This is a dict of cookie structures.
  category: plugin
  metadata:
    permissions: COLLECT_SERVER
- name: humanize
  description: |
    Format items in human readable way.

    Formats a byte count in human readable way (e.g. Mb, Gb etc).
  type: Function
  args:
  - name: bytes
    type: int64
    description: Format bytes with units
  category: basic
- name: hunt
  description: |
    Create and launch a hunt.

    This function will create a new hunt to collect the specified
    artifacts. The artifacts to collect are provided in the
    `artifacts` parameter. Artifact parameters are provided in the
    `spec` parameter (see example below).

    ### NOTES

    1. In the GUI hunts are always created in the paused
    state. This is not the default state when using this function (all
    hunts are immediately active - if you want the hunt to be created
    in the paused state provide the `pause=TRUE` parameter).

    2. The expiry time is specified in any of the usual time
    specification ways (seconds since epoch, or ISO format like
    "2021-10-02"). If the expiry time is in the past, the hunt will
    not be created.

    ```vql
    SELECT hunt(
        description="A general hunt",
        artifacts='Windows.KapeFiles.Targets',
        spec=dict(`Windows.KapeFiles.Targets`=dict(
            Device ='C:', VSSAnalysis='Y', KapeTriage='Y')),
        expires=now() + 18000)
    FROM scope()
    ```
  type: Function
  args:
  - name: description
    type: string
    description: Description of the hunt
  - name: artifacts
    type: string
    description: A list of artifacts to collect
    repeated: true
    required: true
  - name: expires
    type: LazyExpr
    description: A time for expiry (e.g. now() + 1800)
  - name: spec
    type: Any
    description: Parameters to apply to the artifacts
  - name: timeout
    type: uint64
    description: Set query timeout (default 10 min)
  - name: ops_per_sec
    type: float64
    description: Set query ops_per_sec value
  - name: cpu_limit
    type: float64
    description: Set query ops_per_sec value
  - name: iops_limit
    type: float64
    description: Set query ops_per_sec value
  - name: max_rows
    type: uint64
    description: Max number of rows to fetch
  - name: max_bytes
    type: uint64
    description: Max number of bytes to upload
  - name: pause
    type: bool
    description: If specified the new hunt will be in the paused state
  - name: include_labels
    type: string
    description: If specified only include these labels
    repeated: true
  - name: exclude_labels
    type: string
    description: If specified exclude these labels
    repeated: true
  - name: os
    type: string
    description: If specified target this OS
  - name: org_id
    type: string
    description: If set the collection will be started in the specified orgs.
    repeated: true
  category: server
  metadata:
    permissions: START_HUNT,ORG_ADMIN
- name: hunt_add
  description: |
    Assign a client to a hunt.

    This function allows a client to be added to a hunt. The client
    will be immediately scheduled and the results will be added to the
    hunt. Clients are added to a hunt regardless of any hunt
    conditions, or even if the hunt is stopped.

    You can use this function to manually add clients to selected
    hunts for example after being triaged or post processed to
    identify the clients of interest.

    NOTE: An alternative method is to create a hunt that only targets
    a specific label and then just assign the label to specific
    clients.

    ## Adding an existing flow to a hunt.

    If a flow_id is specified, this function will just immediately add
    the collection to the hunt, without scheduling a new
    collection. The results of this flow will be visible when post
    processing the hunt, exporting the hunt etc.

    This is useful to redo a collection in a hunt - for example, if
    some collections in the hunt expired or were cancelled you can
    manually re-run these collections and then when successful re-add
    them to the hunt.
  type: Function
  args:
  - name: client_id
    type: string
    required: true
  - name: hunt_id
    type: string
    required: true
  - name: flow_id
    type: string
    description: If a flow id is specified we do not create a new flow, but instead
      add this flow_id to the hunt.
  - name: relaunch
    type: bool
    description: If specified we relaunch the hunt on this client again.
  category: server
  metadata:
    permissions: START_HUNT
- name: hunt_delete
  description: 'Delete a hunt. '
  type: Plugin
  args:
  - name: hunt_id
    type: string
    required: true
  - name: really_do_it
    type: bool
  metadata:
    permissions: SERVER_ADMIN
- name: hunt_flows
  description: |
    Retrieve the flows launched by a hunt.

    A Velociraptor hunt is just a collection of related flows. This
    plugin simply enumerates all the flows as part of this hunt.

    You can use this to figure out if all the collections were
    successful by looking at the result of each flow object.
  type: Plugin
  args:
  - name: hunt_id
    type: string
    description: The hunt id to inspect.
    required: true
  - name: start_row
    type: int64
    description: The first row to show (used for paging).
  - name: limit
    type: int64
    description: Number of rows to show (used for paging).
  category: server
  metadata:
    permissions: READ_RESULTS
- name: hunt_results
  description: |
    Retrieve the results of a hunt.

    This plugin essentially iterates over all flows in the hunt and
    reads out all collected rows for each client in the same table.

    It is equivalent to the source() plugin in the hunt notebook
    context.
  type: Plugin
  args:
  - name: artifact
    type: string
    description: The artifact to retrieve
  - name: source
    type: string
    description: An optional source within the artifact.
  - name: hunt_id
    type: string
    description: The hunt id to read.
    required: true
  - name: brief
    type: bool
    description: If set we return less columns.
  category: server
  metadata:
    permissions: READ_RESULTS
- name: hunt_update
  description: Update a hunt.
  type: Function
  args:
  - name: hunt_id
    type: string
    description: The hunt to update
    required: true
  - name: stop
    type: bool
    description: Stop the hunt
  - name: start
    type: bool
    description: Start the hunt
  - name: description
    type: string
    description: Update hunt description
  metadata:
    permissions: START_HUNT
- name: hunts
  description: |
    Retrieve the list of hunts.
  type: Plugin
  args:
  - name: hunt_id
    type: string
    description: A hunt id to read, if not specified we list all of them.
  - name: offset
    type: uint64
    description: Start offset.
  - name: count
    type: uint64
    description: Max number of results to return.
  category: server
  metadata:
    permissions: READ_RESULTS
- name: if
  description: |
    Conditional execution of query

    This function evaluates a condition. Note that the values used in the
    `then` or `else` clause are evaluated lazily. They may be expressions
    that involve stored queries (i.e. queries stored using the `LET`
    keyword). These queries will not be evaluated if they are not needed.

    This allows a query to cheaply branch. For example, if a parameter is
    given, then perform hash or upload to the server.
  type: Function
  args:
  - name: condition
    type: Any
    required: true
  - name: then
    type: types.LazyAny
  - name: else
    type: types.LazyAny
  category: basic
- name: if
  description: |
    Conditional execution of query

    This function evaluates a condition. Note that the values used in the
    `then` or `else` clause are evaluated lazily. They may be expressions
    that involve stored queries (i.e. queries stored using the `LET`
    keyword). These queries will not be evaluated if they are not needed.

    This allows a query to cheaply branch. For example, if a parameter is
    given, then perform hash or upload to the server. See the
    `Windows.Search.FileFinder` for an example of how `if()` is used.
  type: Plugin
  args:
  - name: condition
    type: Any
    required: true
  - name: then
    type: StoredQuery
    required: true
  - name: else
    type: StoredQuery
  category: plugin
- name: import_collection
  description: |
    Imports an offline collection zip file (experimental).

    Offline collectors are preconfigure Velociraptor binaries that
    collect specific artifacts into a zip file.

    This function allows such a collection to be imported into the GUI
    as if it was collected by the server. The collection will be
    loaded into a client's filestore directory.

    Since there is no actual client id associated with the offline
    collection (there is no Velociraptor client running on the
    endpoint) we generate a random client ID for a new client.

    If you specify an existing client id, the collection will be
    uploaded into that client.

    NOTE: Combine this function with the hunt_add() function to add a
    manual offline collection to an ongoing hunt.
  type: Function
  args:
  - name: client_id
    type: string
    description: The client id to import to. Use 'auto' to generate a new client id.
    required: true
  - name: hostname
    type: string
    description: When creating a new client, set this as the hostname.
  - name: filename
    type: string
    description: Path on server to the collector zip.
    required: true
  category: server
  metadata:
    permissions: COLLECT_SERVER,FILESYSTEM_READ
- name: info
  description: |
    Get information about the running host.

    This plugin returns a single row with information about the current
    system. The information includes the Hostname, Uptime, OS, Platform
    etc.

    This plugin is very useful in preconditions as it restricts a query to
    certain OS or versions.
  type: Plugin
  category: plugin
  metadata:
    permissions: MACHINE_STATE
- name: int
  description: |
    Truncate to an integer.

    If provided a string, the function will try to parse it into an integer.
  type: Function
  args:
  - name: int
    type: Any
    description: The integer to round
  category: plugin
- name: interfaces
  description: |
    List all active network interfaces using the API.
  type: Plugin
  category: windows
  metadata:
    permissions: MACHINE_STATE
- name: inventory
  description: |
    Retrieve the tools inventory.

    The inventory contains information about all the external tools
    Velociraptor is managing. This plugin will display this.

    See https://docs.velociraptor.app/docs/extending_vql/#using-external-tools
  type: Plugin
  category: server
- name: inventory_add
  description: |
    Add or reconfigure a tool into the inventory.

    Note that if you provide a file to override the tool it must be
    readable by the server (so the file must reside on the server or
    be accessible over a network share).
  type: Function
  args:
  - name: tool
    type: string
    required: true
  - name: serve_locally
    type: bool
  - name: url
    type: string
  - name: hash
    type: string
  - name: filename
    type: string
    description: The name of the file on the endpoint
  - name: version
    type: string
  - name: file
    type: accessors.OSPath
    description: An optional file to upload
  - name: accessor
    type: string
    description: The accessor to use to read the file.
  category: server
  metadata:
    permissions: SERVER_ADMIN
- name: inventory_get
  description: Get tool info from inventory service.
  type: Function
  args:
  - name: tool
    type: string
    required: true
  - name: version
    type: string
  category: server
  metadata:
    permissions: SERVER_ADMIN
- name: ip
  description: |
    Format an IP address.

    Converts an ip address encoded in various ways. If the IP address is
    encoded as 32 bit integer we can use netaddr4_le or netaddr4_be to
    print it in a human readable way.

    This currently does not support IPv6 addresses. Those are usually
    encoded as an array of 8 bytes which makes it easy to format using the
    `format()` function:

    ```
      format(format="%x:%x:%x:%x:%x:%x:%x:%x", value)
    ```
  type: Function
  args:
  - name: netaddr4_le
    type: int64
    description: A network order IPv4 address (as little endian).
  - name: netaddr4_be
    type: int64
    description: A network order IPv4 address (as big endian).
  category: plugin
- name: items
  description: |
    Iterate over dict members producing _key and _value columns

    This can be used to filter dict items by feeding the results to
    `to_dict()`
  type: Function
  args:
  - name: item
    type: Any
  category: basic
- name: items
  description: |
    Enumerate all members of the item (similar to Python's items() method).

    This plugin allows iteration over dicts or queries.

    ### Iterating dicts

    If the item is a dict, then this plugin will iterate over its keys
    and values producing two columns:

    * The `_key` column is the dictionary key
    * The `_value` column is the dictionary value

    ### Iterating queries

    For queries or arrays, the `items()` plugin will produce two columns:

    * The `_key` column is the row index starting from 0
    * The `_value` column is the row itself as a dict.

    The `items()` query is useful to treat the results of another
    query as a dict instead of a row. This is useful when the query
    produces unpredictable columns or you need to operate over the
    column names somehow.

    For example:

    ```vql
    SELECT * FROM items(item={ SELECT * FROM info() })
    ```

    Produces:

    ```json
    [
      {
        "_key": 0,
        "_value": {
          "Hostname": "DESKTOP-BTI2T9T",
          "Uptime": 20445,
          "BootTime": 1641029930,
          "Architecture": "amd64"
        }
      }
    ]
    ```
  type: Plugin
  args:
  - name: item
    type: Any
    description: The item to enumerate.
  category: basic
- name: join
  description: |
    Join all the args on a separator.

    Joins the array into a string separated by the sep character.
  type: Function
  args:
  - name: array
    type: string
    description: The array to join
    repeated: true
    required: true
  - name: sep
    type: string
    description: The separator. Defaults to an empty string if not explicitly set
  category: basic
- name: js
  description: Compile and run javascript code.
  type: Function
  args:
  - name: js
    type: string
    description: The body of the javascript code.
    required: true
  - name: key
    type: string
    description: If set use this key to cache the JS VM.
  category: experimental
- name: js_call
  description: Compile and run javascript code.
  type: Function
  args:
  - name: func
    type: string
    description: JS function to call.
    required: true
  - name: args
    type: Any
    description: Positional args for the function.
  - name: key
    type: string
    description: If set use this key to cache the JS VM.
  category: experimental
- name: js_get
  description: Get a variable's value from the JS VM.
  type: Function
  args:
  - name: var
    type: string
    description: The variable to get from the JS VM.
    required: true
  - name: key
    type: string
    description: If set use this key to cache the JS VM.
  category: plugin
- name: js_set
  description: Set a variables value in the JS VM.
  type: Function
  args:
  - name: var
    type: string
    description: The variable to set inside the JS VM.
    required: true
  - name: value
    type: Any
    description: The value to set inside the VM.
    required: true
  - name: key
    type: string
    description: If set use this key to cache the JS VM.
  category: plugin
- name: killkillkill
  description: Kills the client and forces a restart - this is very aggressive!
  type: Function
  args:
  - name: client_id
    type: string
    required: true
  category: basic
  metadata:
    permissions: MACHINE_STATE
- name: label
  description: |
    Add the labels to the client. If op is 'remove' then remove these labels.

    ### Example

    The following query sets the MyLabel label on all hosts that last
    connected from an IP address matching the regular expression (You
    can also do a CIDR check using the `cidr_contains()` function)

    ```vql
    SELECT *, label(labels='MyLabel', op='set', client_id=client_id)
    FROM clients() WHERE  last_ip =~ "127.+"
    ```
  type: Function
  args:
  - name: client_id
    type: string
    description: Client ID to label.
    required: true
  - name: labels
    type: string
    description: A list of labels to apply
    repeated: true
    required: true
  - name: op
    type: string
    description: An operation on the labels (set, check, remove)
  category: server
  metadata:
    permissions: LABEL_CLIENT
- name: len
  description: Returns the length of an object.
  type: Function
  args:
  - name: list
    type: Any
    description: A list of items to filter
    required: true
  category: basic
- name: leveldb
  description: Enumerate all items in a level db database
  type: Plugin
  args:
  - name: file
    type: accessors.OSPath
    description: The path to the leveldb file.
  - name: accessor
    type: string
    description: The accessor to use.
  metadata:
    permissions: FILESYSTEM_READ
- name: log
  description: |
    Log the message and return TRUE.

    The message will be logged into the query log stream (Viewable in
    the Logs tab). The `message` parameter represents a format string
    that will be expanded using the `args` parameter list if needed.

    Since `log()` always returns TRUE it is easy to use in a WHERE
    clause as a form of debugging (It is basically equivalent to the
    print statement of other languages).

    ```sql
    SELECT * FROM glob(...)
    WHERE log(message="Value of OSPath is %v", args=OSPath)
    ```

    ## Deduplication

    Log messages will be deduped according to the `dedup`
    parameter - each distinct format string will not be emitted more
    frequently than the `dedup` parameter (by default 60 seconds).

    This makes it safe to use `log()` frequently without overflowing
    the logs stream.

    ```vql
    SELECT * FROM range(end=_value)
    WHERE log(message="Value is %v", args=_value)
    ```

    Will only emit a single message due to the format string being
    deduped.

    This property makes it useful to add progress logging to long
    running artifacts. The logs will be emitted every minute.

    ```vql
    SELECT * FROM glob(...)
    WHERE log(message="Processing file %v", args=OSPath)
    ```
  type: Function
  version: 2
  args:
  - name: message
    type: string
    description: Message to log.
    required: true
  - name: dedup
    type: int64
    description: Suppress same message in this many seconds (default 60 sec).
  - name: args
    type: Any
    description: An array of elements to apply into the format string.
  - name: level
    type: string
    description: Level to log at (DEFAULT, WARN, ERROR, INFO).
  category: basic
- name: lookupSID
  description: Get information about the SID.
  type: Function
  category: windows
- name: lowcase
  type: Function
  args:
  - name: string
    type: string
    description: A string to lower
    required: true
  category: basic
- name: lru
  description: |
    Creates an LRU object

    A LRU is like a dict, except that older items are expired. It is
    useful to creating running lookup values without exceeding memory
    constraints.

    An example of this query is maintaining lookups between Kernel
    objects and key names within the Windows Kernel Registry provider.

    ```vql
    LET Cache <= lru()

    SELECT *, EventData,
        get(item=Cache, field=EventData.KeyObject) AS KeyName
    FROM watch_etw(guid="{70EB4F03-C1DE-4F73-A051-33D13D5413BD}")
    WHERE if(
       condition=System.ID = 2,  -- KeyOpen event
       then=set(item=Cache,
                field=EventData.KeyObject,
                value=EventData.RelativeName),
       else=TRUE)
    ```

    Note how `set()` can be used to add items to the cache and `get()`
    is used to retrieve items.
  type: Function
  args:
  - name: size
    type: int64
    description: Size of the LRU (default 1000)
- name: lzxpress_decompress
  description: |
    Decompress an lzxpress blob.

    This function is most useful when decoding prefetch files.
  type: Function
  args:
  - name: data
    type: string
    description: The lzxpress stream (bytes)
    required: true
- name: magic
  description: |
    Identify a file using magic rules.

    Magic rules are designed to identify a file based on a sequence of
    tests. They are a great way of quickly triaging a file type based
    on its content, not its name.

    Detection is facilitated via libmagic - a common library powering
    the unix "file" utility. Velociraptor comes with all of "file"
    basic magic signatures.

    You can also write your own signatures using the magic syntax (see
    https://man7.org/linux/man-pages/man4/magic.4.html )

    ## Example

    The following will check all files in /var/lib applying a custom
    magic rule.

    ```vql
    LET Magic = '''
    0 search/1024 "GET Apache Logs
    !:strength + 100
    '''

    SELECT FullPath, Size, magic(path=FullPath, magic=Magic)
    FROM glob(globs="/var/lib/*")
    ```

    NOTE: `magic()` requires reading the headers of each file which
    causes the file to be opened. If you have on-access scanning such
    as Windows Defender "Realtime monitoring", applying magic() on
    many files (e.g. in a glob) may result in substantial load on the
    endpoint.
  type: Function
  version: 1
  args:
  - name: path
    type: accessors.OSPath
    description: Path to open and hash.
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: type
    type: string
    description: Magic type (can be empty or 'mime' or 'extension')
  - name: magic
    type: string
    description: Additional magic to load
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ
- name: mail
  description: Send Email to a remote server.
  type: Function
  args:
  - name: to
    type: string
    description: Recipient of the mail
    repeated: true
    required: true
  - name: from
    type: string
    description: The from email address.
  - name: cc
    type: string
    description: A cc for the mail
    repeated: true
  - name: subject
    type: string
    description: The subject.
  - name: body
    type: string
    description: The body of the mail.
    required: true
  - name: period
    type: int64
    description: How long to wait before sending the next mail - help to throttle
      mails.
  - name: server_port
    type: uint64
    description: The SMTP server port to use (default 587).
  - name: server
    type: string
    description: The SMTP server to use (if not specified we try the config file).
  - name: auth_username
    type: string
    description: The SMTP username we authenticate to the server.
  - name: auth_password
    type: string
    description: The SMTP username password we use to authenticate to the server.
  - name: skip_verify
    type: bool
    description: 'Skip SSL verification(default: False).'
  - name: root_ca
    type: string
    description: As a better alternative to disable_ssl_security, allows root ca certs
      to be added here.
  metadata:
    permissions: SERVER_ADMIN
- name: mail
  description: Send Email to a remote server.
  type: Plugin
  args:
  - name: to
    type: string
    description: Recipient of the mail
    repeated: true
    required: true
  - name: from
    type: string
    description: The from email address.
  - name: cc
    type: string
    description: A cc for the mail
    repeated: true
  - name: subject
    type: string
    description: The subject.
  - name: body
    type: string
    description: The body of the mail.
    required: true
  - name: period
    type: int64
    description: How long to wait before sending the next mail - help to throttle
      mails.
  - name: server_port
    type: uint64
    description: The SMTP server port to use (default 587).
  - name: server
    type: string
    description: The SMTP server to use (if not specified we try the config file).
  - name: auth_username
    type: string
    description: The SMTP username we authenticate to the server.
  - name: auth_password
    type: string
    description: The SMTP username password we use to authenticate to the server.
  - name: skip_verify
    type: bool
    description: 'Skip SSL verification(default: False).'
  - name: root_ca
    type: string
    description: As a better alternative to disable_ssl_security, allows root ca certs
      to be added here.
  category: server
- name: max
  description: |
    Finds the largest item in the aggregate.

    It is only meaningful in a group by query.

    ### Example

    The following query lists all the processes and shows the largest
    bash pid of all bash processes.

    ```SQL
    SELECT Name, max(items=Pid) as LargestPid from pslist() Where Name =~ 'bash' group by Name
    ```
  type: Function
  args:
  - name: item
    type: LazyExpr
    required: true
  category: basic
- name: memoize
  description: |
    Memoize a query into memory.

    Memoizing a query means to cache the results of the query so they
    can be accessed quickly.

    Consider the following query:

    ```vql
    LET ProcessDetails(ProcessPid) = SELECT Name, Pid, Ppid FROM pslist()
      WHERE Pid=ProcessPid
    ```

    This query retrieves the process details for any Pid such as the
    Name, Pid and parent Pid.

    While this query works, imagine having to use it in a large query
    to resolve many different processes. Each time the function is
    called the pslist() plugin is run over all processes and the
    correct process is selected - this can lead to thousands of
    pslist() executions!

    We can solve this by memoizing the results of the query -
    i.e. storing them in memory and retrieving a single row based on a
    key.

    ```vql
    LET m <= memoize(query={
       SELECT str(str=Pid) AS Key, Name, Pid, Ppid FROM pslist()
    }, key='Key')
    ```

    The `memoize()` function looks like a `dict()` and when accessed
    will automatically run the query once and cache its rows. The Key
    column of the query is used as the key of the dict.

    You can access the cache using the `get()` function or the `.`
    operator. If the key matches the entire row is retrieved:

    ```vql
    SELECT get(item=m, field=str(str=Pid)).Name AS ProcessName
    FROM source()
    ```
  type: Function
  args:
  - name: query
    type: LazyExpr
    description: Query to expand into memory
    required: true
  - name: key
    type: string
    description: The name of the column to use as a key.
    required: true
  - name: period
    type: int64
    description: The latest age of the cache.
  category: basic
- name: min
  description: |
    Finds the smallest item in the aggregate.

    It is only meaningful in a group by query.

    ### Example

    The following query lists all the processes and shows the smallest
    bash pid of all bash processes.

    ```SQL
    SELECT Name, min(items=Pid) as SmallestPid from pslist() Where Name =~ 'bash' group by Name
    ```
  type: Function
  args:
  - name: item
    type: LazyExpr
    required: true
  category: basic
- name: mock
  description: Mock a plugin.
  type: Function
  args:
  - name: plugin
    type: string
    description: The plugin to mock
  - name: function
    type: string
    description: The function to mock
  - name: artifact
    type: Any
    description: The artifact to mock
  - name: results
    type: LazyExpr
    description: The result to return
    required: true
  category: utils
- name: mock_check
  description: Check expectations on a mock.
  type: Function
  args:
  - name: plugin
    type: string
    description: The plugin to mock
  - name: function
    type: string
    description: The function to mock
  - name: expected_calls
    type: int
    description: How many times plugin should be called
  - name: clear
    type: bool
    description: This call will clear previous mocks for this plugin
  category: utils
- name: mock_clear
  description: Resets all mocks.
  type: Function
- name: mock_replay
  description: Replay recorded calls on a mock.
  type: Function
  args:
  - name: plugin
    type: string
    description: The plugin to mock
  - name: function
    type: string
    description: The function to mock
  - name: expected_calls
    type: int
    description: How many times plugin should be called
  - name: clear
    type: bool
    description: This call will clear previous mocks for this plugin
- name: modules
  description: Enumerate Loaded DLLs.
  type: Plugin
  args:
  - name: pid
    type: int64
    description: The PID to dump out.
    required: true
  category: windows
- name: monitoring
  description: Extract monitoring log from a client. If client_id is not specified
    we watch the global journal which contains event logs from all clients.
  type: Plugin
  args:
  - name: client_id
    type: string
    description: The client id to extract
  - name: flow_id
    type: string
    description: A flow ID (client or server artifacts)
  - name: hunt_id
    type: string
    description: Retrieve sources from this hunt (combines all results from all clients)
  - name: artifact
    type: string
    description: The name of the artifact collection to fetch
  - name: source
    type: string
    description: An optional named source within the artifact
  - name: start_time
    type: Any
    description: Start return events from this date (for event sources)
  - name: end_time
    type: Any
    description: Stop end events reach this time (event sources).
  - name: notebook_id
    type: string
    description: The notebook to read from (should also include cell id)
  - name: notebook_cell_id
    type: string
    description: The notebook cell read from (should also include notebook id)
  - name: notebook_cell_table
    type: int64
    description: A notebook cell can have multiple tables.)
  - name: start_row
    type: int64
    description: Start reading the result set from this row
  - name: count
    type: int64
    description: Maximum number of clients to fetch (default unlimited)'
  category: server
  metadata:
    permissions: READ_RESULTS
- name: monitoring_logs
  description: Retrieve log messages from client event monitoring for the specified
    client id and artifact
  type: Plugin
  args:
  - name: client_id
    type: string
    description: The client id to extract
    required: true
  - name: artifact
    type: string
    description: The name of the artifact collection to fetch
    required: true
  - name: source
    type: string
    description: An optional named source within the artifact
  - name: start_time
    type: Any
    description: Start return events from this date (for event sources)
  - name: end_time
    type: Any
    description: Stop end events reach this time (event sources).
  metadata:
    permissions: READ_RESULTS
- name: netcat
  description: Make a tcp connection and read data from a socket.
  type: Plugin
  args:
  - name: address
    type: string
    description: The address to connect to (can be a file in case of a unix domain
      socket)
    required: true
  - name: type
    type: string
    description: Can be tcp or unix (default TCP)
  - name: send
    type: string
    description: Data to send before reading
  - name: sep
    type: string
    description: The separator that will be used to split (default - line feed)
  - name: chunk_size
    type: int
    description: Read input with this chunk size (default 64kb)
  - name: retry
    type: int
    description: Seconds to wait before retry - default 0 - do not retry
  category: plugin
  metadata:
    permissions: COLLECT_SERVER
- name: netstat
  description: Collect network information.
  type: Plugin
  category: windows
- name: notebook_delete
  description: 'Delete a notebook with all its cells. '
  type: Plugin
  args:
  - name: notebook_id
    type: string
    required: true
  - name: really_do_it
    type: bool
  category: server
  metadata:
    permissions: SERVER_ADMIN
- name: now
  description: Returns current time in seconds since epoch.
  type: Function
  args:
  - name: string
    type: Any
    description: A string to convert to int
    required: true
  category: basic
- name: olevba
  description: |
    Extracts VBA Macros from Office documents.

    This plugin parses the provided files as OLE documents in order to
    recover VB macro code. A single document can have multiple code
    objects, and each such code object is emitted as a row.
  type: Plugin
  args:
  - name: file
    type: accessors.OSPath
    description: A list of filenames to open as OLE files.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: max_size
    type: int64
    description: Maximum size of file we load into memory.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: org
  description: Return the details of the current org.
  type: Function
- name: org_create
  description: Creates a new organization.
  type: Function
  args:
  - name: name
    type: string
    description: The name of the org.
    required: true
  - name: org_id
    type: string
    description: An ID for the new org (if not set use a random ID).
  metadata:
    permissions: ORG_ADMIN
- name: org_delete
  description: Deletes an Org from the server.
  type: Function
  args:
  - name: org
    type: string
    description: The org ID to delete.
    required: true
  - name: really_do_it
    type: bool
  metadata:
    permissions: ORG_ADMIN
- name: orgs
  description: Retrieve the list of orgs on this server.
  type: Plugin
- name: parallelize
  description: |
    Runs query on result batches in parallel.

    Normally the source() plugin reads result sets from disk in
    series. This is fine when the result set is not too large but when
    we need to filter a lot of rows at the same time it is better to
    use all cores by reading and filtering in parallel.

    The `parallelize()` plugin is a parallel version of `source()`
    which breaks result sets into batches and applies a query over
    each batch in parallel. If you have a multi threaded machine, it
    will be a lot faster.

    The query passed to parallelize() will receive a special scope in
    which the `source()` plugin will returns results from a small
    batch of the total. The size of this batch is controlled by the
    `batch` parameter.

    This is especially useful when we need to filter rows from a hunt
    - each client's result set will be filtered in parallel on a
    different core.

    ### Example:

    ```vql
    SELECT * FROM parallelize(hunt_id=HuntId, artifact=ArtifactName, query={
       SELECT * FROM source()
       WHERE FullPath =~ "XYZ"
    })
    ```
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    description: The query will be run in parallel over batches.
    required: true
  - name: client_id
    type: string
    description: The client id to extract
  - name: flow_id
    type: string
    description: A flow ID (client or server artifacts)
  - name: hunt_id
    type: string
    description: Retrieve sources from this hunt (combines all results from all clients)
  - name: artifact
    type: string
    description: The name of the artifact collection to fetch
  - name: source
    type: string
    description: An optional named source within the artifact
  - name: start_time
    type: int64
    description: Start return events from this date (for event sources)
  - name: end_time
    type: int64
    description: Stop end events reach this time (event sources).
  - name: notebook_id
    type: string
    description: The notebook to read from (should also include cell id)
  - name: notebook_cell_id
    type: string
    description: The notebook cell read from (should also include notebook id)
  - name: notebook_cell_table
    type: int64
    description: A notebook cell can have multiple tables.)
  - name: workers
    type: int64
    description: Number of workers to spawn.)
  - name: batch
    type: int64
    description: Number of rows in each batch.)
  category: server
  metadata:
    permissions: READ_RESULTS
- name: parse_auditd
  description: Parse log files generated by auditd.
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: A list of log files to parse.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: buffer_size
    type: int
    description: Maximum size of line buffer.
  category: parsers
- name: parse_binary
  description: |
    Parse a binary file into a data structure using a profile.

    This plugin extract binary data from strings. It works by applying
    a profile to the binary string and generating an object from
    that. Profiles are a json structure describing the binary format. For
    example a profile might be:

    ```json
    [
      ["StructName", 10, [
         ["field1", 2, "unsigned int"],
         ["field2", 6, "unsigned long long"],
       ]]]
    ]
    ```

    The profile is compiled and overlaid on top of the offset specified,
    then the object is emitted with its required fields.

    You can read more about profiles here https://github.com/Velocidex/vtypes
  type: Function
  args:
  - name: filename
    type: accessors.OSPath
    description: Binary file to open.
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: profile
    type: string
    description: Profile to use (see https://github.com/Velocidex/vtypes).
  - name: struct
    type: string
    description: Name of the struct in the profile to instantiate.
    required: true
  - name: offset
    type: int64
    description: Start parsing from this offset
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_csv
  description: |
    Parses events from a CSV file.

    Parses records from a CSV file. We expect the first row of the CSV
    file to contain column names.  This parser specifically supports
    Velociraptor's own CSV dialect and so it is perfect for post
    processing already existing CSV files.

    The types of each value in each column is deduced based on
    Velociraptor's standard encoding scheme. Therefore types are properly
    preserved when read from the CSV file.

    For example, downloading the results of a hunt in the GUI will produce
    a CSV file containing artifact rows collected from all clients.  We
    can then use the `parse_csv()` plugin to further filter the CSV file,
    or to stack using group by.

    ### Example

    The following stacks the result from a
    `Windows.Applications.Chrome.Extensions` artifact:

    ```sql
    SELECT count(items=User) As TotalUsers, Name
    FROM parse_csv(filename="All Windows.Applications.Chrome.Extensions.csv")
    Order By TotalUsers
    Group By Name
    ```
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: CSV files to open
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: auto_headers
    type: bool
    description: If unset the first row is headers
  - name: separator
    type: string
    description: Comma separator (default ',')
  - name: comment
    type: string
    description: The single character that should be considered a comment
  - name: columns
    type: string
    description: The columns to use
    repeated: true
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_ese
  description: Opens an ESE file and dump a table.
  type: Plugin
  args:
  - name: file
    type: accessors.OSPath
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: table
    type: string
    description: A table name to dump
    required: true
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_ese_catalog
  description: Opens an ESE file and dump the schema.
  type: Plugin
  args:
  - name: file
    type: accessors.OSPath
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_evtx
  description: |
    Parses events from an EVTX file.

    This plugin parses windows events from the Windows Event log files (EVTX).

    A windows event typically contains two columns. The `EventData`
    contains event specific structured data while the `System` column
    contains common data for all events - including the Event ID.

    You should probably almost always filter by one or more event ids
    (using the `System.EventID.Value` field).

    ### Example

    ```sql
    SELECT System.TimeCreated.SystemTime as Timestamp,
           System.EventID.Value as EventID,
           EventData.ImagePath as ImagePath,
           EventData.ServiceName as ServiceName,
           EventData.ServiceType as Type,
           System.Security.UserID as UserSID,
           EventData as _EventData,
           System as _System
    FROM watch_evtx(filename=systemLogFile) WHERE EventID = 7045
    ```
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: A list of event log files to parse.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: messagedb
    type: string
    description: A Message database from https://github.com/Velocidex/evtx-data.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_float
  description: Convert a string to a float.
  type: Function
  args:
  - name: string
    type: Any
    description: A string to convert to int
    required: true
  category: parsers
- name: parse_json
  description: |
    Parse a JSON string into an object.

    Note that when VQL dereferences fields in a dict it returns a Null for
    those fields that do not exist. Thus there is no error in actually
    accessing missing fields, the column will just return nil.
  type: Function
  args:
  - name: data
    type: string
    description: Json encoded string.
    required: true
  category: parsers
- name: parse_json_array
  description: |
    Parse a JSON string into an array.

    This function is similar to `parse_json()` but works for a JSON list
    instead of an object.
  type: Function
  args:
  - name: data
    type: string
    description: Json encoded string.
    required: true
  category: parsers
- name: parse_json_array
  description: Parses events from a line oriented json file.
  type: Plugin
  args:
  - name: data
    type: string
    description: Json encoded string.
    required: true
  category: parsers
- name: parse_jsonl
  description: Parses a line oriented json file.
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: JSON file to open
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_lines
  description: Parse a file separated into lines.
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: A list of log files to parse.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: buffer_size
    type: int
    description: Maximum size of line buffer.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_mft
  description: |
    Scan the $MFT from an NTFS volume.

    This plugin expect an $MFT file to operate on. For example, it is
    commonly used with the 'ntfs' accessor which opens the local raw
    device to provide access to the $MFT

    ```vql
    SELECT * FROM parse_mft(filename="C:/$MFT", accessor="ntfs")
    ```

    For parsing from an image file, you can extract the $MFT file
    using the raw_ntfs accessor (which operates on images).

    ```vql
    SELECT * FROM parse_mft(
         filename=pathspec(
           Path="$MFT",
           DelegateAccessor="file",
           DelegatePath='ntfs_image.dd'),
         accessor="raw_ntfs")
    ```
  type: Plugin
  version: 2
  args:
  - name: filename
    type: accessors.OSPath
    description: The MFT file.
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: prefix
    type: accessors.OSPath
    description: If specified we prefix all paths with this path.
  - name: start
    type: int64
    description: The first entry to scan.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_ntfs
  description: |
    Parse specific inodes from an NTFS image file or the raw device.

    This function retrieves more information about a specific MFT
    entry including listing all its attributes.

    It can either operate on an image file or the raw device (on
    windows).

    ## Example:

    ```vql
    SELECT parse_ntfs(
        filename='ntfs_image.dd',
        inode="46-128-0")
    FROM scope()
    ```

    You can get the MFT entry number from `parse_mft()` or from the
    Data attribute of a `glob()` using the `ntfs` accessor.
  type: Function
  args:
  - name: device
    type: string
    description: The device file to open. This may be a full path for example C:\Windows
      - we will figure out the device automatically.
  - name: filename
    type: accessors.OSPath
    description: A raw image to open. You can also provide the accessor if using a
      raw image file.
  - name: accessor
    type: string
    description: The accessor to use.
  - name: inode
    type: string
    description: The MFT entry to parse in inode notation (5-144-1).
  - name: mft
    type: int64
    description: The MFT entry to parse.
  - name: mft_offset
    type: int64
    description: The offset to the MFT entry to parse.
  category: parsers
- name: parse_ntfs_i30
  description: |
    Scan the $I30 stream from an NTFS MFT entry.

    This is similar in use to the parse_ntfs() function but parses the
    $I30 stream.
  type: Plugin
  args:
  - name: device
    type: string
    description: The device file to open. This may be a full path for example C:\Windows
      - we will figure out the device automatically.
  - name: filename
    type: accessors.OSPath
    description: A raw image to open. You can also provide the accessor if using a
      raw image file.
  - name: accessor
    type: string
    description: The accessor to use.
  - name: inode
    type: string
    description: The MFT entry to parse in inode notation (5-144-1).
  - name: mft
    type: int64
    description: The MFT entry to parse.
  - name: mft_offset
    type: int64
    description: The offset to the MFT entry to parse.
  category: parsers
- name: parse_ntfs_ranges
  description: Show the run ranges for an NTFS stream.
  type: Plugin
  args:
  - name: device
    type: string
    description: The device file to open. This may be a full path for example C:\Windows
      - we will figure out the device automatically.
  - name: filename
    type: accessors.OSPath
    description: A raw image to open. You can also provide the accessor if using a
      raw image file.
  - name: accessor
    type: string
    description: The accessor to use.
  - name: inode
    type: string
    description: The MFT entry to parse in inode notation (5-144-1).
  - name: mft
    type: int64
    description: The MFT entry to parse.
  - name: mft_offset
    type: int64
    description: The offset to the MFT entry to parse.
  category: parsers
- name: parse_pe
  description: Parse a PE file.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: The PE file to open.
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: base_offset
    type: int64
    description: The offset in the file for the base address.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_pkcs7
  description: Parse a DER encoded pkcs7 string into an object.
  type: Function
  args:
  - name: data
    type: string
    description: PKCS7 DER encoded string.
    required: true
  category: parsers
- name: parse_records_with_regex
  description: |
    Parses a file with a set of regexp and yields matches as records.  The
    file is read into a large buffer. Then each regular expression is
    applied to the buffer, and all matches are emitted as rows.

    The regular expressions are specified in the [Go
    syntax](https://golang.org/pkg/regexp/syntax/). They are expected to
    contain capture variables to name the matches extracted.

    For example, consider a HTML file with simple links. The regular
    expression might be:

    ```
    regex='<a.+?href="(?P<Link>[^"]+?)"'
    ```

    To produce rows with a column Link.

    The aim of this plugin is to split the file into records which can be
    further parsed. For example, if the file consists of multiple records,
    this plugin can be used to extract each record, while
    parse_string_with_regex() can be used to further split each record
    into elements. This works better than trying to write a more complex
    regex which tries to capture a lot of details in one pass.


    ### Example

    Here is an example of parsing the /var/lib/dpkg/status files. These
    files consist of records separated by empty lines:

    ```
    Package: ubuntu-advantage-tools
    Status: install ok installed
    Priority: important
    Section: misc
    Installed-Size: 74
    Maintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
    Architecture: all
    Version: 17
    Conffiles:
     /etc/cron.daily/ubuntu-advantage-tools 36de53e7c2d968f951b11c64be101b91
     /etc/update-motd.d/80-esm 6ffbbf00021b4ea4255cff378c99c898
     /etc/update-motd.d/80-livepatch 1a3172ffaa815d12b58648f117ffb67e
    Description: management tools for Ubuntu Advantage
     Ubuntu Advantage is the professional package of tooling, technology
     and expertise from Canonical, helping organizations around the world
     manage their Ubuntu deployments.
     .
     Subscribers to Ubuntu Advantage will find helpful tools for accessing
     services in this package.
    Homepage: https://buy.ubuntu.com
    ```

    The following query extracts the fields in two passes. The first pass
    uses parse_records_with_regex() to extract records in blocks, while
    using parse_string_with_regex() to further break the block into
    fields.

    ```sql
    SELECT parse_string_with_regex(
       string=Record,
       regex=['Package:\\s(?P<Package>.+)',
         'Installed-Size:\\s(?P<InstalledSize>.+)',
         'Version:\\s(?P<Version>.+)',
         'Source:\\s(?P<Source>.+)',
         'Architecture:\\s(?P<Architecture>.+)']) as Record
       FROM parse_records_with_regex(
         file=linuxDpkgStatus,
         regex='(?sm)^(?P<Record>Package:.+?)\\n\\n')
    ```
  type: Plugin
  args:
  - name: file
    type: accessors.OSPath
    description: A list of files to parse.
    repeated: true
    required: true
  - name: regex
    type: string
    description: A list of regex to apply to the file data.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: buffer_size
    type: int
    description: Maximum size of line buffer (default 64kb).
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_recyclebin
  description: Parses a $I file found in the $Recycle.Bin
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: Files to be parsed.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_string_with_regex
  description: Parse a string with a set of regex and extract fields. Returns a dict
    with fields populated from all regex capture variables.
  type: Function
  args:
  - name: string
    type: string
    description: A string to parse.
    required: true
  - name: regex
    type: string
    description: The regex to apply.
    repeated: true
    required: true
  category: parsers
- name: parse_usn
  description: Parse the USN journal from a device.
  type: Plugin
  args:
  - name: device
    type: accessors.OSPath
    description: The device file to open.
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: start_offset
    type: int64
    description: The starting offset of the first USN record to parse.
  category: parsers
- name: parse_x509
  description: Parse a DER encoded x509 string into an object.
  type: Function
  args:
  - name: data
    type: string
    description: X509 DER encoded string.
    required: true
  category: parsers
- name: parse_xml
  description: |
    Parse an XML document into a dict like object.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: XML file to open.
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: parse_yaml
  description: Parse yaml into an object.
  type: Function
  args:
  - name: filename
    type: accessors.OSPath
    description: Yaml Filename
    required: true
  - name: accessor
    type: string
    description: File accessor
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: partitions
  description: List all partitions
  type: Plugin
  args:
  - name: all
    type: bool
    description: If specified list all Partitions
  category: windows
- name: passwd
  description: Updates the user's password.
  type: Function
  args:
  - name: user
    type: string
    description: The user to set password for. If not set, changes the current user's
      password.
  - name: password
    type: string
    description: The new password to set.
    required: true
- name: patch
  description: |
    Patch a JSON object with a json patch or merge.

    The function allows for modifications of objects by way of
    applying a json patch. You can read more about JSON patching here
    https://github.com/evanphx/json-patch.

    I practice you can use this to update server settings - for
    example, consider the client event monitoring state.

    ```text
    SELECT get_client_monitoring() FROM scope()

     [
      {
       "get_client_monitoring": {
        "artifacts": [
         "Generic.Client.Stats"
        ]
       }
      }
     ]
    ```

    Suppose we wish to add a new artifact, we can patch it with the json:
    ```json
    [{"op": "add", "path": "/artifacts/0", "value": "Windows.Events.DNSQueries"}]
    ```

    This can then be immediately pushed to `set_client_monitoring()`
    to update the monitoring state.

    ```
    SELECT set_client_monitoring(value=patch(
           item=get_client_monitoring(),
           patch=[dict(op="add", path="/artifacts/0", value="Windows.Events.DNSQueries")]))
    FROM scope()
    ```
  type: Function
  args:
  - name: item
    type: Any
    description: The item to path
    required: true
  - name: patch
    type: Any
    description: A JSON Patch to apply
  - name: merge
    type: Any
    description: A merge-patch to apply
  category: server
- name: path_join
  description: Build a path by joining all components.
  type: Function
  args:
  - name: components
    type: Any
    description: Path components to join.
    repeated: true
    required: true
  - name: sep
    type: string
    description: Separator to use (default /)
  - name: path_type
    type: string
    description: Type of path (e.g. 'windows')
  category: basic
- name: path_split
  description: Split a path into components. Note this is more complex than just split()
    because it takes into account path escaping.
  type: Function
  args:
  - name: path
    type: Any
    description: Path to split into components.
    required: true
  - name: path_type
    type: string
    description: Type of path (e.g. 'windows')
  category: basic
- name: pathspec
  description: Create a structured path spec to pass to certain accessors.
  type: Function
  version: 1
  args:
  - name: DelegateAccessor
    type: string
    description: An accessor to use.
  - name: DelegatePath
    type: string
    description: A delegate to pass to the accessor.
  - name: Path
    type: Any
    description: A path to open.
  - name: parse
    type: string
    description: Alternatively parse the pathspec from this string.
  - name: path_type
    type: string
    description: Type of path this is (windows,linux,registry,ntfs).
  - name: accessor
    type: string
    description: The accessor to use to parse the path with
  category: plugin
- name: pe_dump
  description: Dump a PE file from process memory.
  type: Function
  args:
  - name: pid
    type: uint64
    description: The pid to dump.
    required: true
  - name: base_offset
    type: int64
    description: The offset in the file for the base address.
    required: true
  - name: in_memory
    type: uint64
    description: By default we store to a tempfile and return the path. If this option
      is larger than 0, we prepare the file in a memory buffer at the specified limit,
      to avoid AV alerts on disk access.
  metadata:
    permissions: MACHINE_STATE
- name: pipe
  description: |
    A pipe allows plugins that use files to read data from a vql
    query. This is needed to be able to use the "pipe" accessor.

    ### Example

    In the following example we create a pipe from a query which
    reads a log file line by line. Each line is being transformed by
    a regex and potentially filtered (perhaps to fix up buggy CSV
    implementations that generated a bad CSV).

    The pipe is then fed into the parse_csv() plugin to parse each
    line as a csv file.

    ```vql
    LET MyPipe = pipe(query={
        SELECT regex_replace(
          re='''^(\d{4}-\d{2}-\d{2}) (\d{2}:)''',
          replace='''${1}T${2}''', source=Line) AS Line
        FROM parse_lines(filename=IISPath)
        WHERE NOT Line =~ "^#"
      }, sep="\n")

    SELECT * FROM parse_csv(
       columns=Columns, separator=" ",
       filename="MyPipe", accessor="pipe")
    ```
  type: Function
  args:
  - name: name
    type: string
    description: Name to call the pipe
  - name: query
    type: StoredQuery
    description: Run this query to generator data - the first column will be appended
      to pipe data.
  - name: sep
    type: string
    description: 'The separator that will be used to split each read (default: no
      separator will be used)'
  category: plugin
- name: pk_decrypt
  description: Decrypt files using pubkey encryption
  type: Function
  args:
  - name: data
    type: string
    description: The data to decrypt
    required: true
  - name: signing_key
    type: string
    description: Public key to verify signature
  - name: private_key
    type: string
    description: Private key to decrypt with. Defaults to server private key
  - name: scheme
    type: string
    description: 'Encryption scheme to use. Defaults to RSA. Currently supported:
      PGP,RSA'
- name: pk_encrypt
  description: Encrypt files using pubkey encryption
  type: Function
  args:
  - name: data
    type: string
    description: The data to encrypt
    required: true
  - name: signing_key
    type: string
    description: Private key to sign with
  - name: public_key
    type: string
    description: Public key to encrypt with. Defaults to server public key
  - name: scheme
    type: string
    description: 'Encryption scheme to use. Defaults to X509. Currently supported:
      PGP,X509'
  metadata:
    permissions: SERVER_ADMIN
- name: plist
  description: Parse plist file
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: A list of files to parse.
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: plist
  description: Parses a plist file.
  type: Plugin
  args:
  - name: file
    type: accessors.OSPath
    description: A list of files to parse.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: prefetch
  description: Parses a prefetch file.
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: A list of event log files to parse.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: proc_dump
  description: |
    Dumps process memory.

    Dumps a process into a crashdump. The crashdump file can be opened
    with the windows debugger as normal. The plugin returns the filename
    of the crash dump which is a temporary file - the file will be removed
    when the query completes, so if you want to hold on to it, you should
    use the upload() plugin to upload it to the server or otherwise copy
    it.
  type: Plugin
  args:
  - name: pid
    type: int64
    description: The PID to dump out.
    required: true
  category: windows
- name: proc_yara
  description: |
    Scan processes using yara rules.

    This plugin uses yara's own engine to scan process memory for the signatures.

    {{% notice note %}}

    Process memory access depends on having the [SeDebugPrivilege](https://support.microsoft.com/en-au/help/131065/how-to-obtain-a-handle-to-any-process-with-sedebugprivilege) which depends on how Velociraptor was started. Even when running as System, some processes are not accessible.

    {{% /notice %}}
  type: Plugin
  args:
  - name: rules
    type: string
    description: Yara rules
    required: true
  - name: pid
    type: int
    description: The pid to scan
    required: true
  - name: context
    type: int
    description: Return this many bytes either side of a hit
  - name: key
    type: string
    description: If set use this key to cache the  yara rules.
  - name: namespace
    type: string
    description: The Yara namespece to use.
  - name: vars
    type: ordereddict.Dict
    description: The Yara variables to use.
  - name: number
    type: int64
    description: Stop after this many hits (1).
  category: windows
  metadata:
    permissions: MACHINE_STATE
- name: process_tracker
  description: Install a global process tracker.
  type: Function
  args:
  - name: sync_query
    type: StoredQuery
    description: Source for full tracker updates. Query must emit rows with the ProcessTrackerUpdate
      shape - usually uses pslist() to form a full sync.
  - name: sync_period
    type: int64
    description: How often to do a full sync (default 5000 msec).
  - name: update_query
    type: StoredQuery
    description: An Event query that produces live updates of the tracker state.
  - name: max_size
    type: int64
    description: Maximum size of process tracker LRU.
  - name: enrichments
    type: string
    description: One or more VQL lambda functions that can enrich the data for the
      process.
    repeated: true
- name: process_tracker_all
  description: Get all processes stored in the tracker.
  type: Function
- name: process_tracker_callchain
  description: Get a call chain from the global process tracker.
  type: Function
  args:
  - name: id
    type: string
    description: Process ID.
    required: true
- name: process_tracker_children
  description: Get all children of a process.
  type: Function
  args:
  - name: id
    type: string
    description: Process ID.
    required: true
- name: process_tracker_get
  description: Get a single process from the global tracker.
  type: Function
  args:
  - name: id
    type: string
    description: Process ID.
    required: true
- name: process_tracker_pslist
  description: List all processes from the process tracker.
  type: Plugin
- name: process_tracker_tree
  description: Get the full process tree under the process id.
  type: Function
  args:
  - name: id
    type: string
    description: Process ID.
  - name: data_callback
    type: vfilter.Lambda
    description: A VQL Lambda function to that receives a ProcessEntry and returns
      the data node for each process.
- name: process_tracker_updates
  description: Get the process tracker update events from the global process tracker.
  type: Plugin
- name: profile
  description: Returns a profile dump from the running process.
  type: Plugin
  args:
  - name: allocs
    type: bool
    description: A sampling of all past memory allocations
  - name: block
    type: bool
    description: Stack traces that led to blocking on synchronization primitives
  - name: goroutine
    type: bool
    description: Stack traces of all current goroutines
  - name: heap
    type: bool
    description: A sampling of memory allocations of live objects.
  - name: mutex
    type: bool
    description: Stack traces of holders of contended mutexes
  - name: profile
    type: bool
    description: CPU profile.
  - name: trace
    type: bool
    description: CPU trace.
  - name: debug
    type: int64
    description: Debug level
  - name: logs
    type: bool
    description: Recent logs
  - name: queries
    type: bool
    description: Recent Queries run
  - name: metrics
    type: bool
    description: Collect metrics
  - name: duration
    type: int64
    description: Duration of samples (default 30 sec)
  category: plugin
  metadata:
    permissions: MACHINE_STATE
- name: pskill
  description: Kill the specified process.
  type: Function
  args:
  - name: pid
    type: int64
    description: A pid to kill.
    required: true
  metadata:
    permissions: EXECVE
- name: pslist
  description: |
    Enumerate running processes.

    When specifying the pid this operation is much faster so if you are
    interested in specific processes, the pid should be
    specified. Otherwise, the plugin returns all processes one on each
    row.
  type: Plugin
  args:
  - name: pid
    type: int64
    description: A pid to list. If this is provided we are able to operate much faster
      by only opening a single process.
  category: plugin
  metadata:
    permissions: MACHINE_STATE
- name: query
  description: Launch a subquery and materialize it into a list of rows.
  type: Function
  args:
  - name: vql
    type: vfilter.StoredQuery
    required: true
  category: basic
- name: query
  description: Evaluate a VQL query.
  type: Plugin
  args:
  - name: query
    type: Any
    description: A VQL Query to parse and execute.
    required: true
  - name: env
    type: ordereddict.Dict
    description: A dict of args to insert into the scope.
  - name: cpu_limit
    type: float64
    description: Average CPU usage in percent of a core.
  - name: iops_limit
    type: float64
    description: Average IOPs to target.
  - name: timeout
    type: float64
    description: Cancel the query after this many seconds
  - name: progress_timeout
    type: float64
    description: If no progress is detected in this many seconds, we terminate the
      query and output debugging information
  - name: org_id
    type: string
    description: If specified, the query will run in the specified org space (Use
      'root' to refer to the root org)
  - name: runas
    type: string
    description: If specified, the query will run as the specified user
  metadata:
    permissions: IMPERSONATION
- name: rand
  description: Selects a random number.
  type: Function
  args:
  - name: range
    type: int64
    description: Selects a random number up to this range.
  category: basic
- name: range
  description: Iterate over range.
  type: Plugin
  args:
  - name: start
    type: int64
    description: Start index (0 based - default 0)
  - name: end
    type: int64
    description: End index (0 based)
    required: true
  - name: step
    type: int64
    description: Step (default 1)
  category: basic
- name: rate
  description: |
    Calculates the rate (derivative) between two quantities.

    For example if a monitoring plugin returns an absolute value
    sampled in time (e.g. bytes transferred sampled every second) then
    the rate() plugin can calculate the average bytes/sec.

    This function works by remembering the values of x and y from the
    previous row and applying the current rows values.
  type: Function
  args:
  - name: x
    type: float64
    description: The X float
    required: true
  - name: "y"
    type: float64
    description: The Y float
    required: true
  category: server
- name: read_file
  description: Read a file into a string.
  type: Function
  args:
  - name: length
    type: int
    description: Max length of the file to read.
  - name: offset
    type: int64
    description: Where to read from the file.
  - name: filename
    type: accessors.OSPath
    description: One or more files to open.
    required: true
  - name: accessor
    type: string
    description: An accessor to use.
  category: basic
  metadata:
    permissions: FILESYSTEM_READ
- name: read_file
  description: |
    Read files in chunks.

    This plugin reads a file in chunks and returns each chunks as a separate row.

    It is useful when we want to report file contents for small files like
    configuration files etc.

    The returned row contains the following columns: data, offset, filename
  type: Plugin
  args:
  - name: chunk
    type: int
    description: length of each chunk to read from the file.
  - name: max_length
    type: int
    description: Max length of the file to read.
  - name: filenames
    type: accessors.OSPath
    description: One or more files to open.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: An accessor to use.
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ
- name: read_reg_key
  description: |
    This is a convenience plugin which applies the globs to the registry
    accessor to find keys. For each key the plugin then lists all the
    values within it, and returns a row which has the value names as
    columns, while the cells contain the value's stat info (and data
    content available in the `Data` field).

    This makes it easier to access a bunch of related values at once.
  type: Plugin
  args:
  - name: globs
    type: string
    description: Glob expressions to apply.
    repeated: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: root
    type: accessors.OSPath
    description: The root directory to glob from (default '/').
  category: windows
- name: reg_rm_key
  description: Removes a key and all its values from the registry.
  type: Function
  args:
  - name: path
    type: string
    description: Registry key path.
    required: true
  category: plugin
- name: reg_rm_value
  description: Removes a value in the registry.
  type: Function
  args:
  - name: path
    type: string
    description: Registry value path.
    required: true
  category: plugin
- name: reg_set_value
  description: Set a value in the registry.
  type: Function
  args:
  - name: path
    type: string
    description: Registry value path.
    required: true
  - name: value
    type: LazyExpr
    description: Value to set
    required: true
  - name: type
    type: string
    description: Type to set (SZ, DWORD, QWORD)
    required: true
  - name: create
    type: bool
    description: Set to create missing intermediate keys
  category: plugin
- name: regex_replace
  description: Search and replace a string with a regexp. Note you can use $1 to replace
    the capture string.
  type: Function
  args:
  - name: source
    type: string
    description: The source string to replace.
    required: true
  - name: replace
    type: string
    description: The substitute string.
  - name: replace_lambda
    type: string
    description: Optionally the replacement can be a lambda.
  - name: re
    type: string
    description: A regex to apply
    required: true
  category: parsers
- name: regex_transform
  description: |
    Search and replace a string with multiple regex. Note you can use $1
    to replace the capture string.

    ```vql
    SELECT regex_transform(source="Hello world", map=dict(
       `^Hello`="Goodbye",
       `world`="Space"), key="A")
    FROM scope()
    ```
  type: Function
  args:
  - name: source
    type: string
    description: The source string to replace.
    required: true
  - name: map
    type: ordereddict.Dict
    description: A dict with keys reg, values substitutions.
    required: true
  - name: key
    type: string
    description: A key for caching
  category: basic
- name: rekey
  description: Causes the client to rekey and regenerate a new client ID. DANGEROUS!
    This will change the client's identity and it will appear as a new client in the
    GUI.
  type: Function
  args:
  - name: wait
    type: int64
    description: Wait this long before rekeying the client.
  metadata:
    permissions: EXECVE
- name: relpath
  description: Return the relative path of .
  type: Function
  args:
  - name: path
    type: string
    description: Extract directory name of path
    required: true
  - name: base
    type: string
    description: The base of the path
    required: true
  - name: sep
    type: string
    description: Separator to use (default native)
  category: basic
- name: remap
  description: Apply a remapping configuration to the root scope.
  type: Function
  args:
  - name: config
    type: string
    description: A Valid remapping configuration in YAML format
    required: true
  - name: copy
    type: string
    description: Accessors to copy to the new scope
    repeated: true
  - name: clear
    type: bool
    description: If set we clear all accessors from the device manager
- name: repack
  description: Repack and upload a repacked binary or MSI to the server.
  type: Function
  args:
  - name: target
    type: string
    description: The name of the target OS to repack (VelociraptorWindows, VelociraptorLinux,
      VelociraptorDarwin)
  - name: version
    type: string
    description: Velociraptor Version to repack
  - name: exe
    type: accessors.OSPath
    description: Alternative a path to the executable to repack
  - name: accessor
    type: string
    description: The accessor to use to read the file.
  - name: binaries
    type: string
    description: List of tool names that will be repacked into the target
    repeated: true
  - name: config
    type: string
    description: The config to be repacked in the form of a json or yaml string
    required: true
  - name: upload_name
    type: string
    description: The name of the upload to create
    required: true
  metadata:
    permissions: COLLECT_SERVER
- name: rm
  description: Remove a file from the filesystem using the API.
  type: Function
  args:
  - name: filename
    type: string
    description: Filename to remove.
    required: true
  category: plugin
  metadata:
    permissions: FILESYSTEM_WRITE
- name: rm_client_monitoring
  description: Remove an artifact from the client monitoring table.
  type: Function
  args:
  - name: artifact
    type: string
    description: The name of the artifact to add
    required: true
  - name: parameters
    type: LazyExpr
    description: A dict of artifact parameters
  - name: label
    type: string
    description: Add this artifact to this label group (default all)
  category: server
  metadata:
    permissions: COLLECT_CLIENT
- name: rm_server_monitoring
  description: Remove an artifact from the server monitoring table.
  type: Function
  args:
  - name: artifact
    type: string
    description: The name of the artifact to add
    required: true
  - name: parameters
    type: LazyExpr
    description: A dict of artifact parameters
  category: server
  metadata:
    permissions: COLLECT_SERVER
- name: rot13
  description: Apply rot13 deobfuscation to the string.
  type: Function
  args:
  - name: string
    type: string
  category: parsers
- name: sample
  description: |
    Executes 'query' and samples every n'th row.

    This is most useful on the server in order to downsample event
    artifact results.
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    description: Source query.
    required: true
  - name: "n"
    type: int64
    description: Pick every n row from query.
    required: true
  category: server
- name: scope
  description: return the scope.
  type: Function
  category: basic
- name: scope
  description: |
    The scope plugin returns the current scope as a single row.

    The main use for this plugin is as a NOOP plugin in those cases we
    dont want to actually run anything.

    ### Example

    ```sql
    SELECT 1+1 As Two FROM scope()
    ```
  type: Plugin
  category: plugin
- name: send_event
  description: |
    Sends an event to a server event monitoring queue.

    This is used to send an event to a waiting server event monitoring
    artifact (either as a VQL query running on the server or perhaps
    an external program waiting for this event via the API.
  type: Function
  args:
  - name: artifact
    type: string
    description: The artifact name to send the event to.
    required: true
  - name: row
    type: ordereddict.Dict
    description: The row to send to the artifact
    required: true
  category: event
  metadata:
    permissions: SERVER_ADMIN,PUBLISH
- name: sequence
  description: |
    Combines the output of many queries into an in memory fifo. After
    each row is received from any subquery runs the query specified in
    the 'query' parameter to retrieve rows from the memory SEQUENCE
    object.

    The `sequence()` plugin is very useful to correlate temporally close
    events from multiple queries - for example, say a process execution
    query and a network query. The `query` can then search for relevant
    network event closely followed by a process event.

    For example:
    ```vql
    SELECT * FROM sequence(
    network={
      SELECT * FROM Artifact.Windows.ETW.DNS()
      WHERE Query =~ "github"
    },
    process={
      SELECT * FROM Artifact.Windows.Detection.WMIProcessCreation()
      WHERE Name =~ "cmd.exe"
    },
    query={
      SELECT Name, CommandLine, {  -- search for a DNS lookup
        SELECT * FROM SEQUENCE
        WHERE Query =~ "github"
      } AS DNSInfo
      FROM SEQUENCE
      WHERE DNSInfo AND Name
    })
    ```
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    description: Run this query to generate rows. The query should select from SEQUENCE
      which will contain the current set of rows in the sequence. The query will be
      run on each new row that is pushed to the sequence.
    required: true
  - name: max_age
    type: int64
    description: Maximum number of seconds to hold rows in the sequence.
  category: experimental
- name: serialize
  description: Encode an object as a string (csv or json).
  type: Function
  args:
  - name: item
    type: Any
    description: The item to encode
    required: true
  - name: format
    type: string
    description: Encoding format (csv,json,yaml,hex,base64)
  category: basic
- name: server_frontend_cert
  description: Get Server Frontend Certificate
  type: Function
  metadata:
    permissions: MACHINE_STATE
- name: server_metadata
  description: Returns client metadata from the datastore. Client metadata is a set
    of free form key/value data
  type: Function
  args:
  - name: client_id
    type: string
    required: true
  category: server
  metadata:
    permissions: SERVER_ADMIN
- name: server_set_metadata
  description: |
    Sets server metadata. Server metadata is a set of free form
    key/value data, usually used for configuration of artifacts.

    Example:

    ```vql
    SELECT server_set_metadata(`Slack Token`="X12233")
    FROM scope()
    ```
  type: Function
  args:
  - name: metadata
    type: ordereddict.Dict
    description: A dict containing metadata. If not specified we use kwargs.
  category: server
- name: set
  description: Sets the member field of the item. If item is omitted sets the scope.
  type: Function
  args:
  - name: item
    type: Any
    description: A dict to set
    required: true
  - name: field
    type: string
    description: The field to set
    required: true
  - name: value
    type: Any
    required: true
  category: basic
- name: set_client_monitoring
  description: Sets the current client monitoring state.
  type: Function
  args:
  - name: value
    type: Any
    description: The Value to set
    required: true
  category: server
  metadata:
    permissions: COLLECT_CLIENT
- name: set_server_monitoring
  description: Sets the current server monitoring state.
  type: Function
  args:
  - name: value
    type: Any
    description: The Value to set
    required: true
  category: server
  metadata:
    permissions: COLLECT_SERVER
- name: sleep
  description: Sleep for the specified number of seconds. Always returns true.
  type: Function
  args:
  - name: time
    type: int64
    description: The number of seconds to sleep
  - name: ms
    type: int64
    description: The number of ms to sleep
  category: basic
- name: slice
  description: Slice an array.
  type: Function
  args:
  - name: list
    type: Any
    description: A list of items to slice
    required: true
  - name: start
    type: uint64
    description: Start index (0 based)
    required: true
  - name: end
    type: uint64
    description: End index (0 based)
    required: true
  category: basic
- name: source
  description: |
    Retrieve rows from an artifact's source.

    This plugin is mostly useful in reports. It attempts to do the
    right thing automatically by inferring most parameters from its
    execution environment.

    For example when called within a CLIENT report context, it will
    automatically fill its flow id, client id etc. Typically this
    means that you only need to specify the source name (for
    multi-source artifacts).
  type: Plugin
  args:
  - name: client_id
    type: string
    description: The client id to extract
  - name: flow_id
    type: string
    description: A flow ID (client or server artifacts)
  - name: hunt_id
    type: string
    description: Retrieve sources from this hunt (combines all results from all clients)
  - name: artifact
    type: string
    description: The name of the artifact collection to fetch
  - name: source
    type: string
    description: An optional named source within the artifact
  - name: start_time
    type: Any
    description: Start return events from this date (for event sources)
  - name: end_time
    type: Any
    description: Stop end events reach this time (event sources).
  - name: notebook_id
    type: string
    description: The notebook to read from (should also include cell id)
  - name: notebook_cell_id
    type: string
    description: The notebook cell read from (should also include notebook id)
  - name: notebook_cell_table
    type: int64
    description: A notebook cell can have multiple tables.)
  - name: start_row
    type: int64
    description: Start reading the result set from this row
  - name: count
    type: int64
    description: Maximum number of clients to fetch (default unlimited)'
  category: server
  metadata:
    permissions: READ_RESULTS
- name: split
  description: Splits a string into an array based on a regexp separator.
  type: Function
  args:
  - name: string
    type: string
    description: The value to split
    required: true
  - name: sep
    type: string
    description: The separator that will be used to split
  - name: sep_string
    type: string
    description: The separator as string that will be used to split
  category: basic
- name: split_records
  description: Parses files by splitting lines into records.
  type: Plugin
  args:
  - name: filenames
    type: accessors.OSPath
    description: Files to parse.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: regex
    type: string
    description: The split regular expression (e.g. a comma, default whitespace)
  - name: columns
    type: string
    description: If the first row is not the headers, this arg must provide a list
      of column names for each value.
    repeated: true
  - name: first_row_is_headers
    type: bool
    description: A bool indicating if we should get column names from the first row.
  - name: count
    type: int
    description: Only split into this many columns if possible.
  - name: record_regex
    type: string
    description: 'A regex to split data into records (default '
  - name: buffer_size
    type: int
    description: Maximum size of line buffer (default 64kb).
  category: parsers
  metadata:
    permissions: FILESYSTEM_READ
- name: splunk_upload
  description: Upload rows to splunk.
  type: Plugin
  args:
  - name: query
    type: StoredQuery
    description: Source for rows to upload.
    required: true
  - name: threads
    type: int64
    description: How many threads to use.
  - name: url
    type: string
    description: The Splunk Event Collector URL.
  - name: token
    type: string
    description: Splunk HEC Token.
  - name: index
    type: string
    description: The name of the index to upload to.
    required: true
  - name: source
    type: string
    description: The source field for splunk. If not specified this will be 'velociraptor'.
  - name: sourcetype
    type: string
    description: The sourcetype field for splunk. If not specified this will 'vql'
  - name: chunk_size
    type: int64
    description: The number of rows to send at the time.
  - name: skip_verify
    type: bool
    description: 'Skip SSL verification(default: False).'
  - name: root_ca
    type: string
    description: As a better alternative to skip_verify, allows root ca certs to be
      added here.
  - name: wait_time
    type: int64
    description: Batch splunk upload this long (2 sec).
  - name: hostname
    type: string
    description: Hostname for Splunk Events. Defaults to server hostname.
  - name: timestamp_field
    type: string
    description: Field to use as event timestamp.
  - name: hostname_field
    type: string
    description: Field to use as event hostname. Overrides hostname parameter.
  category: server
  metadata:
    permissions: COLLECT_SERVER
- name: sql
  description: Run queries against sqlite, mysql, and postgres databases
  type: Plugin
  args:
  - name: driver
    type: string
    description: sqlite, mysql,or postgres
    required: true
  - name: connstring
    type: string
    description: SQL Connection String
  - name: file
    type: string
    description: Required if using sqlite driver
  - name: accessor
    type: string
    description: The accessor to use if using sqlite
  - name: query
    type: string
    required: true
  - name: args
    type: Any
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ
- name: sqlite
  description: Opens an SQLite file and run a query against it.
  type: Plugin
  args:
  - name: file
    type: string
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: query
    type: string
    required: true
  - name: args
    type: Any
  category: parsers
- name: srum_lookup_id
  description: Lookup a SRUM id.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: id
    type: int64
    required: true
  category: windows
- name: starl
  description: |
    Compile a starlark code block - returns a module usable in VQL

    Starl allows python like code to be used with VQL. This helps when
    we need some small functions with more complex needs. We can use a
    more powerful language to create small functions to transform
    certain fields etc.

    ## Example

    In the following example we define a Starl code block and compile
    it into a module. VQL code can then reference any functions
    defined within it directly.

    ```vql
    LET MyCode <= starl(code='''
    load("math.star", "math")

    def Foo(X):
      return math.sin(X)

    ''')

    SELECT MyCode.Foo(X=32)
    FROM scope()
    ```
  type: Function
  args:
  - name: code
    type: string
    description: The body of the starlark code.
    required: true
  - name: key
    type: string
    description: If set use this key to cache the Starlark code block.
  - name: globals
    type: Any
    description: Dictionary of values to feed into Starlark environment
  category: parsers
- name: stat
  description: Get file information. Unlike glob() this does not support wildcards.
  type: Plugin
  version: 2
  args:
  - name: filename
    type: accessors.OSPath
    description: One or more files to open.
    required: true
  - name: accessor
    type: string
    description: An accessor to use.
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ
- name: str
  description: Normalize a String.
  type: Function
  args:
  - name: str
    type: Any
    description: The string to normalize
    required: true
  category: basic
- name: strip
  description: Strip a prefix from a string.
  type: Function
  args:
  - name: string
    type: string
    description: The string to strip
    required: true
  - name: prefix
    type: string
    description: The prefix to strip
  - name: suffix
    type: string
    description: The suffix to strip
  category: basic
- name: substr
  description: Create a substring from a string
  type: Function
  args:
  - name: str
    type: string
    description: The string to shorten
    required: true
  - name: start
    type: int
    description: Beginning index of substring
  - name: end
    type: int
    description: End index of substring
  category: basic
- name: sum
  description: Sums the items.
  type: Function
  args:
  - name: item
    type: int64
    required: true
  category: basic
- name: switch
  description: Executes each query. The first query to return any rows will be emitted.
  type: Plugin
  category: plugin
- name: tempdir
  description: Create a temporary directory. The directory will be removed when the
    query ends.
  type: Function
  args:
  - name: remove_last
    type: bool
    description: If set we delay removal as much as possible.
  category: basic
  metadata:
    permissions: FILESYSTEM_WRITE
- name: tempfile
  description: |
    Create a temporary file and write some data into it.

    The file will be automatically removed when the query completes.
  type: Function
  args:
  - name: data
    type: string
    description: Data to write in the tempfile.
    repeated: true
  - name: extension
    type: string
    description: An extension to place in the tempfile.
  - name: permissions
    type: string
    description: Required permissions (e.g. 'x').
  - name: remove_last
    type: bool
    description: If set we delay removal as much as possible.
  category: plugin
  metadata:
    permissions: FILESYSTEM_WRITE
- name: timeline
  description: Read a timeline. You can create a timeline with the timeline_add()
    function
  type: Plugin
  args:
  - name: timeline
    type: string
    description: Name of the timeline to read
    required: true
  - name: skip
    type: string
    description: List of child components to skip
    repeated: true
  - name: start
    type: Any
    description: First timestamp to fetch
  - name: notebook_id
    type: string
    description: The notebook ID the timeline is stored in.
  category: server
  metadata:
    permissions: READ_RESULTS
- name: timeline_add
  description: Add a new query to a timeline.
  type: Function
  args:
  - name: timeline
    type: string
    description: Supertimeline to add to
    required: true
  - name: name
    type: string
    description: Name of child timeline
    required: true
  - name: query
    type: StoredQuery
    description: Run this query to generate the timeline.
    required: true
  - name: key
    type: string
    description: The column representing the time.
    required: true
  - name: notebook_id
    type: string
    description: The notebook ID the timeline is stored in.
  category: server
  metadata:
    permissions: READ_RESULTS
- name: timestamp
  description: |
    Convert from different types to a time.Time.

    This is one of the most important functions in VQL. We need to
    convert timestamps very frequently from various
    representations. Most commonly from strings, Unix epoch times etc.

    This function is pretty smart and tries to do the right thing most
    of the time automatically. For example, you can provide the epoch
    parameter as an integer representing seconds since the epoch,
    milliseconds or microseconds since the epoch.

    ```vql
    SELECT timestamp(epoch=1630414425) AS Time1,
           timestamp(epoch=1630414425000) AS Time2,
           timestamp(epoch=1630414425000000) AS Time3,
    FROM scope()
    ```

    You can also provide a string, and `timestamp()` will try to parse
    it by guessing what it represents. For example

    ```
    SELECT timestamp(string='March 3 2019'),
           timestamp(string='07/25/2019 5pm')
    FROM scope()
    ```

    For more control over the parsing of strings, use the `format`
    parameter to specify a template which will be used to parse the
    timestamp.

    The format template uses a constant time as an example of how the
    time is layed out. It represents a template for a timestamp that
    **must** use the following date constants

    * Year: "2006" "06"
    * Month: "Jan" "January"
    * Textual day of the week: "Mon" "Monday"
    * Numeric day of the month: "2" "_2" "02"
    * Numeric day of the year: "__2" "002"
    * Hour: "15" "3" "03" (PM or AM)
    * Minute: "4" "04"
    * Second: "5" "05"
    * AM/PM mark: "PM"
    * "-0700"  ±hhmm
    * "-07:00" ±hh:mm
    * "-07"    ±hh

    ```vql
    SELECT timestamp(string="8/30/2021 6:01:28 PM",
                     format="1/2/2006 3:04:05 PM")
    ```
  type: Function
  args:
  - name: epoch
    type: Any
  - name: cocoatime
    type: int64
  - name: mactime
    type: int64
    description: HFS+
  - name: winfiletime
    type: int64
  - name: string
    type: string
    description: Guess a timestamp from a string
  - name: timezone
    type: string
    description: A default timezone (UTC)
  - name: format
    type: string
    description: A format specifier as per the Golang time.Parse
  category: basic
- name: tlsh_hash
  description: Calculate the tlsh hash of a file.
  type: Function
  args:
  - name: path
    type: accessors.OSPath
    description: Path to open and hash.
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  metadata:
    permissions: FILESYSTEM_READ
- name: to_dict
  description: |
    Construct a dict from a query.

    Sometimes we need to build a dict object where both the names of
    the keys and their values are not known in advance - they are
    calculated from another query. In this case we can use the
    to_dict() function to build a dict from a query. The query needs
    to emits as many rows as needed with a column called `_key` and
    one called `_value`. The `to_dict()` will then construct a dict
    from this query.

    ### Notes

    1. In VQL all dicts are ordered, so the order in which rows appear
    in the query will determine the dict's key order.

    2. VQL dicts always have string keys, if the `_key` value is not a
    string the row will be ignored.

    ### Example

    The following (rather silly) example creates a dict mapping Pid to
    ProcessNames in order to cache Pid->Name lookups. We then resolve
    Pid to Name within other queries. Note the use of <= to
    materialize the dict into memory once.

    ```vql
    LET PidLookup <= to_dict(item={
        SELECT str(str=Pid) AS _key, Name AS _value
        FROM pslist()
    })

    SELECT Pid, get(item=PidLookup, field=str(str=Pid))
    FROM pslist()
    ```
  type: Function
  args:
  - name: item
    type: Any
  category: basic
- name: token
  description: Extract process token.
  type: Function
  args:
  - name: pid
    type: int64
    description: The PID to get the token for.
    required: true
  category: windows
- name: trace
  description: Upload a trace file.
  type: Function
  version: 1
- name: unhex
  description: |
    Apply hex decoding to the string.

    A hex encoded string consists of two hex digits per byte -
    therefore valid hex encoded strings have an even length.

    For example: "01230F0a"

    Note: If you need to encode a string as hex encoded string you can
    use the format function:

    ```vql
    format(format="%02x", args="Hello") -> "48656c6c6f"
    ```
  type: Function
  args:
  - name: string
    type: string
    description: Hex string to decode
  category: basic
- name: unzip
  description: |
    Unzips a file into a directory.

    This plugin supports a number of compression formats:
    1. Zip files
    2. Tar gz files.

    The type of the file will be detected by the file extension, or
    else you can force a type using the `type` parameter (`tgz` or
    `zip`).
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: File to unzip.
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: filename_filter
    type: string
    description: Only extract members matching this regex filter.
  - name: output_directory
    type: string
    description: Where to unzip to
    required: true
  - name: type
    type: string
    description: The type of file (default autodetected from file extension - zip
      or tgz or tar.gz).
  category: basic
  metadata:
    permissions: FILESYSTEM_WRITE,FILESYSTEM_READ
- name: upcase
  type: Function
  args:
  - name: string
    type: string
    description: A string to lower
    required: true
  category: basic
- name: upload
  description: |
    Upload a file to the upload service. For a Velociraptor client this
    will upload the file into the flow and store it in the server's file store.

    If Velociraptor is run locally the file will be copied to the
    `--dump_dir` path or added to the triage evidence container.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: The file to upload
    required: true
  - name: name
    type: accessors.OSPath
    description: The name of the file that should be stored on the server
  - name: accessor
    type: string
    description: The accessor to use
  - name: mtime
    type: Any
    description: Modified time to record
  - name: atime
    type: Any
    description: Access time to record
  - name: ctime
    type: Any
    description: Change time to record
  - name: btime
    type: Any
    description: Birth time to record
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ
- name: upload
  description: |
    Upload files to the server.

    This plugin uploads the specified file to the server. If Velociraptor
    is run locally the file will be copied to the `--dump_dir` path or
    added to the triage evidence container.

    This functionality is also available using the upload() function which
    might be somewhat easier to use.
  type: Plugin
  args:
  - name: files
    type: string
    description: A list of files to upload
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: mtime
    type: Any
    description: Modified time to record
  category: plugin
- name: upload_azure
  description: Upload files to Azure Blob Storage Service.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: The file to upload
    required: true
  - name: name
    type: string
    description: The name of the file that should be stored on the server
  - name: accessor
    type: string
    description: The accessor to use
  - name: sas_url
    type: string
    description: A SAS URL to use for upload to the container.
    required: true
  metadata:
    permissions: FILESYSTEM_READ
- name: upload_directory
  description: Upload a file to an upload directory. The final filename will be the
    output directory path followed by the filename path.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: The file to upload
    required: true
  - name: name
    type: accessors.OSPath
    description: Filename to be stored within the output directory
  - name: accessor
    type: string
    description: The accessor to use
  - name: output
    type: string
    description: An output directory to store files in.
    required: true
  - name: mtime
    type: Any
    description: Modified time to set the output file.
  - name: atime
    type: Any
    description: Access time to set the output file.
  - name: ctime
    type: Any
    description: Change time to set the output file.
  - name: btime
    type: Any
    description: Birth time to set the output file.
  category: server
  metadata:
    permissions: FILESYSTEM_WRITE
- name: upload_gcs
  description: Upload files to GCS.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: The file to upload
    required: true
  - name: name
    type: string
    description: The name of the file that should be stored on the server
  - name: accessor
    type: string
    description: The accessor to use
  - name: bucket
    type: string
    description: The bucket to upload to
    required: true
  - name: project
    type: string
    description: The project to upload to
    required: true
  - name: credentials
    type: string
    description: The credentials to use
    required: true
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ
- name: upload_s3
  description: Upload files to S3.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: The file to upload
    required: true
  - name: name
    type: string
    description: The name of the file that should be stored on the server
  - name: accessor
    type: string
    description: The accessor to use
  - name: bucket
    type: string
    description: The bucket to upload to
    required: true
  - name: region
    type: string
    description: The region the bucket is in
    required: true
  - name: credentialskey
    type: string
    description: The AWS key credentials to use
  - name: credentialssecret
    type: string
    description: The AWS secret credentials to use
  - name: endpoint
    type: string
    description: The Endpoint to use
  - name: serversideencryption
    type: string
    description: The server side encryption method to use
  - name: kmsencryptionkey
    type: string
    description: The server side KMS key to use
  - name: s3uploadroot
    type: string
    description: Prefix for the S3 object
  - name: noverifycert
    type: bool
    description: Skip TLS Verification (deprecated in favor of SkipVerify)
  - name: skip_verify
    type: bool
    description: Skip TLS Verification
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ
- name: upload_sftp
  description: Upload files to SFTP.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: The file to upload
    required: true
  - name: name
    type: string
    description: The name of the file that should be stored on the server (may contain
      the path)
  - name: user
    type: string
    description: The username to connect to the endpoint with
    required: true
  - name: path
    type: string
    description: Path on server to upload file to (will be prepended to name)
  - name: accessor
    type: string
    description: The accessor to use
  - name: privatekey
    type: string
    description: The private key to use
    required: true
  - name: endpoint
    type: string
    description: The Endpoint to use including port number (e.g. 192.168.1.1:22 )
    required: true
  - name: hostkey
    type: string
    description: Host key to verify. Blank to disable
  category: basic
  metadata:
    permissions: FILESYSTEM_READ
- name: upload_smb
  description: Upload files using the SMB file share protocol.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: The file to upload
    required: true
  - name: name
    type: accessors.OSPath
    description: The name of the file that should be stored on the server
  - name: accessor
    type: string
    description: The accessor to use
  - name: username
    type: string
    description: The SMB username to login as (if not provided we use the SMB_CREDENTIALS
      env)
  - name: password
    type: string
    description: The SMB password to login as (if not provided we use the SMB_CREDENTIALS
      env)
  - name: server_address
    type: string
    description: The SMB server address and optionally port followed by the share
      name (e.g. \\192.168.1.1:445\ShareName)
    required: true
  metadata:
    permissions: FILESYSTEM_READ
- name: upload_webdav
  description: Upload files to a WebDAV server.
  type: Function
  args:
  - name: file
    type: accessors.OSPath
    description: The file to upload
    required: true
  - name: name
    type: string
    description: The name that the file should have on the server
  - name: accessor
    type: string
    description: The accessor to use
  - name: url
    type: string
    description: The WebDAV url
    required: true
  - name: basic_auth_user
    type: string
    description: The username to use in HTTP basic auth
  - name: basic_auth_password
    type: string
    description: The password to use in HTTP basic auth
  - name: noverifycert
    type: bool
    description: Skip TLS Verification (deprecated in favor of SkipVerify)
  - name: skip_verify
    type: bool
    description: Skip TLS Verification
  category: basic
  metadata:
    permissions: FILESYSTEM_READ
- name: uploads
  description: Retrieve information about a flow's uploads.
  type: Plugin
  args:
  - name: client_id
    type: string
    description: The client id to extract
  - name: flow_id
    type: string
    description: A flow ID (client or server artifacts)
  - name: hunt_id
    type: string
    description: A hunt ID
  category: server
  metadata:
    permissions: READ_RESULTS
- name: url
  description: |
    Construct a URL or parse one.

    This function parses or constructs URLs. A URL may be constructed from
    scratch by providing all the components or it may be parsed from an
    existing URL.

    The returned object is a [golang
    URL](https://golang.org/pkg/net/url/#URL) and can be serialized again
    using its `String` method.

    This function is important when constructing parameters for certain
    accessors which receive a URL. For example the `zip` accessor requires
    its file names to consist of URLs. The Zip accessor interprets the URL
    in the following way:

    - The scheme is the delegate accessor to use.
    - The path is the delegate accessor's filename
    - The fragment is used by the zip accessor to retrieve the zip member itself.

    In this case it is critical to properly escape each level - it is not
    possible in the general case to simply append strings. You need to use
    the `url()` function to build the proper url.
  type: Function
  args:
  - name: scheme
    type: string
    description: The scheme to use
  - name: host
    type: string
    description: The host component
  - name: path
    type: string
    description: The path component
  - name: fragment
    type: string
    description: The fragment
  - name: query
    type: Any
    description: A dict representing a query string
  - name: parse
    type: string
    description: A url to parse
  category: basic
- name: user
  description: Retrieves information about the Velociraptor user.
  type: Function
  args:
  - name: user
    type: string
    description: The user to create or update.
    required: true
  - name: org
    type: string
    description: The org under which we query the user's ACL.
- name: user_create
  description: Creates a new user from the server, or updates their permissions or
    reset their password.
  type: Function
  args:
  - name: user
    type: string
    description: The user to create or update.
    required: true
  - name: roles
    type: string
    description: List of roles to give the user.
    repeated: true
    required: true
  - name: password
    type: string
    description: A password to set for the user (If not using SSO this might be needed).
  - name: orgs
    type: string
    description: One or more org IDs to grant access to. If empty we use the current
      org.
    repeated: true
  category: server
- name: user_delete
  description: Deletes a user from the server.
  type: Function
  args:
  - name: user
    type: string
    description: The user to delete.
    required: true
  - name: orgs
    type: string
    description: If set we only delete from these orgs, otherwise we delete from the
      current org.
    repeated: true
  - name: really_do_it
    type: bool
    description: If not specified, just show what user will be removed
  category: server
- name: user_grant
  description: Grants the user the specified roles.
  type: Function
  args:
  - name: user
    type: string
    description: The user to create or update.
    required: true
  - name: roles
    type: string
    description: List of roles to give the user.
    repeated: true
  - name: orgs
    type: string
    description: One or more org IDs to grant access to. If not specified we use current
      org
    repeated: true
  - name: policy
    type: ordereddict.Dict
    description: A dict of permissions to set (e.g. as obtained from the gui_users()
      function).
- name: users
  description: Display information about workstation local users. This is obtained
    through the NetUserEnum() API.
  type: Plugin
  category: windows
- name: utf16
  description: Parse input from utf16.
  type: Function
  args:
  - name: string
    type: string
    description: A string to decode
    required: true
  category: basic
- name: utf16_encode
  description: Encode a string to utf16 bytes.
  type: Function
  args:
  - name: string
    type: string
    description: A string to decode
    required: true
  category: basic
- name: uuid
  description: Generate a UUID.
  type: Function
  category: basic
- name: vad
  description: Enumerate process memory regions.
  type: Plugin
  args:
  - name: pid
    type: int64
    description: The PID to dump out.
    required: true
  category: windows
- name: version
  description: |2

    Gets the version of a VQL plugin or function.

    This is useful when writing portable VQL which can work with
    older versions of Velociraptor. When Velociraptor plugins evolve
    in an incompatible way their version is incremented. It is
    possible to cater for multiple versions in the VQL using an if()
    plugin.

    For example the following can chose from a legacy query or a
    modern query based on the plugin version:
    ```
     SELECT * FROM if(
      condition=version(plugin="glob") >= 1,
      then=NewQuery,
      else=LegacyQuery)
    ```
  type: Function
  args:
  - name: function
    type: string
  - name: plugin
    type: string
  category: basic
- name: vfs_ls
  description: |
    List directory and build a VFS object.

    This plugin is probably only useful as part of the
    System.VFS.ListDirectory artifact.
  type: Plugin
  version: 1
  args:
  - name: path
    type: accessors.OSPath
    description: The directory to refresh.
  - name: components
    type: string
    description: Alternatively a list of path components can be given.
    repeated: true
  - name: accessor
    type: string
    description: An accessor to use.
  - name: depth
    type: int64
    description: Depth of directory to list (default 0).
  metadata:
    permissions: FILESYSTEM_READ
- name: watch_auditd
  description: Watch log files generated by auditd.
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: A list of log files to parse.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: buffer_size
    type: int
    description: Maximum size of line buffer.
  category: event
- name: watch_csv
  description: |
    Watch a CSV file and stream events from it. Note: This is an event
    plugin which does not complete.

    This plugin is the event version of `parse_csv()`. When the CSV file
    grows this plugin will emit the new rows.
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: CSV files to open
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: auto_headers
    type: bool
    description: If unset the first row is headers
  - name: separator
    type: string
    description: Comma separator (default ',')
  - name: comment
    type: string
    description: The single character that should be considered a comment
  - name: columns
    type: string
    description: The columns to use
    repeated: true
  category: event
  metadata:
    permissions: FILESYSTEM_READ
- name: watch_etw
  description: Watch for events from an ETW provider.
  type: Plugin
  args:
  - name: name
    type: string
    description: 'A session name '
  - name: guid
    type: string
    description: 'A Provider GUID to watch '
    required: true
  - name: any
    type: uint64
    description: 'Any Keywords '
  - name: all
    type: uint64
    description: 'All Keywords '
  - name: level
    type: int64
    description: Log level (0-5)
  category: event
- name: watch_evtx
  description: |
    Watch an EVTX file and stream events from it.

    This is the Event plugin version of `parse_evtx()`.

    {{% notice note %}}

    It often takes several seconds for events to be flushed to the event
    log and so this plugin's event may be delayed. For some applications
    this results in a race condition with the event itself - for example,
    files mentioned in the event may already be removed by the time the
    event is triggered.

    {{% /notice %}}
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: A list of event log files to parse.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: messagedb
    type: string
    description: A Message database from https://github.com/Velocidex/evtx-data.
  category: event
  metadata:
    permissions: FILESYSTEM_READ
- name: watch_monitoring
  description: |
    Watch clients' monitoring log. This is an event plugin. This
    plugin will produce events from all clients.
  type: Plugin
  args:
  - name: artifact
    type: string
    description: The artifact to watch
  category: event
  metadata:
    permissions: READ_RESULTS
- name: watch_syslog
  description: 'Watch a syslog file and stream events from it. '
  type: Plugin
  args:
  - name: filename
    type: accessors.OSPath
    description: A list of log files to parse.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: The accessor to use.
  - name: buffer_size
    type: int
    description: Maximum size of line buffer.
  category: event
  metadata:
    permissions: FILESYSTEM_READ
- name: watch_usn
  description: Watch the USN journal from a device.
  type: Plugin
  args:
  - name: device
    type: string
    description: The device file to open (as an NTFS device).
    required: true
  category: event
- name: whoami
  description: Returns the username that is running the query.
  type: Function
  category: plugin
- name: winobj
  description: Enumerate The Windows Object Manager namespace.
  type: Plugin
  args:
  - name: path
    type: string
    description: Object namespace path.
  category: windows
- name: wmi
  description: |
    Execute simple WMI queries synchronously.

    This plugin issues a WMI query and returns its rows directly. The
    exact format of the returned row depends on the WMI query issued.

    This plugin creates a bridge between WMI and VQL and it is a very
    commonly used plugin for inspecting the state of windows systems.
  type: Plugin
  args:
  - name: query
    type: string
    description: The WMI query to issue.
    required: true
  - name: namespace
    type: string
    description: The WMI namespace to use (ROOT/CIMV2)
  category: windows
- name: wmi_events
  description: |
    Executes an evented WMI queries asynchronously.

    This plugin sets up a [WMI event](https://docs.microsoft.com/en-us/windows/desktop/wmisdk/receiving-a-wmi-event) listener query.
  type: Plugin
  args:
  - name: query
    type: string
    description: WMI query to run.
    required: true
  - name: namespace
    type: string
    description: WMI namespace
    required: true
  - name: wait
    type: int64
    description: Wait this many seconds for events and then quit.
    required: true
  category: event
- name: write_csv
  description: Write a query into a CSV file.
  type: Plugin
  args:
  - name: filename
    type: string
    description: CSV files to open
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: query
    type: StoredQuery
    description: query to write into the file.
    required: true
  category: plugin
  metadata:
    permissions: FILESYSTEM_WRITE
- name: write_jsonl
  description: Write a query into a JSONL file.
  type: Plugin
  args:
  - name: filename
    type: string
    description: CSV files to open
    required: true
  - name: accessor
    type: string
    description: The accessor to use
  - name: query
    type: StoredQuery
    description: query to write into the file.
    required: true
  metadata:
    permissions: FILESYSTEM_WRITE
- name: xor
  description: Apply xor to the string and key.
  type: Function
  args:
  - name: string
    type: string
    description: String to apply Xor
    required: true
  - name: key
    type: string
    description: Xor key.
    required: true
  category: parsers
- name: yara
  description: |
    Scan files using yara rules.

    The `yara()` plugin applies a signature consisting of multiple rules
    across files. You can read more about [yara rules](https://yara.readthedocs.io/en/v4.2.3/writingrules.html). The
    accessor is used to open the various files which allows this plugin to
    work across raw ntfs, zip members or indeed process memory.

    Scanning proceeds by reading a block from the file, then applying the
    yara rule on the block. This will fail if the signature is split
    across block boundary. You can choose the block size to be
    appropriate.

    If the accessor is **not** specified we use the yara library to
    directly open the file itself without Velociraptor's accessor
    API. This allows Yara to mmap the file which has a number of
    benefits including:

      1. The ability to scan without reading in blocks - so a
         signature matching the file header as well as a string deep
         within the file works.

      2. Various Yara extensions like the `pe` extension work allowing
         rules that use such extensions to work properly.

    If we are not able to open the file (for example due to sharing
    violations), Velociraptor will automatically fall back to the ntfs
    accessor (on Windows) and will automatically switch to block by
    block scanning.

    Typically the yara rule does not change for the life of the query,
    so Velociraptor caches it to avoid having to recompile it each
    time. The `key` variable can be used to uniquely identify the
    cache key for the rule. If the `key` variable is not specified, we
    use the rule text itself to generate the cache key. It is
    recommended that the `key` parameter be specified because it makes
    it more efficient since we do not need to hash the rules each time.

    ### Shorthand rules

    This plugin accepts yara rules in the `rules` parameter. But typically
    we only search for keywords so writing a full yara syntax rule is
    tedious. Therefore we provide a shorthand way to specify the
    keywords. For example:

    ```
    wide nocase:foo,bar,baz
    ```

    When the rule is provided in the above form, the plugin will
    automatically generate a yara rule which matches any of the specified
    keywords. The specification before the `:` means the same thing as the
    yara DSL and the following combinations are supported `wide`,
    `wide ascii`, `wide nocase`, `wide nocase ascii`.

    This shorthand notation is less useful because recent Velociraptor
    versions offer a context sensitive Yara rule editor in the GUI
    (simply press ? to bring up a rule template).

    {{% notice note %}}

    By default only the first 100mb of the file are scanned and
    scanning stops after one hit is found.

    {{% /notice %}}

    ### Compatibility with yara rules.

    The YARA engine supports a number of directives that bring in
    unreasonably sized dependencies. Velociraptor's Yara integration
    disables directive importing dependencies such as openssl and
    libmagic. This means that some rule conditions do not work (for
    example `pe.number_of_signatures`). Other condition are still
    supported (e.g. `pe.imphash()`). You can usually find equivalents
    to the Yara plugins in VQL plugins so rules can be rewritten to
    avoid this limitation.

    If you have a large number of rules, you may use the `yara-tools`
    repository https://github.com/Velocidex/yara-tools to clean up the
    rules and verify that they will work with Velociraptor's yara
    engine. The tool will automatically remove rules that are
    incompatible with Velociraptor and reduce the size of the rules by
    removing metadata and extra fluff.
  type: Plugin
  args:
  - name: rules
    type: string
    description: Yara rules in the yara DSL.
    required: true
  - name: files
    type: Any
    description: The list of files to scan.
    repeated: true
    required: true
  - name: accessor
    type: string
    description: Accessor (e.g. ntfs,file)
  - name: context
    type: int
    description: How many bytes to include around each hit
  - name: start
    type: uint64
    description: The start offset to scan
  - name: end
    type: uint64
    description: End scanning at this offset (100mb)
  - name: number
    type: int64
    description: Stop after this many hits (1).
  - name: blocksize
    type: uint64
    description: Blocksize for scanning (1mb).
  - name: key
    type: string
    description: If set use this key to cache the  yara rules.
  - name: namespace
    type: string
    description: The Yara namespece to use.
  - name: vars
    type: ordereddict.Dict
    description: The Yara variables to use.
  category: plugin
  metadata:
    permissions: FILESYSTEM_READ

