name: Windows.Carving.CobaltConfig
author: Matt Green - @mgreen27
description: |
  This artifact extracts cobalt config

type: CLIENT
parameters:
  - name: TargetFile
    default:
  - name: PidRegex
    default: .
  - name: ProcessRegex
    default: .
  - name: ExtractBytes
    type: int
    default: 10000
  - name: FindConfig
    default: |
        rule find_cobalt_strike_config {
        strings:
             $69 = { 69 68 69 68 69 6b ?? ?? 69 6b 69 68 69 6b ?? ?? 69 6a }
             $2e = { 2e 2f 2e 2f 2e 2c ?? ?? 2e 2c 2e 2f 2e 2c ?? ?? 2e }

        condition:
              any of them
        }

export: |
  LET Profile = '''[
    [CobaltConfig, 0, [
        # 0x0001:BeaconType, 0x0001:Type, 0x0002:Length
        ["BeaconType", 6, "Enumeration", {
            "type": "uint16b",
            "choices": {
                 "0": "windows-beacon_http-reverse_http",
                 "1": "windows-beacon_dns-reverse_http",
                 "2": "windows-beacon_smb-bind_pipe",
                 "8": "windows-beacon_https-reverse_https",
                 "16": "windows-beacon_tcp-bind_tcp"
            }
        }],

        # 0x0002:Port, 0x0001:Type, 0x0002:Length
        ["__port_prefix", 0, "String",{
            "term_hex": "000200010002"
        }],
        ["Port", "x=>len(list=x.__port_prefix) + 6", "uint16b"],

        # 0x0003:Sleeptime,0x0002:Type, 0x0004:Length
        ["__sleeptime_prefix", 0, "String", {"term_hex": "000300020004"}],
        ["Sleeptime", "x=>len(list=x.__sleeptime_prefix) + 6", "uint32b"],

        # 0x0004:Maxgetsize,0x0002:Type, 0x0004:Length
        ["__maxgetsize_prefix", 0, "String",{"term_hex": "000400020004"}],
        ["Maxgetsize", "x=>len(list=x.__maxgetsize_prefix) + 6", "uint32b"],

        # 0x0005:Jitter, 0x0001:Type, 0x0002:Length
        ["__jitter_prefix", 0, "String",{"term_hex": "000500010002"}],
        ["Jitter", "x=>len(list=x.__jitter_prefix) + 6", "uint16b"],

        # 0x0006:MaxDns, 0x0001:Type, 0x0002:Length
        ["__maxdns_prefix", 0, "String",{"term_hex": "000600010002"}],
        ["MaxDns", "x=>len(list=x.__maxdns_prefix) + 6", "uint16b"],

        # 0x0007:Publickey,0x0003:Type,
        ["__publickey_prefix", 0, "String",{"term_hex": "000700030100"}],
        ["__publickey_raw", "x=>len(list=x.__publickey_prefix) + 6", "String",{"term_hex":"00000008"}],
        ["PublicKey", "x=>len(list=x.__publickey_prefix) + 6", "Value",{"value":"x=>encode(string=x.__publickey_raw,type='hex')"}],

        # 0x0008:server/get-uri,0x0003:Type,
        ["__c2server_prefix", 0, "String",{"term_hex": "00080003"}],
        ["c2_server", "x=>len(list=x.__c2server_prefix) + 6", "String"],

        # 0x0009:useragent,0x0003:Type,
        ["__useragent_prefix", 0, "String",{"term_hex": "00090003"}],
        ["UserAgent", "x=>len(list=x.__useragent_prefix) + 6", "String"],

        # 0x000a:PostUri,0x0003:Type,
        ["__PostUri_prefix", 0, "String", {"term_hex": "000a0003", length: 10000, max_length: 10000}],
        ["PostURI", "x=>len(list=x.__PostUri_prefix) + 6", "String"],
        #["PostURI", 0, "String", {length=10, term="XXXX"}],

        # 0x000b:Malleable_C2_Instructions,0x0003:Type,
        ["__Malleable_C2_Instructions_prefix", 0, "String",{"term_hex": "000b0003", length: 10000, max_length: 10000}],
        ["Malleable_C2_Instructions", "x=>len(list=x.__Malleable_C2_Instructions_prefix) + 6", "String"],

        # 0x000c:HttpGetHeader,0x0003:Type,
        ["__http_get_header_prefix", 0, "String",{"term_hex": "000c0003", length: 10000, max_length: 10000}],
        ["HttpGetHeader", "x=>len(list=x.__http_get_header_prefix) + 6", "String",{"term_hex":"0000"}],

        # 0x000d:HttpPostHeader,0x0003:Type,
        ["__http_post_header_prefix", 0, "String",{"term_hex": "000d0003", length: 10000, max_length: 10000}],
        ["HttpPostHeader", "x=>len(list=x.__http_post_header_prefix) + 6", "String",{"term_hex":"0000"}],

        # 0x000e:SpawnTo,0x0003:Type
        ["__SpawnTo_header_prefix", 0, "String",{"term_hex": "000d0003", length: 10000, max_length: 10000}],
        ["SpawnTo", "x=>len(list=x.__SpawnTo_header_prefix) + 6", "String",{"term_hex":"0000"}],

        # 0x000f:PipeName,0x0003:Type
        ["__pipename_prefix", 0, "String",{"term_hex": "000f0003", length: 10000, max_length: 10000}],
        ["Pipename", "x=>len(list=x.__pipename_prefix) + 6", "String",{"term_hex":"0000"}],

        # 0x001d:spawn_to_x86,0x0003:Type
        ["__spawnx86_prefix", 0, "String",{"term_hex": "001d0003", length: 10000, max_length: 10000}],
        ["SpawnTox86", "x=>len(list=x.__spawnx86_prefix) + 6", "String",{"term_hex":"0000"}],

        # 0x001e:spawn_to_x64,0x0003:Type
        ["__spawnx64_prefix", 0, "String",{"term_hex": "001e", length: 10000, max_length: 10000}],
        ["SpawnTox64", "x=>len(list=x.__spawnx64_prefix) + 6", "String",{"term_hex":"0000"}],
    ]]]'''

sources:
  - query: |
      -- scan processes in scope with our rule, limit 1 hit
      LET file_hits = SELECT
                TargetFile as Source,
                String.Offset as Offset,
                substr(start=0,end=1,str=String.Data) as Xor,
                read_file(filename=TargetFile,
                          offset=String.Offset,
                          length=ExtractBytes) as Data
             FROM yara(files=TargetFile, rules=FindConfig, number=99)

      -- find velociraptor process
      LET me = SELECT Pid FROM pslist(pid=getpid())

      -- find all processes and add filters
      LET processes = SELECT Name as ProcessName, CommandLine, Pid
        FROM pslist()
        WHERE
            Name =~ ProcessRegex
            AND format(format="%d", args=Pid) =~ PidRegex
            AND NOT Pid in me.Pid

      -- scan processes in scope with our rule, limit 1 hit
      LET process_hits = SELECT * FROM foreach(
        row=processes,
        query={
            SELECT
                dict(Pid=Pid, ProcessName=ProcessName,CommandLine=CommandLine) as Source,
                String.Offset as Offset,
                substr(start=0,end=1,str=String.Data) as Xor,
                read_file(filename=Pid, accessor='process',
                        offset=String.Offset,
                        length=int(int=ExtractBytes)
                    ) as Data
             FROM yara(files=Pid, accessor='process',
                rules=FindConfig, number=99)
          })

      -- output rows
      SELECT Source,Offset, Xor,
        parse_binary(accessor="data",
            filename=xor(string=Data,key=Xor),
            profile=Profile,
            struct="CobaltConfig") AS DecodedConfig,
            format(format="% x", args=xor(string=Data,key=Xor)) as DecodedData
      FROM if(condition=TargetFile,
        then= file_hits,
        else= process_hits)
