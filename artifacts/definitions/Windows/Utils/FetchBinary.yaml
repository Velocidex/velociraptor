name: Windows.Utils.FetchBinary
description: A utility artifact which fetches a binary from a URL and caches it on disk.
   We verify the hash of the binary on disk and if it does not match we fetch it again
   from the source URL.

   This artifact is designed to be called from other artifacts. The binary path will be
   emitted in the FullPath column.

parameters:
  - name: binaryURL
    description: |
      Specify this as the base of the binary store (if empty we use
      the server's public directory).
  - name: ToolName
    default: Autorun

sources:
  - queries:
      - LET info_cache <= SELECT * FROM info()

      # Figure out our binary cache path based on arch. Fallback to
      # the temp directory.
      - |
        LET binpath <= SELECT dirname(path=expand(path=Path)) AS Path FROM switch(
          a={SELECT config.WritebackWindows AS Path FROM info_cache
             WHERE OS="windows" AND Path},
          b={SELECT config.WritebacLinux AS Path FROM info_cache
             WHERE OS="linux" AND Path},
          c={SELECT config.WritebackDarwin AS Path FROM info_cache
             WHERE OS="darwin" AND Path},
          d={SELECT expand(path="$Temp") AS Path FROM scope() WHERE Path},
          e={SELECT "/tmp/XXX" AS Path FROM info_cache WHERE OS = "linux"}
        )

      # Where should we download binaries from? Allow this to be
      # overriden by the user.
      - |
        LET inventory_url <= SELECT URL from switch(
         a={SELECT binaryURL AS URL FROM scope() WHERE URL},
         b={SELECT config.ServerUrls[0] + "public/" AS URL FROM scope() WHERE URL},
         c={SELECT log(message="binaryURL not set and no server config."),
            NULL AS URL FROM info_cache})

      # Fetch the inventory from the repository.
      - |
        LET inventory_data = SELECT * FROM http_client(
           chunk_size=1000000,
           url=(inventory_url[0]).URL + "inventory.csv")
           WHERE inventory_url

      # Parse the inventory: Tool,Type,URL,ExpectedHash
      - |
        LET inventory = SELECT * FROM parse_csv(
           filename=inventory_data.Content, accessor="data")

      # Figure out which tool we need based on the Architecture and
      # the required tool.
      - |
        LET required_tool = SELECT * FROM foreach(
         row=inventory,
         query={
           SELECT Tool, ExpectedHash, URL FROM info_cache
           WHERE Architecture =~ Type AND Tool = ToolName
         }) LIMIT 1

      # Download the file from the binary URL and store in the local
      # binary cache.
      - |
        LET download = SELECT hash(path=Content) as Hash,
            "Downloaded" AS DownloadStatus,
            copy(filename=Content,
                 dest=(binpath[0]).Path + "/"+basename(path=URL)) AS FullPath
        FROM http_client(
            url=(inventory_url[0]).URL + URL,
            tempfile_extension=".exe")
        WHERE Hash.SHA256 = ExpectedHash

      # Check if the existing file in the binary file cache matches
      # the hash.
      - |
        LET existing = SELECT FullPath, hash(path=FullPath) AS Hash,
                    "Cached" AS DownloadStatus
        FROM stat(filename=(binpath[0]).Path + "/" + basename(path=URL))
        WHERE Hash.SHA256 = ExpectedHash

      # Find the required_tool either if in the local cache or
      # download it (and put it in the cache for next time).
      - |
        SELECT * from foreach(row=required_tool, query={
          SELECT * FROM switch(a=existing, b=download)
        })
