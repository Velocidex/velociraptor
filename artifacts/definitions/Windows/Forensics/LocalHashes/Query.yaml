name: Windows.Forensics.LocalHashes.Query
description: |
  This artifact maintains a local (client side) database of file
  hashes. It is then possible to query this database using the
  Windows.Forensics.LocalHashes.Query artifact.

  NOTE: This artifact expects a CSV file with one hash per line. On
  the command line you can encode carriage return using powershell
  like this:

  ```
  .\velociraptor.exe -v artifacts collect Windows.Forensics.LocalHashes.Query --args "Hashes=Hash`ne6c1ce56e6729a0b077c0f2384726b30"
  ```

precondition: SELECT OS from info() where OS = "windows"

parameters:
  - name: Hashes
    description: The hash to query for.
    type: csv
    default: |
      Hash
      XXX

  - name: CommaDelimitedHashes
    description: A set of comma delimited hashes
    default:

  - name: HashDb
    description: Name of the local hash database
    default: hashdb.sqlite

sources:
  - query: |
      LET hash_db <= path_join(components=[dirname(path=tempfile()), HashDb])

      LET _ <= log(message="Will use local hash database " + hash_db)

      // SQL to create the initial database.
      LET _ <= SELECT * FROM sqlite(file=hash_db,
         query="CREATE table if not exists hashes(path text, md5 varchar(16), size bigint, timestamp bigint)")

      LET _ <= SELECT * FROM sqlite(file=hash_db,
         query="create index if not exists hashidx on hashes(md5)")

      LET _ <= SELECT * FROM sqlite(file=hash_db,
         query="create index if not exists pathidx on hashes(path)")

      LET _ <= SELECT * FROM sqlite(file=hash_db,
         query="create unique index if not exists uniqueidx on hashes(path, md5)")

      LET lookup(Hash) = SELECT hash_db AS HashDBPath, path AS Path, md5 AS MD5, size AS Size,
             timestamp(epoch=time) AS Timestamp
      FROM sqlite(file=hash_db,
         query="SELECT path, md5, size, timestamp AS time FROM hashes WHERE md5 = ?",
         args=Hash)

      -- Check hashes from the CSV or comma delimited input
      LET hashes = SELECT Hash FROM chain(
      a={
        SELECT Hash FROM parse_csv(filename=Hashes, accessor="data")
      }, b={
        SELECT * FROM foreach(row=split(string=CommaDelimitedHashes, sep=","),
        query={
           SELECT _value AS Hash FROM scope()
        })
      })

      SELECT * FROM switch(
      a={
          SELECT * FROM foreach(row=hashes,
          query={
              SELECT * FROM lookup(Hash=Hash)
          })
      },
      b={
         SELECT hash_db AS HashDBPath FROM scope()
      })
