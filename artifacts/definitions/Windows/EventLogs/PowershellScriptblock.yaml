name: Windows.EventLogs.PowershellScriptblock
description: |
  This Artifact will search and extract ScriptBlock events (Event ID 4104) from 
  Powershell-Operational Event Logs.
  
  Powershell is commonly used by attackers accross all stages of the attack 
  lifecycle. A valuable hunt is to search Scriptblock logs for signs of 
  malicious content.
  
  There are several parameter's availible for search leveraging regex. 
    - dateAfter enables search for events after this date.  
    - dateBefore enables search for events before this date.   
    - SearchStrings enables regex search over scriptblock text field.  
    - stringWhiteList enables a regex whitelist for scriptblock text field.  
    - pathWhitelist enables a regex whitelist for path of scriptblock. 
    - LogLevel enables searching on type of log. Default is Warning level 
      which is logged even if ScriptBlock logging is turned off when 
      suspicious keywords detected in Powershell interpreter.   
  

author: Matt Green - @mgreen27

parameters:
  - name: eventLog
    default: C:\Windows\system32\winevt\logs\Microsoft-Windows-PowerShell%4Operational.evtx
  - name: dateAfter
    description: "search for events after this date. YYYY-MM-DDTmm:hh:ss Z"
    type: timestamp
  - name: dateBefore
    description: "search for events before this date. YYYY-MM-DDTmm:hh:ss Z"
    type: timestamp
  - name: searchStrings
    description: "regex search over scriptblock text field."
  - name: stringWhitelist
    description: "Regex of string to witelist"
  - name: pathWhitelist
    description: "Regex of path to whitelist."
    
  - name: LogLevel
    description: "Log level. Warning is Powershell default bad keyword list."
    type: choices
    default: Warning
    choices:
       - All
       - Warning
       - Verbose
  - name: LogLevelMap
    type: hidden
    default: |
      Choice,Regex
      All,"."
      Warning,"3"
      Verbose,"5"
      
      
sources:
  - name: PowershellScriptBlock
    queries:
      - LET time <= SELECT format(format="%v", args=Regex) as value
            FROM parse_csv(filename=LogLevelMap, accessor="data")
            WHERE Choice=LogLevel LIMIT 1
      - LET LogLevelRegex <= SELECT format(format="%v", args=Regex) as value
            FROM parse_csv(filename=LogLevelMap, accessor="data")
            WHERE Choice=LogLevel LIMIT 1
      - LET files = SELECT * FROM glob(
            globs=eventLog)
      - SELECT *
        FROM foreach(
          row=files,
          query={
            SELECT timestamp(epoch=System.TimeCreated.SystemTime) As EventTime,
              System.Computer as Computer,
              System.Security.UserID as SecurityID,
              EventData.Path as Path,
              EventData.ScriptBlockId as ScriptBlockId,
              EventData.ScriptBlockText as ScriptBlockText,
              System.EventRecordID as EventRecordID,
              System.Level as Level,
              System.Opcode as Opcode,
              System.Task as Task
            FROM parse_evtx(filename=FullPath)
            WHERE System.EventID.Value = 4104 and
                if(condition=dateAfter, then=EventTime > timestamp(string=dateAfter),
                 else=TRUE) and
                if(condition=dateBefore, then=EventTime < timestamp(string=dateBefore),
                 else=TRUE) and
                format(format="%d", args=System.Level) =~ LogLevelRegex.value[0] and
                if(condition=searchStrings, then=ScriptBlockText =~ searchStrings,
                 else=TRUE) and
                if(condition=stringWhitelist, then=not ScriptBlockText =~ stringWhitelist,
                 else=TRUE) and
                if(condition=pathWhitelist, then=not Path =~ pathWhitelist,
                 else=TRUE)
        })

reports:
  - type: HUNT
    template: |
      Powershell: Scriptblock
      =======================
      Powershell is commonly used by attackers accross all stages of the attack 
      lifecycle.  
      A valuable hunt is to search Scriptblock logs for signs of malicious 
      content. Stack ranking these events can provide valuable leads from which 
      to start an investigation.
      
      {{ Query "SELECT count(items=ScriptBlockText) as Count, ScriptBlockText FROM source(source='PowershellScriptBlock') GROUP BY ScriptBlockText ORDER BY Count"  | Table }}
      