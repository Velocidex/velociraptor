syntax = "proto3";

import "proto/semantic.proto";

package proto;

option go_package = "www.velocidex.com/golang/velociraptor/artifacts/proto";

message ArtifactEnv {
    string key = 1;
    string value = 2;
}

message ColumnType {
    string name = 1;
    string type = 2;
    string description = 3;
}

// Artifact definitions - users are able to write YAML files with
// these defintiions.

message ArtifactParameter {
    option (semantic) = {
        description: "Artifacts may accept parameters which are added to the "
        "scope prior to execution. NOTE: all parameters are strings - if you "
        "need something else the query can unpack e.g. from JSON using the "
        "JSONParse() VQL function."
    };
    string name = 1;
    string default = 2;
    string description = 3;
    string type = 4;

    // For type = choice
    repeated string choices = 6;

    string friendly_name = 5;

    // For type = string
    string validating_regex = 7;

    // For type = artifactset
    string artifact_type = 8;
}

message NotebookSourceCell {
    string template = 1;
    string type = 2;
    string name = 4;
    repeated ArtifactEnv env = 3;
}


message ArtifactSource {
    option (semantic) = {
        description: "Where the artifact gets its data."
    };

    string name = 3 [(sem_type) = {
            description: "The name of this artifact source. "
            "If not set we use the same of the artifact itself. The artifact "
            "compiler will generate a query with this name."
        }];

    string description = 4 [(sem_type) = {
            description: "A description string for this source. "
            "Note it can be interpolated with other artifact descriptions."
        }];

    string precondition = 1 [(sem_type) = {
            description: "A VQL expression to be evaluated prior to using "
            "this source."
        }];

    string query = 6 [(sem_type) = {
            description: "A multi-line VQL query"
        }];

    // Deprecated - use query above for new artifacts.
    repeated string queries = 2 [(sem_type) = {
            description: "Queries that will run in order. Only output from "
            "the last query will be collected."
        }];

    // Notebook cells that will be added as part of the source.
    repeated NotebookSourceCell notebook = 5;
}


// Deprecated - Reports have been replaced by notebooks.
message Report {
    option (semantic) = {
        description: "A report is generated from the output of the artifact collected. "
        "There can be multiple report types generated depending on context."
    };

    // Each report type will be handled differently. Read about the
    // different types in reporting.go
    string type = 1 [(sem_type) = {
            description: "Type of report: CLIENT, SERVER"
        }];

    // If specified we only allow the report to take this long.
    uint64 timeout = 4;

    string name = 5;

    string template = 2;

    repeated ArtifactParameter parameters = 3;
}

message Artifact {
    option (semantic) = {
        description: "An artifact wraps a VQL query in reusable, documented way."
        "Artifacts are all about collecting things not analyzing them."
    };

    string name = 1 [(sem_type) = {
            description: "The name of the artifact. Should be unique and may "
            "contain dots. A useful scheme is to break categories with dot e.g. "
            "Linux.Browsers.ChromeHistory";
        }];

    // Aliases are other names by which the same artifact is known
    repeated string aliases = 21;

    string description = 2 [(sem_type) = {
            description: "What the artifact is trying to collect."
        }];

    string author = 12 [(sem_type) = {
            description: "Author of the artifact."
        }];

    repeated string reference = 5 [(sem_type) = {
            description: "A reference for this artifact."
        }];

    repeated string references = 23 [(sem_type) = {
            description: "A reference for this artifact."
        }];

    repeated string required_permissions = 13 [(sem_type) = {
            description: "A list of required permissions to collect this artifact."
        }];

    // Default resource limits.
    Resources resources = 19;

    // An optional list of tool descriptions. These are only used to
    // initialize Velociraptor if there is no previous tool
    // definition. It will not override existing tools. The user may
    // override the tool name in order to control where it will be
    // downloaded from.
    repeated Tool tools = 15;

    // If set here this applies to all sources.
    string precondition = 8 [(sem_type) = {
            description: "A VQL expression to be evaluated prior to using "
            "this source."
        }];

    repeated ArtifactParameter parameters = 3 [(sem_type) = {
            description: "Parameters to be provided to the artifact."
        }];


    // Unfortunately we can not use enum due to limitations in
    // yaml->json->protobuf conversion.
    string type = 10 [(sem_type) = {
            description: "The type of the query. Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT, INTERNAL",
        }];

    repeated ArtifactSource sources = 4 [(sem_type) = {
            description: "Where the artifact gets its data."
        }];

    repeated string imports = 17 [(sem_type) = {
            description: "A list of other artifacts' export VQL to preload prior to this artifact."
        }];

    string export = 18 [(sem_type) = {
            description: "VQL that this artifact exports. It will be automatically imported into the sources section."
        }];


    repeated Report reports = 11 [(sem_type) = {
            description: "A list of reports to potentially post process this artifact.",
        }];

    // A list of column type description. These provide the GUI a hint
    // of how to render the columns.
    repeated ColumnType column_types = 16;

    /* Internal use only */
    string raw = 7 [(sem_type) = {
            description: "The raw YAML of this artifact.",
        }];

    // Artifact was already compiled.
    bool compiled = 14;

    // The artifact is considered built and and can not be overriden by the GUI
    bool built_in = 20;

    // The artifact is built into the Velociraptor binary.
    bool compiled_in = 24;
    bool is_alias = 22;
}

message ArtifactDescriptors {
    repeated Artifact items = 1;
}



// Tools are external files that Velociraptor ensures are available to
// running artifacts.

message Tool {
    // The following are part of the tool definitions

    string name = 1;

    // The URL to fetch the tool from when we upload it the first
    // time, or when we update.
    string url = 2;

    // As an alternative to a url we allow scrapping of GitHub
    // releases using the github API. NOTE: When this method is
    // specified, the file will always be served locally.
    string github_project = 9;
    string github_asset_regex = 10;

    // If set, the tool will be served locally from the filestore path
    // - otherwise the endpoint will download the file by itself from
    // the url above.
    bool serve_locally = 3;

    // This is set when an admin explicitly overrides a tool. If this
    // is set we will not update the tool definition when upgrading
    // server versions.
    bool admin_override = 7;

    // Hex encoded sha256 hash of the expected hash of the file. When
    // the server downloads the file it will check against the
    // expected hash and refuse to download an incorrect hash.  This
    // is a way to pin the dependency into the artifact definition to
    // protect against supply side attacks.
    string expected_hash = 15;

    // Specify a version for the tool. This allows multiple versions
    // of the same tool to be used at the same time.
    string version = 16;

    // If set on a request we refresh the hash by downloading the file again.
    bool materialize = 11;

    // The artifact this definition came from.
    string artifact = 13;

    // A filestore path where the file can be downloaded from - if
    // served locally. This can be provided by the caller to AddTool()
    // after they uploaded the file to the filestore through some
    // other mechanism. Note this path is relative to the /public/
    // directory.
    string filestore_path = 4;


    // Once the tool is added with the above fields, the following
    // fields are used to keep state on it.

    // The URL we serve the tool from when we serve locally. If this
    // is empty we just let the endpoint download its own tool from
    // the url above.
    string serve_url = 8;

    // Only valid for local dummy inventory.
    string serve_path = 12;

    // The name of the cached file on the endpoint. This file will
    // persist and can be accessed again if this tool is needed in
    // future. If the file is missing (or has the wrong hash), then it
    // will be downloaded again.
    string filename = 5;

    // Hex encoded sha256 hash of the file. Endpoints will check this
    // hash against their fetched file to ensure it was correctly
    // transferred.
    string hash = 6;

    // When we attempted to download the file, and the hash did not
    // match the expected hash, we record the actual hash here. The
    // user can then opt for trusting this hash in the GUI which will
    // copy it into the expected hash and clear this hash.
    string invalid_hash = 17;

    // Additional versions of this tool.
    repeated Tool versions = 14;

}

// Keep track of all the third party tools we know about.
message third_party {
    repeated Tool tools = 1;
    uint64 version = 2;
}


message Resources {
    // Default timeout for this artifact
    uint64 timeout = 1;
    float ops_per_second = 4;
    float cpu_limit = 5;
    float iops_limit = 6;

    // Default resource use for the entire collection.
    uint64 max_rows = 2;
    uint64 max_upload_bytes = 3;
}
