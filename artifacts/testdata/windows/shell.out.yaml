SELECT * FROM execve(argv=['cmd.exe', '/?'])[
 {
  "Stdout": "Starts a new instance of the Windows command interpreter\r\n\r\nCMD [/A | /U] [/Q] [/D] [/E:ON | /E:OFF] [/F:ON | /F:OFF] [/V:ON | /V:OFF]\r\n    [[/S] [/C | /K] string]\r\n\r\n/C      Carries out the command specified by string and then terminates\r\n/K      Carries out the command specified by string but remains\r\n/S      Modifies the treatment of string after /C or /K (see below)\r\n/Q      Turns echo off\r\n/D      Disable execution of AutoRun commands from registry (see below)\r\n/A      Causes the output of internal commands to a pipe or file to be ANSI\r\n/U      Causes the output of internal commands to a pipe or file to be\r\n        Unicode\r\n/T:fg   Sets the foreground/background colors (see COLOR /? for more info)\r\n/E:ON   Enable command extensions (see below)\r\n/E:OFF  Disable command extensions (see below)\r\n/F:ON   Enable file and directory name completion characters (see below)\r\n/F:OFF  Disable file and directory name completion characters (see below)\r\n/V:ON   Enable delayed environment variable expansion using ! as the\r\n        delimiter. For example, /V:ON would allow !var! to expand the\r\n        variable var at execution time.  The var syntax expands variables\r\n        at input time, which is quite a different thing when inside of a FOR\r\n        loop.\r\n/V:OFF  Disable delayed environment expansion.\r\n\r\nNote that multiple commands separated by the command separator '\u0026\u0026'\r\nare accepted for string if surrounded by quotes.  Also, for compatibility\r\nreasons, /X is the same as /E:ON, /Y is the same as /E:OFF and /R is the\r\nsame as /C.  Any other switches are ignored.\r\n\r\nIf /C or /K is specified, then the remainder of the command line after\r\nthe switch is processed as a command line, where the following logic is\r\nused to process quote (\") characters:\r\n\r\n    1.  If all of the following conditions are met, then quote characters\r\n        on the command line are preserved:\r\n\r\n        - no /S switch\r\n        - exactly two quote characters\r\n        - no special characters between the two quote characters,\r\n          where special is one of: \u0026\u003c\u003e()@^|\r\n        - there are one or more whitespace characters between the\r\n          two quote characters\r\n        - the string between the two quote characters is the name\r\n          of an executable file.\r\n\r\n    2.  Otherwise, old behavior is to see if the first character is\r\n        a quote character and if so, strip the leading character and\r\n        remove the last quote character on the command line, preserving\r\n        any text after the last quote character.\r\n\r\nIf /D was NOT specified on the command line, then when CMD.EXE starts, it\r\nlooks for the following REG_SZ/REG_EXPAND_SZ registry variables, and if\r\neither or both are present, they are executed first.\r\n\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\AutoRun\r\n\r\n        and/or\r\n\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\AutoRun\r\n\r\nCommand Extensions are enabled by default.  You may also disable\r\nextensions for a particular invocation by using the /E:OFF switch.  You\r\ncan enable or disable extensions for all invocations of CMD.EXE on a\r\nmachine and/or user logon session by setting either or both of the\r\nfollowing REG_DWORD values in the registry using REGEDIT.EXE:\r\n\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\EnableExtensions\r\n\r\n        and/or\r\n\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\EnableExtensions\r\n\r\nto either 0x1 or 0x0.  The user specific setting takes precedence over\r\nthe machine setting.  The command line switches take precedence over the\r\nregistry settings.\r\n\r\nIn a batch file, the SETLOCAL ENABLEEXTENSIONS or DISABLEEXTENSIONS arguments\r\ntakes precedence over the /E:ON or /E:OFF switch. See SETLOCAL /? for details.\r\n\r\nThe command extensions involve changes and/or additions to the following\r\ncommands:\r\n\r\n    DEL or ERASE\r\n    COLOR\r\n    CD or CHDIR\r\n    MD or MKDIR\r\n    PROMPT\r\n    PUSHD\r\n    POPD\r\n    SET\r\n    SETLOCAL\r\n    ENDLOCAL\r\n    IF\r\n    FOR\r\n    CALL\r\n    SHIFT\r\n    GOTO\r\n    START (also includes changes to external command invocation)\r\n    ASSOC\r\n    FTYPE\r\n\r\nTo get specific details, type commandname /? to view the specifics.\r\n\r\nDelayed environment variable expansion is NOT enabled by default.  You\r\ncan enable or disable delayed environment variable expansion for a\r\nparticular invocation of CMD.EXE with the /V:ON or /V:OFF switch.  You\r\ncan enable or disable delayed expansion for all invocations of CMD.EXE on a\r\nmachine and/or user logon session by setting either or both of the\r\nfollowing REG_DWORD values in the registry using REGEDIT.EXE:\r\n\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\DelayedExpansion\r\n\r\n        and/or\r\n\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\DelayedExpansion\r\n\r\nto either 0x1 or 0x0.  The user specific setting takes precedence over\r\nthe machine setting.  The command line switches take precedence over the\r\nregistry settings.\r\n\r\nIn a batch file the SETLOCAL ENABLEDELAYEDEXPANSION or DISABLEDELAYEDEXPANSION\r\narguments takes precedence over the /V:ON or /V:OFF switch. See SETLOCAL /?\r\nfor details.\r\n\r\nIf delayed environment variable expansion is enabled, then the exclamation\r\ncharacter can be used to substitute the value of an environment variable\r\nat execution time.\r\n\r\nYou can enable or disable file name completion for a particular\r\ninvocation of CMD.EXE with the /F:ON or /F:OFF switch.  You can enable\r\nor disable completion for all invocations of CMD.EXE on a machine and/or\r\nuser logon session by setting either or both of the following REG_DWORD\r\nvalues in the registry using REGEDIT.EXE:\r\n\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\CompletionChar\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\PathCompletionChar\r\n\r\n        and/or\r\n\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\CompletionChar\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\PathCompletionChar\r\n\r\nwith the hex value of a control character to use for a particular\r\nfunction (e.g.  0x4 is Ctrl-D and 0x6 is Ctrl-F).  The user specific\r\nsettings take precedence over the machine settings.  The command line\r\nswitches take precedence over the registry settings.\r\n\r\nIf completion is enabled with the /F:ON switch, the two control\r\ncharacters used are Ctrl-D for directory name completion and Ctrl-F for\r\nfile name completion.  To disable a particular completion character in\r\nthe registry, use the value for space (0x20) as it is not a valid\r\ncontrol character.\r\n\r\nCompletion is invoked when you type either of the two control\r\ncharacters.  The completion function takes the path string to the left\r\nof the cursor appends a wild card character to it if none is already\r\npresent and builds up a list of paths that match.  It then displays the\r\nfirst matching path.  If no paths match, it just beeps and leaves the\r\ndisplay alone.  Thereafter, repeated pressing of the same control\r\ncharacter will cycle through the list of matching paths.  Pressing the\r\nShift key with the control character will move through the list\r\nbackwards.  If you edit the line in any way and press the control\r\ncharacter again, the saved list of matching paths is discarded and a new\r\none generated.  The same occurs if you switch between file and directory\r\nname completion.  The only difference between the two control characters\r\nis the file completion character matches both file and directory names,\r\nwhile the directory completion character only matches directory names.\r\nIf file completion is used on any of the built in directory commands\r\n(CD, MD or RD) then directory completion is assumed.\r\n\r\nThe completion code deals correctly with file names that contain spaces\r\nor other special characters by placing quotes around the matching path.\r\nAlso, if you back up, then invoke completion from within a line, the\r\ntext to the right of the cursor at the point completion was invoked is\r\ndiscarded.\r\n\r\nThe special characters that require quotes are:\r\n     \u003cspace\u003e\r\n     \u0026()[]{}^=;!'+,`~\r\n",
  "Stderr": "",
  "ReturnCode": 1,
  "Complete": true
 }
]SELECT * FROM execve(argv=['cmd.exe', '/?'], length=10) LIMIT 5[
 {
  "Stdout": "Starts a n",
  "Stderr": "",
  "ReturnCode": 0,
  "Complete": false
 },
 {
  "Stdout": "ew instanc",
  "Stderr": "",
  "ReturnCode": 0,
  "Complete": false
 },
 {
  "Stdout": "e of the W",
  "Stderr": "",
  "ReturnCode": 0,
  "Complete": false
 },
 {
  "Stdout": "indows com",
  "Stderr": "",
  "ReturnCode": 0,
  "Complete": false
 },
 {
  "Stdout": "mand inter",
  "Stderr": "",
  "ReturnCode": 0,
  "Complete": false
 }
]SELECT Stdout, hash(path=Stdout, accessor='data') as Hash FROM execve(argv=['cmd.exe', '/?'])[
 {
  "Stdout": "Starts a new instance of the Windows command interpreter\r\n\r\nCMD [/A | /U] [/Q] [/D] [/E:ON | /E:OFF] [/F:ON | /F:OFF] [/V:ON | /V:OFF]\r\n    [[/S] [/C | /K] string]\r\n\r\n/C      Carries out the command specified by string and then terminates\r\n/K      Carries out the command specified by string but remains\r\n/S      Modifies the treatment of string after /C or /K (see below)\r\n/Q      Turns echo off\r\n/D      Disable execution of AutoRun commands from registry (see below)\r\n/A      Causes the output of internal commands to a pipe or file to be ANSI\r\n/U      Causes the output of internal commands to a pipe or file to be\r\n        Unicode\r\n/T:fg   Sets the foreground/background colors (see COLOR /? for more info)\r\n/E:ON   Enable command extensions (see below)\r\n/E:OFF  Disable command extensions (see below)\r\n/F:ON   Enable file and directory name completion characters (see below)\r\n/F:OFF  Disable file and directory name completion characters (see below)\r\n/V:ON   Enable delayed environment variable expansion using ! as the\r\n        delimiter. For example, /V:ON would allow !var! to expand the\r\n        variable var at execution time.  The var syntax expands variables\r\n        at input time, which is quite a different thing when inside of a FOR\r\n        loop.\r\n/V:OFF  Disable delayed environment expansion.\r\n\r\nNote that multiple commands separated by the command separator '\u0026\u0026'\r\nare accepted for string if surrounded by quotes.  Also, for compatibility\r\nreasons, /X is the same as /E:ON, /Y is the same as /E:OFF and /R is the\r\nsame as /C.  Any other switches are ignored.\r\n\r\nIf /C or /K is specified, then the remainder of the command line after\r\nthe switch is processed as a command line, where the following logic is\r\nused to process quote (\") characters:\r\n\r\n    1.  If all of the following conditions are met, then quote characters\r\n        on the command line are preserved:\r\n\r\n        - no /S switch\r\n        - exactly two quote characters\r\n        - no special characters between the two quote characters,\r\n          where special is one of: \u0026\u003c\u003e()@^|\r\n        - there are one or more whitespace characters between the\r\n          two quote characters\r\n        - the string between the two quote characters is the name\r\n          of an executable file.\r\n\r\n    2.  Otherwise, old behavior is to see if the first character is\r\n        a quote character and if so, strip the leading character and\r\n        remove the last quote character on the command line, preserving\r\n        any text after the last quote character.\r\n\r\nIf /D was NOT specified on the command line, then when CMD.EXE starts, it\r\nlooks for the following REG_SZ/REG_EXPAND_SZ registry variables, and if\r\neither or both are present, they are executed first.\r\n\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\AutoRun\r\n\r\n        and/or\r\n\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\AutoRun\r\n\r\nCommand Extensions are enabled by default.  You may also disable\r\nextensions for a particular invocation by using the /E:OFF switch.  You\r\ncan enable or disable extensions for all invocations of CMD.EXE on a\r\nmachine and/or user logon session by setting either or both of the\r\nfollowing REG_DWORD values in the registry using REGEDIT.EXE:\r\n\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\EnableExtensions\r\n\r\n        and/or\r\n\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\EnableExtensions\r\n\r\nto either 0x1 or 0x0.  The user specific setting takes precedence over\r\nthe machine setting.  The command line switches take precedence over the\r\nregistry settings.\r\n\r\nIn a batch file, the SETLOCAL ENABLEEXTENSIONS or DISABLEEXTENSIONS arguments\r\ntakes precedence over the /E:ON or /E:OFF switch. See SETLOCAL /? for details.\r\n\r\nThe command extensions involve changes and/or additions to the following\r\ncommands:\r\n\r\n    DEL or ERASE\r\n    COLOR\r\n    CD or CHDIR\r\n    MD or MKDIR\r\n    PROMPT\r\n    PUSHD\r\n    POPD\r\n    SET\r\n    SETLOCAL\r\n    ENDLOCAL\r\n    IF\r\n    FOR\r\n    CALL\r\n    SHIFT\r\n    GOTO\r\n    START (also includes changes to external command invocation)\r\n    ASSOC\r\n    FTYPE\r\n\r\nTo get specific details, type commandname /? to view the specifics.\r\n\r\nDelayed environment variable expansion is NOT enabled by default.  You\r\ncan enable or disable delayed environment variable expansion for a\r\nparticular invocation of CMD.EXE with the /V:ON or /V:OFF switch.  You\r\ncan enable or disable delayed expansion for all invocations of CMD.EXE on a\r\nmachine and/or user logon session by setting either or both of the\r\nfollowing REG_DWORD values in the registry using REGEDIT.EXE:\r\n\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\DelayedExpansion\r\n\r\n        and/or\r\n\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\DelayedExpansion\r\n\r\nto either 0x1 or 0x0.  The user specific setting takes precedence over\r\nthe machine setting.  The command line switches take precedence over the\r\nregistry settings.\r\n\r\nIn a batch file the SETLOCAL ENABLEDELAYEDEXPANSION or DISABLEDELAYEDEXPANSION\r\narguments takes precedence over the /V:ON or /V:OFF switch. See SETLOCAL /?\r\nfor details.\r\n\r\nIf delayed environment variable expansion is enabled, then the exclamation\r\ncharacter can be used to substitute the value of an environment variable\r\nat execution time.\r\n\r\nYou can enable or disable file name completion for a particular\r\ninvocation of CMD.EXE with the /F:ON or /F:OFF switch.  You can enable\r\nor disable completion for all invocations of CMD.EXE on a machine and/or\r\nuser logon session by setting either or both of the following REG_DWORD\r\nvalues in the registry using REGEDIT.EXE:\r\n\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\CompletionChar\r\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor\\PathCompletionChar\r\n\r\n        and/or\r\n\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\CompletionChar\r\n    HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\\PathCompletionChar\r\n\r\nwith the hex value of a control character to use for a particular\r\nfunction (e.g.  0x4 is Ctrl-D and 0x6 is Ctrl-F).  The user specific\r\nsettings take precedence over the machine settings.  The command line\r\nswitches take precedence over the registry settings.\r\n\r\nIf completion is enabled with the /F:ON switch, the two control\r\ncharacters used are Ctrl-D for directory name completion and Ctrl-F for\r\nfile name completion.  To disable a particular completion character in\r\nthe registry, use the value for space (0x20) as it is not a valid\r\ncontrol character.\r\n\r\nCompletion is invoked when you type either of the two control\r\ncharacters.  The completion function takes the path string to the left\r\nof the cursor appends a wild card character to it if none is already\r\npresent and builds up a list of paths that match.  It then displays the\r\nfirst matching path.  If no paths match, it just beeps and leaves the\r\ndisplay alone.  Thereafter, repeated pressing of the same control\r\ncharacter will cycle through the list of matching paths.  Pressing the\r\nShift key with the control character will move through the list\r\nbackwards.  If you edit the line in any way and press the control\r\ncharacter again, the saved list of matching paths is discarded and a new\r\none generated.  The same occurs if you switch between file and directory\r\nname completion.  The only difference between the two control characters\r\nis the file completion character matches both file and directory names,\r\nwhile the directory completion character only matches directory names.\r\nIf file completion is used on any of the built in directory commands\r\n(CD, MD or RD) then directory completion is assumed.\r\n\r\nThe completion code deals correctly with file names that contain spaces\r\nor other special characters by placing quotes around the matching path.\r\nAlso, if you back up, then invoke completion from within a line, the\r\ntext to the right of the cursor at the point completion was invoked is\r\ndiscarded.\r\n\r\nThe special characters that require quotes are:\r\n     \u003cspace\u003e\r\n     \u0026()[]{}^=;!'+,`~\r\n",
  "Hash": {
   "MD5": "c41b800a07aad94e195d24a39b2eb1a3",
   "SHA1": "9596a345cc2a2536a260e40a929c1876bdce89ff",
   "SHA256": "d7f0ca6068dd7069f9b397a5db2e82871f752222e3d04c569207c4cf232aea24"
  }
 }
]