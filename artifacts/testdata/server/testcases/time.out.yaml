LET PARSE_TZ <= "Australia/Brisbane"[]LET DEBUG <= TRUE[]SELECT timestamp(string='March 3 2019'),
       timestamp(string='March 3 2019') < '2021-10-01',
       timestamp(string='07/25/2019 5pm'),

       -- This is in Brisbane time since no timezone is specified.
       timestamp(string="2021-10-01T10:53:32"),

       -- This is in UTC time because timezone is specified.
       timestamp(string="2021-10-01T10:53:32Z"),

       -- Formatting time as String produced RFC3339 encoding.
       format(format="The time is %s",
              args=timestamp(string='March 3 2019').String),

       -- Test epoch as second, ms and us
       timestamp(epoch=1630414425) AS Time1,
       timestamp(epoch=1630414425000) AS Time2,
       timestamp(epoch=1630414425000000) AS Time3,

       -- Test an explicit format specifier (Default timezone is +10)
       timestamp(string="8/30/2021 6:01:28 PM",
                 format="1/2/2006 3:04:05 PM") AS FormattedTime

FROM scope()
[
 {
  "timestamp(string='March 3 2019')": "2019-03-02T14:00:00Z",
  "timestamp(string='March 3 2019') \u003c '2021-10-01'": true,
  "timestamp(string='07/25/2019 5pm')": "2019-07-25T02:00:05Z",
  "timestamp(string=\"2021-10-01T10:53:32\")": "2021-10-01T00:53:32Z",
  "timestamp(string=\"2021-10-01T10:53:32Z\")": "2021-10-01T10:53:32Z",
  "format(format=\"The time is %s\", args=timestamp(string='March 3 2019').String)": "The time is 2019-03-02T14:00:00Z",
  "Time1": "2021-08-31T12:53:45Z",
  "Time2": "2021-08-31T12:53:45Z",
  "Time3": "2021-08-31T12:53:45Z",
  "FormattedTime": "2021-08-30T08:01:28Z"
 }
]SELECT Unix > 1630414425 FROM clock(period=60, start=0) LIMIT 1[
 {
  "Unix \u003e 1630414425": true
 }
]SELECT timestamp(epoch=1723428985) < 1118628985,
     1118628985 < timestamp(epoch=1723428985),
     timestamp(epoch=1723428985) < timestamp(epoch=1118628985),
     timestamp(epoch=1118628985) < timestamp(epoch=1723428985),
     timestamp(epoch=1723428985) > 1118628985,
     1118628985 > timestamp(epoch=1723428985),
     timestamp(epoch=1723428985) > timestamp(epoch=1118628985),
     timestamp(epoch=1118628985) > timestamp(epoch=1723428985),
     timestamp(epoch=1723428985) < 1118628985.0,
     1118628985.0 < timestamp(epoch=1723428985),
     timestamp(epoch=1723428985) > 1118628985.0,
     1118628985.0 > timestamp(epoch=1723428985),
     timestamp(epoch=1723428985),
     timestamp(epoch=1723428985) < "2024-08-12T02:15:25.176Z",
     "2024-08-12T02:15:25.176Z" < timestamp(epoch=1723428985),
     timestamp(epoch=1723428985) > "2024-08-12T02:15:25.176Z",
     "2024-08-12T02:15:25.176Z" > timestamp(epoch=1723428985)
FROM scope()
[
 {
  "timestamp(epoch=1723428985) \u003c 1118628985": false,
  "1118628985 \u003c timestamp(epoch=1723428985)": true,
  "timestamp(epoch=1723428985) \u003c timestamp(epoch=1118628985)": false,
  "timestamp(epoch=1118628985) \u003c timestamp(epoch=1723428985)": true,
  "timestamp(epoch=1723428985) \u003e 1118628985": true,
  "1118628985 \u003e timestamp(epoch=1723428985)": false,
  "timestamp(epoch=1723428985) \u003e timestamp(epoch=1118628985)": true,
  "timestamp(epoch=1118628985) \u003e timestamp(epoch=1723428985)": false,
  "timestamp(epoch=1723428985) \u003c 1118628985.0": false,
  "1118628985.0 \u003c timestamp(epoch=1723428985)": true,
  "timestamp(epoch=1723428985) \u003e 1118628985.0": true,
  "1118628985.0 \u003e timestamp(epoch=1723428985)": false,
  "timestamp(epoch=1723428985)": "2024-08-12T02:16:25Z",
  "timestamp(epoch=1723428985) \u003c \"2024-08-12T02:15:25.176Z\"": false,
  "\"2024-08-12T02:15:25.176Z\" \u003c timestamp(epoch=1723428985)": true,
  "timestamp(epoch=1723428985) \u003e \"2024-08-12T02:15:25.176Z\"": true,
  "\"2024-08-12T02:15:25.176Z\" \u003e timestamp(epoch=1723428985)": false
 }
]