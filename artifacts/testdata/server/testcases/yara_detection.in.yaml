Parameters:
  MZRule: |
      rule X { strings: $a = "MZ" condition: any of them }
  IsPE: |
      rule IsPE {
        meta:
          author = "the internet"
          date = "2021-03-04"
          description = "A simple PE rule to test yara features"
        condition:
          uint16(0) == 0x5A4D and
          uint32(uint32(0x3C)) == 0x00004550
      }


Queries:
  # Setup our mocks --MFT needs to be mocked as below to pass srcDir
  - |
    LET _ <= SELECT
          mock(plugin='info', results=[dict(OS='windows')]),
          mock(plugin='http_client', results=[
             dict(Url='http://remote',
                  Content=IsPE, Response=200)]),
          mock(plugin='glob', results=[
            dict(
              Name='wkscli.dll',
              ModTime=timestamp(string='2021-06-21T05:57:50.185936246Z'),
              FullPath=pathspec(Path=srcDir + '/artifacts/testdata/files/wkscli.dll'),
              OSPath=pathspec(Path=srcDir + '/artifacts/testdata/files/wkscli.dll'),
              Mtime=timestamp(string='2021-06-21T05:57:50.185936246Z'),
              Btime=timestamp(string='2021-06-21T05:57:50.185836399Z'),
              Ctime=timestamp(string='2021-06-21T05:57:50.185936246Z'),
              Atime=timestamp(string='2021-06-22T05:21:58.301135969Z'),
              Data=null,
              Size=9728,
              IsDir=false,
              IsLink=false
            ),
            dict(
              Name='notnbt.exe',
              ModTime=timestamp(string='2021-06-21T05:57:50.184145696Z'),
              FullPath=pathspec(Path=srcDir + '/artifacts/testdata/files/notnbt.exe'),
              OSPath=pathspec(Path=srcDir + '/artifacts/testdata/files/notnbt.exe'),
              Mtime=timestamp(string='2021-01-01T05:57:50.184145696Z'),
              Btime=timestamp(string='2021-03-01T05:57:50.184086639Z'),
              Ctime=timestamp(string='2021-03-21T05:57:50.184145696Z'),
              Atime=timestamp(string='2021-03-21T05:57:50.184157002Z'),
              Data=null,
              Size=17920,
              IsDir=false,
              IsLink=false
            )]),
          -- First call to Windows.NTFS.MFT reveal target dll info
          -- srcDir needs to be used to align fields
          mock(artifact=Artifact.Windows.NTFS.MFT, results=[
             dict(
              EntryNumber=42344,
              InUse = true,
              ParentEntryNumber = 3589,
              MFTPath = srcDir + "$MFT",
              FullPath =pathspec(Path=srcDir + "/artifacts/testdata/files/wkscli.dll"),
              OSPath =pathspec(Path=srcDir + "/artifacts/testdata/files/wkscli.dll"),
              FileName = "wkscli.dll",
              FileSize = 764976,
              ReferenceCount = 2,
              IsDir = false,
              Created0x10 = "2020-11-19T02:48:46.9885373Z",
              Created0x30 = "2021-01-24T06:57:36.7073284Z",
              LastModified0x10 = "2020-11-19T02:48:47.0041758Z",
              LastModified0x30 = "2021-01-24T06:57:39.5353986Z",
              LastRecordChange0x10 = "2021-01-24T06:59:40.7021579Z",
              LastRecordChange0x30 = "2021-01-24T06:57:39.5353986Z",
              LastAccess0x10 = "2021-03-05T13:44:04.1999087Z",
              LastAccess0x30 = "2021-01-24T06:57:36.7073284Z")
          ])
    FROM scope()

  # Remove paths from golden image
  - LET CleanContext(HitContext) = dict(StoredSize=HitContext.StoredSize,
        Path= HitContext.Path, Size= HitContext.Size, sha256= HitContext.sha256)

  # Test NTFS yara outputs from shorthand and standard yara
  - SELECT relpath(path=OSPath, base=srcDir, sep="/") as TestPath,
      Size, Rule, CleanContext(HitContext=HitContext), HitOffset
    FROM Artifact.Windows.Detection.Yara.NTFS(
       DriveLetter=srcDir,
       PathRegex='wkscli.dll', YaraRule=MZRule)
  - SELECT relpath(path=OSPath, base=srcDir, sep="/") as TestPath,
      Size, Rule, CleanContext(HitContext=HitContext), HitOffset
    FROM Artifact.Windows.Detection.Yara.NTFS(
       DriveLetter=srcDir,
       PathRegex='wkscli.dll', ContextBytes=10, YaraRule=MZRule)

  - SELECT relpath(path=OSPath, base=srcDir, sep="/") as TestPath,
           Size, Rule, CleanContext(HitContext=HitContext), HitOffset
    FROM Artifact.Windows.Detection.Yara.NTFS(
         DriveLetter=srcDir,
         PathRegex='wkscli.dll', YaraRule=IsPE)

  # test Generic glob based yara then a couple of time bounded queries
  - SELECT relpath(path=OSPath, base=srcDir, sep="/") as TestPath,Size, Rule,Mtime,Atime,Ctime,Btime
    FROM Artifact.Generic.Detection.Yara.Glob(YaraRule=IsPE)
  - SELECT relpath(path=OSPath, base=srcDir, sep="/") as TestPath,Size, Rule,Mtime,Atime,Ctime,Btime
    FROM Artifact.Generic.Detection.Yara.Glob(DateAfter='2021-03-01', DateBefore='2021-07-01',YaraRule=IsPE)
  - SELECT relpath(path=OSPath, base=srcDir, sep="/") as TestPath,
    CleanContext(HitContext=HitContext),
    Size,Rule,Mtime,Atime,Ctime,Btime
    FROM Artifact.Generic.Detection.Yara.Glob(DateBefore='2021-04-01',ContextBytes=10,YaraRule=MZRule)
