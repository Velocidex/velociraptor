Queries:
  - LET rows <= SELECT * FROM scope()

  # Test the len function.
  - SELECT len(list=["a", "b"]), len(list="hello"), len(list=dict(foo=1, bar=2, baz=3)),
           len(list=rows)
    FROM scope()

  # Test dict filtering: should filter all keys except Z=3 and build up
  # again into a new dict
  - SELECT to_dict(item={
       SELECT * FROM foreach(row=items(item=dict(X=1, Y=2, Z=3)),
       query={
           SELECT _key, _value from scope()
           WHERE _value = 3
       })
    }) AS Filtered FROM scope()

  # Test dict addition
  - SELECT dict(A=1, B=2) + dict(A=3, X=1)
    FROM scope()

  # Test cache functions (first 2 should be same value due to caching)
  - LET Foo(X) = if(condition=log(message=format(format="I Ran with %v", args=X)),
                    then=X + 5)
  - SELECT cache(func=Foo(X=5), key=5),
           cache(func=Foo(X=10), key=5),
           cache(func=Foo(X=10), key=10)
    FROM scope()

  # Test column_filter
  - SELECT * FROM column_filter(
    query={
       SELECT 1 AS A, 2 AS B, 3 AS AB, 4 AS AA
       FROM scope()
    }, include="A", exclude="B")


  # Test Xor stanard, multi character, hex
  - SELECT
      xor(string='test@velociraptor',key='$'),
      xor(string='test@velociraptor',key='test'),
      xor(string=unhex(string='000100010002'), key=unhex(string='2e'))
    FROM scope()

  # Test the set function - Add a field to a dict.
  - LET Foo <= dict(A=1)
  - SELECT set(item=Foo, field="B", value=2) FROM scope()
  - SELECT Foo FROM scope()

  # Test cidr function
  - SELECT cidr_contains(ip="192.168.0.132", ranges="192.168.0.0/24"),
           cidr_contains(ip="191.168.0.132", ranges="192.168.0.0/24"),
           cidr_contains(ip="10.168.0.132", ranges=["192.168.0.0/24", "10.0.0.0/8"])
    FROM scope()

  # Test commandline_split function
  - SELECT
    commandline_split(command='''"C:\Program Files\Velociraptor\Velociraptor.exe" service run'''),
    commandline_split(command="/usr/bin/ls -l 'file with space.txt'", bash_style=TRUE)
    FROM scope()

  # Test regex_transform
  - SELECT regex_transform(source="Hello world", map=dict(
       `^Hello`="Goodbye",
       `world`="Space"), key="A")
    FROM scope()

  # Test entropy function
  - SELECT
    entropy(string="Hello world")
    FROM scope()

  # Test gunzip function
  - LET base64_shellcode = 'H4sICHEBVGMAA3RleHQudHh0AMtIzcnJVyjPL8pJ4QIALTsIrwwAAAA='
  - SELECT gunzip(string=base64decode(string=base64_shellcode)) FROM scope()

  # Test the ALL function
  - LET TestArray <= ("Hello", "World", "Goodbye", "Universe")
  - SELECT all(items=TestArray, filter="x=>x=~'Hello|Uni|Wo|G'"),
           all(items=TestArray, filter="x=>x=~'Hello|Uni'"),
           all(items=["Hi", "There"], filter="x=>x =~ 'Hi'"),
           all(items=["Hi", "There"], filter="x=>x =~ 'Hi|There'")
    FROM scope()

  # For convenience all() also supports just a bunch of regex
  - SELECT all(items=TestArray, regex='Hello|Uni|Wo|G'),
           all(items=TestArray, regex='Hello|Uni'),
           all(items=["Hi", "There"], regex='Hi'),
           all(items=["Hi", "There"], regex='Hi|There')
    FROM scope()

  # Or multiple regex in an array - in which case ALL regex must match
  # every item
  - SELECT all(items="Hi There", regex=['Hi', "Goodbye"]),
           all(items="Hi There", regex=['Hi', "ere"]),
           all(items=["Hi", "There"], regex=['H|T', 'i|r'])
    FROM scope()

  # all() can also operate on GROUP BY
  - LET TestArray <= (dict(X=1, Y="Hello"), dict(X=2, Y="Goodbye"), dict(X=1, Y="World"))
  - SELECT *,
           all(items=Y, filter="x=>x =~ 'Hello|World'"),
           all(items=Y, filter="x=>x =~ 'World'"),
           all(items=Y, filter="x=>x =~ 'Goodby'")
    FROM foreach(row=TestArray)
    GROUP BY X

  # all() can also operate on subqueries
  - SELECT all(items={
      SELECT * FROM foreach(row=TestArray)
      WHERE X = 1
    }, filter="x=> x.Y =~ 'Hel|Worl'")
    FROM scope()

  # Test the any function
  - SELECT any(items=TestArray, filter="x=>x.Y =~ 'Good'"),
           all(items=TestArray, filter="x=>x.Y =~ 'Good'")
    FROM scope()
