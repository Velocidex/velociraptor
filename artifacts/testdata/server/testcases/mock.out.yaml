# Mocking a plugin can be done in two ways:

# 1. A list of dicts means that each dict is a row and all rows will
#    be emitted each time the plugin is called.
Query: LET _ <= mock(plugin='pslist', results=[ dict(Pid=12, Name='word.exe'), dict(Pid=10, Name='notepad.exe'), ])
Output: []

Query: SELECT * FROM pslist()
Output: [
 {
  "Pid": 12,
  "Name": "word.exe"
 },
 {
  "Pid": 10,
  "Name": "notepad.exe"
 }
]

# Identical output for repeated calls.
Query: SELECT * FROM pslist()
Output: [
 {
  "Pid": 12,
  "Name": "word.exe"
 },
 {
  "Pid": 10,
  "Name": "notepad.exe"
 }
]

Query: LET _ <= mock_clear()
Output: []

# 2. A list of lists of dicts means each list is a separate call of the plugin.
Query: LET _ <= mock(plugin='pslist', results=[ ( dict(Pid=10, Name='notepad.exe'), ), ( dict(Pid=12, Name='word.exe'), ) ])
Output: []

# First call should give notepad.exe
Query: SELECT * FROM pslist()
Output: [
 {
  "Pid": 10,
  "Name": "notepad.exe"
 }
]

# Second call should give word.exe
Query: SELECT * FROM pslist()
Output: [
 {
  "Pid": 12,
  "Name": "word.exe"
 }
]

Query: LET _ <= mock_clear()
Output: []

# Mocking of an artifact can be done in two ways.
# 1. A list of dicts means that each dict is a row and all rows will
#    be emitted each time the plugin is called.
Query: LET _ <= mock(artifact=Artifact.Windows.System.Pslist, results=[ dict(Pid=12, Name='word.exe'), dict(Pid=10, Name='notepad.exe'), ])
Output: []

Query: SELECT * FROM Artifact.Windows.System.Pslist()
Output: [
 {
  "Pid": 12,
  "Name": "word.exe"
 },
 {
  "Pid": 10,
  "Name": "notepad.exe"
 }
]

# Identical output for repeated calls.
Query: SELECT * FROM Artifact.Windows.System.Pslist()
Output: [
 {
  "Pid": 12,
  "Name": "word.exe"
 },
 {
  "Pid": 10,
  "Name": "notepad.exe"
 }
]

Query: LET _ <= mock_clear()
Output: []

# 2. A list of lists of dicts means each list is a separate call of the plugin.
Query: LET _ <= mock(artifact=Artifact.Windows.System.Pslist, results=[ ( dict(Pid=10, Name='notepad.exe'), ), ( dict(Pid=12, Name='word.exe'), ) ])
Output: []

# First call should give notepad.exe
Query: SELECT * FROM Artifact.Windows.System.Pslist()
Output: [
 {
  "Pid": 10,
  "Name": "notepad.exe"
 }
]

# Second call should give word.exe
Query: SELECT * FROM Artifact.Windows.System.Pslist()
Output: [
 {
  "Pid": 12,
  "Name": "word.exe"
 }
]

Query: LET _ <= mock_clear()
Output: []

# Mock out the info plugin just for fun.
Query: LET X <= SELECT mock(plugin='info', results=[dict(OS='windows', foo='bar'), dict(OS='windows', foo='baz')] ), mock(artifact=Artifact.Windows.Network.Netstat, results=parse_json_array(data=ArtifactNetstatMock)), mock(plugin='netstat', results=parse_json_array(data=NetstatMock)), mock(artifact=Artifact.Windows.System.Pslist, results=parse_json_array(data=PSListMock)) FROM scope()
Output: []

Query: SELECT * FROM info()
Output: [
 {
  "OS": "windows",
  "foo": "bar"
 },
 {
  "OS": "windows",
  "foo": "baz"
 }
]

Query: SELECT * FROM Artifact.Windows.Network.Netstat()
Output: [
 {
  "Pid": 2432,
  "Name": "svchost.exe",
  "Family": "IPv6",
  "Type": "UDP",
  "Status": "",
  "Laddr.IP": "::",
  "Laddr.Port": 58542,
  "Raddr.IP": "",
  "Raddr.Port": 0,
  "Timestamp": "2019-11-27T01:17:34Z",
  "_Source": "Windows.Network.Netstat"
 },
 {
  "Pid": 5224,
  "Name": "SkypeApp.exe",
  "Family": "IPv6",
  "Type": "UDP",
  "Status": "",
  "Laddr.IP": "::",
  "Laddr.Port": 65065,
  "Raddr.IP": "",
  "Raddr.Port": 0,
  "Timestamp": "2019-11-27T02:55:17Z",
  "_Source": "Windows.Network.Netstat"
 },
 {
  "Pid": 7028,
  "Name": "nc.exe",
  "Family": "IPv4",
  "Type": "TCP",
  "Status": "LISTEN",
  "Laddr.IP": "0.0.0.0",
  "Laddr.Port": 3889,
  "Raddr.IP": "0.0.0.0",
  "Raddr.Port": 0,
  "Timestamp": "2019-12-06T05:24:30Z",
  "_Source": "Windows.Network.Netstat"
 }
]

# Netcat is trusted because it is signed should show up here.
Query: SELECT * FROM Artifact.Windows.Network.NetstatEnriched( ProcessNameRegex='.', AuthenticodeVerified="TRUSTED", Status="LISTENING", PortRegex="3889")
Output: [
 {
  "Pid": 7028,
  "Ppid": 2120,
  "Name": "nc.exe",
  "Path": "C:\\Users\\yolo\\Desktop\\nc.exe",
  "CommandLine": "C:\\Users\\yolo\\Desktop\\nc.exe  -L -p 3889 -s 0.0.0.0",
  "Hash": {
   "MD5": "5dcf26e3fbce71902b0cd7c72c60545b",
   "SHA1": "970bbe298c8ec673fe2257ad6363d29942171fd1",
   "SHA256": "e8fbec25db4f9d95b5e8f41cca51a4b32be8674a4dea7a45b6f7aeb22dbc38db"
  },
  "Username": "DESKTOP-687T2NR\\yolo",
  "Authenticode": {
   "Filename": "C:\\Users\\yolo\\Desktop\\nc.exe",
   "ProgramName": "",
   "PublisherLink": "",
   "MoreInfoLink": "",
   "SerialNumber": "010000000001307a27872d",
   "IssuerName": "GlobalSign ObjectSign CA",
   "SubjectName": "Jernej Simoncic",
   "TimestampIssuerName": "GlobalSign Timestamping CA",
   "TimestampSubjectName": "GlobalSign Time Stamping Authority",
   "Timestamp": "2011/09/16 22:52:48",
   "Trusted": "trusted"
  },
  "Family": "IPv6",
  "Type": "TCP",
  "Status": "LISTEN",
  "Laddr": "::",
  "Lport": 3889,
  "Raddr": "::",
  "Rport": 0,
  "Timestamp": "2019-11-27T01:18:15Z",
  "_Source": "Windows.Network.NetstatEnriched/Netstat"
 }
]

# Netcat is listening over IPv6 so not hits here.
Query: SELECT * FROM Artifact.Windows.Network.NetstatEnriched( ProcessNameRegex='.', AuthenticodeVerified="TRUSTED", Status="LISTENING", Family="IPv4", PortRegex="3889")
Output: []

# Netcat is listening over IPv6
Query: SELECT * FROM Artifact.Windows.Network.NetstatEnriched( ProcessNameRegex='.', AuthenticodeVerified="TRUSTED", Status="LISTENING", Family="IPv6", PortRegex="3889")
Output: [
 {
  "Pid": 7028,
  "Ppid": 2120,
  "Name": "nc.exe",
  "Path": "C:\\Users\\yolo\\Desktop\\nc.exe",
  "CommandLine": "C:\\Users\\yolo\\Desktop\\nc.exe  -L -p 3889 -s 0.0.0.0",
  "Hash": {
   "MD5": "5dcf26e3fbce71902b0cd7c72c60545b",
   "SHA1": "970bbe298c8ec673fe2257ad6363d29942171fd1",
   "SHA256": "e8fbec25db4f9d95b5e8f41cca51a4b32be8674a4dea7a45b6f7aeb22dbc38db"
  },
  "Username": "DESKTOP-687T2NR\\yolo",
  "Authenticode": {
   "Filename": "C:\\Users\\yolo\\Desktop\\nc.exe",
   "ProgramName": "",
   "PublisherLink": "",
   "MoreInfoLink": "",
   "SerialNumber": "010000000001307a27872d",
   "IssuerName": "GlobalSign ObjectSign CA",
   "SubjectName": "Jernej Simoncic",
   "TimestampIssuerName": "GlobalSign Timestamping CA",
   "TimestampSubjectName": "GlobalSign Time Stamping Authority",
   "Timestamp": "2011/09/16 22:52:48",
   "Trusted": "trusted"
  },
  "Family": "IPv6",
  "Type": "TCP",
  "Status": "LISTEN",
  "Laddr": "::",
  "Lport": 3889,
  "Raddr": "::",
  "Rport": 0,
  "Timestamp": "2019-11-27T01:18:15Z",
  "_Source": "Windows.Network.NetstatEnriched/Netstat"
 }
]

# Explorer has an established connection
Query: SELECT * FROM Artifact.Windows.Network.NetstatEnriched( ProcessNameRegex='.', Status="ESTABLISHED")
Output: [
 {
  "Pid": 4888,
  "Ppid": 4856,
  "Name": "explorer.exe",
  "Path": "C:\\Windows\\explorer.exe",
  "CommandLine": "C:\\Windows\\Explorer.EXE",
  "Hash": {
   "MD5": "4e196cea0c9c46a7d656c67e52e8c7c7",
   "SHA1": "726c9d759c5f02080fa003b50466a3be0c959865",
   "SHA256": "ed5f36137d09e1cfc0ccf2675fb5d460e7eed135ba36d3259d2c510592047f28"
  },
  "Username": "DESKTOP-BP4S7TF\\test",
  "Authenticode": {
   "Filename": "C:\\Windows\\explorer.exe",
   "ProgramName": "Microsoft Windows",
   "PublisherLink": "",
   "MoreInfoLink": "http://www.microsoft.com/windows",
   "SerialNumber": "330000023241fb59996dcc4dff000000000232",
   "IssuerName": "Microsoft Windows Production PCA 2011",
   "SubjectName": "Microsoft Windows",
   "TimestampIssuerName": "",
   "TimestampSubjectName": "",
   "Timestamp": "",
   "Trusted": "trusted"
  },
  "Family": "IPv4",
  "Type": "TCP",
  "Status": "ESTAB",
  "Laddr": "172.168.101.128",
  "Lport": 64371,
  "Raddr": "10.179.67.176",
  "Rport": 443,
  "Timestamp": "2019-12-07T03:30:58Z",
  "_Source": "Windows.Network.NetstatEnriched/Netstat"
 }
]

# Explorer has an established connection but it is trusted so wont
# show up here.
Query: SELECT * FROM Artifact.Windows.Network.NetstatEnriched( ProcessNameRegex='.', AuthenticodeVerified="NOT TRUSTED", Status="ESTABLISHED")
Output: []

# Test that we can call an artifact with the ** pattern
Query: SELECT Pid, CommandLine FROM Artifact.Windows.Network.NetstatEnriched( `**`=dict(ProcessNameRegex='.', Status="ESTABLISHED"))
Output: [
 {
  "Pid": 4888,
  "CommandLine": "C:\\Windows\\Explorer.EXE"
 }
]

