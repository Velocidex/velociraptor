Parameters:
  # Test data is a process memory dump obtained by (This uploads a sparse file with .idx):
  # SELECT upload(accessor="process", file="/9604") AS upload FROM scope()

  # To limit the size of the test data we slice the original memory
  # dump using dd to only contain the regions of interest
  # dd if=9604_full of=9604 bs=1000 count=240 skip=30480

  # Therefore the remapping has two sparse ranges:
  # 1. Remap the reduced file into the full filesize
  # 2. Remap this using the idx file to simulate the full process address space
  RemappingTemplate: |
    remappings:
      - type: shadow
        from:
          accessor: file
        on:
          accessor: file
      - type: mount
        from:
          accessor: ranged
          prefix: |
            {"Path": %q,
             "DelegateAccessor": "ranged",
             "DelegatePath": %q}
          path_type: pathspec
        on:
          accessor: process
          prefix: %q

Queries:
  - LET X <= format(format=RemappingTemplate,
       args=[
          dict(jsonl=read_file(filename= srcDir + '/artifacts/testdata/files/memory/9604.idx')),
          pathspec(path_type="pathspec",
                   DelegatePath= srcDir + '/artifacts/testdata/files/memory/9604',
                   DelegateAccessor="file",
                   Path=dict(jsonl='{"file_offset":0,"original_offset":30480000,"file_length":240000,"length":240000}\n')),
          "/9604"])

  - LET _ <= remap(config=X, clear=TRUE)

  # Only show some fields to verify it works.
  # Parse the PE from memory.
  - SELECT * FROM items(item=parse_pe(file="/9604",
       accessor='process', base_offset=140702188961792))
    WHERE _key =~ "Sections|FileHeader"

  # Dump the PE from memory and parse it again from disk.
  - SELECT * FROM items(
      item=parse_pe(file=pe_dump(pid=9604,
           base_offset=140702188961792), accessor="file"))
      WHERE _key =~ "Sections|FileHeader"
