Parameters:
  remoteYara: |
      rule X {
         strings: $a = "hello" nocase
         condition: $a
      }

  hiveSig: |
    rule Hive {
       strings: $a = "program"
       condition: uint32(0) == 0x66676572 and $a
    }

  imphashSig: |
    import "pe"
    rule Hive {
       condition: pe.imphash() == "f34d5f2d4577ed6d9ceec516c1f5a744"
    }

  findX: |
    rule X {
       strings: $a = "X"
       condition: any of them
    }

Queries:
  - SELECT mock(plugin='info', results=[dict(OS='windows'), dict(OS='windows')] )
    FROM scope()

  # Check the yara plugin works. For large block size the entire file
  # will be in memory.
  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=hiveSig, blocksize=10,
    files="regfXXXXXXXXXXXXXXXXXXXXXXprogram", accessor="data")

  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=hiveSig, blocksize=1000,
    files="regfXXXXXXXXXXXXXXXXXXXXXXprogram", accessor="data")

  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=findX, number=1,
    files="regfXXXXXXXXXXXXXXXXXXXXXXprogram", accessor="data")

  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=findX, number=2,
    files="regfXXXXXXXXXXXXXXXXXXXXXXprogram", accessor="data")

  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=findX, start=10, number=1,
    files="regfXXXXXXXXXXXXXXXXXXXXXXprogram", accessor="data")

  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=findX, start=10, end=12, number=20,
    files="regfXXXXXXXXXXXXXXXXXXXXXXprogram", accessor="data")

  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=findX, number=1, context=2,
    files="regfXXXXXXXXXXXXXXXXXXXXXXprogram", accessor="data")

  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=findX, number=1, context=10,
    files="regfXXXXXXXXXXXXXXXXXXXXXXprogram", accessor="data")


  # For "file" accessors we mmap the file and so blocksize is
  # ignored. This should work as above.
  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=hiveSig, blocksize=10,
    files=srcDir+"/artifacts/testdata/files/Amcache.hve")

  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=hiveSig, context=10,
    files=srcDir+"/artifacts/testdata/files/yara_test.txt")

  - |
    SELECT String.Offset, str(str=String.Data) AS Hit
    FROM yara(rules=hiveSig, context=10, accessor="file",
    files=srcDir+"/artifacts/testdata/files/yara_test.txt")


  # Imphash should also work
  - |
    SELECT "imphash", basename(path=FileName)
    FROM yara(rules=imphashSig, accessor="file",
    files=srcDir+"/artifacts/testdata/files/3DBuilder.ResourceResolver.exe")

  # Setup our mocks
  - |
    LET _ <= SELECT
          mock(plugin='http_client', results=[
             dict(Url='http://remote',
                  Content=remoteYara, Response=200)]),

          // First call to pslist will reveal our own process.
          mock(plugin='pslist', results=[
             dict(CommandLine="velociraptor", Pid=12, Name="Velociraptor")
          ]),

          // Second call is a process listing.
          mock(plugin='pslist', results=[
             dict(CommandLine="cmd", Pid=1232, Name="cmd.exe"),
             dict(CommandLine="svchost", Pid=1234, Name="svchost.exe"),
             dict(CommandLine="mimikatz", Pid=1236, Name="mimikatz.exe")
          ]),

          mock(plugin='proc_yara', results=[
             dict(Rule="Proc Hit",
                  Meta=dict(),
                  Namespace="default",
                  Strings=[
                    dict(Name="Name1",
                         Data="Foobar",
                         Offset=20),
                    dict(Name="Name2",
                         Data="Other Hit",
                         Offset=50)
                  ])
          ]),

          mock(plugin='proc_dump', results=[
             dict(FullPath="C:\\Users\\test\\AppData\\Local\\Temp\\dmp770529331.dmp",
                  Pid=844)
          ]),

          mock(function='upload', results=[
             dict(FullPath="C:\\Users\\test\\AppData\\Local\\Temp\\dmp770529331.dmp",
                  Pid=844)
          ])
    FROM scope()

  # Check that we can filter by process name
  - SELECT * FROM Artifact.Windows.Detection.RemoteYara.Process(
           source="", processRegex='cmd',
           yaraURL='http://remote')

  # Should not dump or upload since we did not specify collectProcess=TRUE
  - SELECT mock_check(plugin='proc_dump', expected_calls=0),
           mock_check(function='upload', expected_calls=0),
           mock_check(plugin="proc_yara", expected_calls=1)
    FROM scope()

  # Check that we can filter by process pid
  - SELECT * FROM Artifact.Windows.Detection.RemoteYara.Process(
           source="", pidRegex='1236',
           yaraURL='http://remote')

  #  Should not dump or upload since we did not specify collectProcess=TRUE
  - SELECT mock_check(plugin='proc_dump', expected_calls=0),
           mock_check(function='upload', expected_calls=0),
           mock_check(plugin="proc_yara", expected_calls=1)
    FROM scope()

  #  Now we should dump and upload one process since we did specify
  #  collectProcess=TRUE
  - SELECT * FROM Artifact.Windows.Detection.RemoteYara.Process(
           pidRegex='1236',  collectProcess="Y", source="",
           yaraURL='http://remote')

  - SELECT mock_check(plugin='proc_dump', expected_calls=1),
           mock_check(function='upload', expected_calls=1),
           mock_check(plugin="proc_yara", expected_calls=1)
    FROM scope()
