# All *.Search.FileFinder are basically the same artifact with
# different defaults, we just test one of them here.
Queries:
  - SELECT mock(plugin='info', results=[dict(OS='windows'), dict(OS='windows')] )
    FROM scope()

# Just find a zip file.
  - SELECT basename(path=FullPath) AS File, Hash, Size, Upload, Keywords
    FROM Artifact.Windows.Search.FileFinder(
        SearchFilesGlob=srcDir + "/artifacts/testdata/files/*.zip")
    WHERE File =~ "test"

# Calculate the hash.
  - SELECT basename(path=FullPath) AS File, Hash, Size, Upload, Keywords
    FROM Artifact.Windows.Search.FileFinder(
        Calculate_Hash="Y",
        SearchFilesGlob=srcDir + "/artifacts/testdata/files/*.zip")
    WHERE File =~ "test"

# Upload it.
  - SELECT basename(path=FullPath) AS File, Hash, Size, Upload.md5, Keywords
    FROM Artifact.Windows.Search.FileFinder(
        Upload_File="Y",
        SearchFilesGlob=srcDir + "/artifacts/testdata/files/*.zip")
    WHERE File =~ "test"

# Search for files that match a keyword
  - SELECT basename(path=FullPath) AS File, Keywords
    FROM Artifact.Windows.Search.FileFinder(
        YaraRule="wide nocase ascii:supercalifragilisticexpialidocious",
        SearchFilesGlob=srcDir + "/artifacts/testdata/**/*.in.yaml")

# Search globs provided in a csv table
  - |
    SELECT basename(path=FullPath) AS File, Hash, Size, Upload, Keywords
    FROM Artifact.Windows.Search.FileFinder(
        SearchFilesGlob="",
        SearchFilesGlobTable="Glob\n"+ srcDir + "/artifacts/testdata/files/*.zip\n")
    WHERE File =~ "test"
