# The FileName contains the Delegate details and the full sparse
# map as a path.
Query: LET FileName <= pathspec( path_type="pathspec", DelegateAccessor="data", DelegatePath=MyData, Path=[dict(Offset=0,Length=5), dict(Offset=10,Length=5)])
Output: []

# Test that reads work across the sparse regions
# TestCase1: large read across the full file
# TestCase2: read from parse region to data region
# TestCase3: read from data region to sparse region
Query: SELECT format(format="%x", args=read_file(accessor="sparse", length=200, offset=0, filename=FileName)) AS TestCase1, format(format="%x", args=read_file(accessor="sparse", length=5, offset=8, filename=FileName)) AS TestCase2, format(format="%x", args=read_file(accessor="sparse", length=5, offset=3, filename=FileName)) AS TestCase3 FROM scope()
Output: [
 {
  "TestCase1": "746869732000000000007465737420",
  "TestCase2": "0000746573",
  "TestCase3": "7320000000"
 }
]

# Test that yara skips over sparse regions - should only find $b and
# not $a
Query: SELECT String.Name FROM yara(accessor="sparse", files=FileName, rules='''
  rule X {
  strings:
    $a = "s a"
    $b = "test"

  condition:
    any of them
  }
  ''')

Output: [
 {
  "String.Name": "$b"
 }
]

